/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./app.js":
/*!****************!*\
  !*** ./app.js ***!
  \****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var astronomia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! astronomia */ \"./node_modules/astronomia/src/index.js\");\n// Importez la bibliothèque Astronomia.js\r\n\r\n\r\n// Obtenez la date julienne actuelle\r\nconst today = new Date();\r\nconst jd = astronomia__WEBPACK_IMPORTED_MODULE_0__.julian.CalendarGregorianToJD(today.getFullYear(), today.getMonth() + 1, today.getDate());\r\n\r\n// Calculez la position du soleil et de la lune pour la date actuelle\r\nconst sunPos = astronomia__WEBPACK_IMPORTED_MODULE_0__.solar.apparentEquatorial(jd);\r\nconst moonPos = astronomia__WEBPACK_IMPORTED_MODULE_0__.moonposition.position(jd);\r\n\r\n\r\n/***********************************************************/\r\n//l'élément qui suit est chargé même si supprimé...?\r\n\r\n// Affichez les résultats dans la page HTML\r\nconst resultElement = document.getElementById(\"result\");\r\nresultElement.innerHTML = `\r\n  <p>dans le calendrier julian, nous sommes le jour : ${jd}</p>\r\n  <p>Position du Soleil de moi : Ascension droite ${sunPos.ra}°, Déclinaison ${sunPos.dec}°</p>\r\n  <p>Position de la Lune : Ascension droite ${moonPos.ra}°, Déclinaison ${moonPos.dec}°</p>\r\n`;\r\n\n\n//# sourceURL=webpack://astro-web/./app.js?");

/***/ }),

/***/ "./node_modules/astronomia/data/deltat.js":
/*!************************************************!*\
  !*** ./node_modules/astronomia/data/deltat.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * DO NOT EDIT MANUALLY\r\n * Use `scripts/deltat.js` to generate file.\r\n * Datasets are from <https://maia.usno.navy.mil/ser7> and\r\n * <ftp://ftp.iers.org/products/eop/rapid/standard>\r\n */\r\nconst m = {\r\n  historic: {\r\n    table: [44, 43, 43, 41, 40, 39, 38, 37, 37, 36, 36, 36, 37, 37, 38, 37, 36, 36, 35, 35, 34, 33, 33, 32, 32, 31, 31, 30, 30, 29, 29, 29, 29, 29, 28, 28, 27, 27, 26, 26, 25, 25, 25, 26, 26, 26, 26, 25, 25, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21.1, 21, 21, 21, 20.9, 20.8, 20.7, 20.6, 20.4, 20.2, 20, 19.7, 19.4, 19.1, 18.7, 18.3, 17.8, 17.4, 17, 16.8, 16.6, 16.4, 16.1, 15.9, 15.7, 15.5, 15.3, 15, 14.7, 14.5, 14.3, 14.2, 14.1, 14.1, 14.1, 13.9, 13.7, 13.6, 13.5, 13.5, 13.5, 13.5, 13.4, 13.4, 13.4, 13.4, 13.3, 13.3, 13.2, 13.2, 13.2, 13.1, 13.1, 13.1, 13, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14, 14, 14.1, 14.1, 14.1, 14.1, 14.2, 14.3, 14.4, 14.4, 14.5, 14.6, 14.6, 14.7, 14.7, 14.7, 14.8, 14.8, 14.9, 14.9, 15, 15, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.6, 15.6, 15.8, 15.9, 15.9, 15.9, 15.8, 15.7, 15.8, 15.7, 15.7, 15.7, 15.8, 15.9, 16.1, 16.1, 16, 15.9, 15.9, 15.7, 15.4, 15.3, 15.4, 15.5, 15.6, 15.6, 15.6, 15.6, 15.6, 15.6, 15.6, 15.5, 15.5, 15.4, 15.3, 15.2, 15.1, 14.9, 14.8, 14.6, 14.4, 14.3, 14.2, 14.1, 14.2, 14.2, 13.9, 13.7, 13.5, 13.3, 13.1, 13, 13.2, 13.2, 13.1, 13.1, 13.2, 13.3, 13.5, 13.5, 13.4, 13.2, 13.2, 13.1, 13.1, 13, 12.8, 12.6, 12.7, 12.6, 12.3, 12, 11.9, 11.8, 11.6, 11.4, 11.2, 11.1, 11.1, 11.1, 11.1, 11.1, 11.2, 11.1, 11.1, 11.2, 11.4, 11.5, 11.3, 11.2, 11.4, 11.7, 11.9, 11.9, 11.9, 11.8, 11.7, 11.8, 11.8, 11.8, 11.7, 11.6, 11.6, 11.5, 11.5, 11.4, 11.4, 11.3, 11.3, 11.13, 11.16, 10.94, 10.72, 10.29, 10.04, 9.94, 9.91, 9.88, 9.86, 9.72, 9.67, 9.66, 9.64, 9.51, 9.4, 9.21, 9, 8.6, 8.29, 7.95, 7.73, 7.59, 7.49, 7.36, 7.26, 7.1, 7, 6.89, 6.82, 6.73, 6.64, 6.39, 6.28, 6.25, 6.27, 6.25, 6.27, 6.22, 6.24, 6.22, 6.27, 6.3, 6.36, 6.35, 6.37, 6.32, 6.33, 6.33, 6.37, 6.37, 6.41, 6.4, 6.44, 6.46, 6.51, 6.48, 6.51, 6.53, 6.58, 6.55, 6.61, 6.69, 6.8, 6.84, 6.94, 7.03, 7.13, 7.15, 7.22, 7.26, 7.3, 7.23, 7.22, 7.21, 7.2, 6.99, 6.98, 7.19, 7.36, 7.35, 7.39, 7.41, 7.45, 7.36, 7.18, 6.95, 6.72, 6.45, 6.24, 5.92, 5.59, 5.15, 4.67, 4.11, 3.52, 2.94, 2.47, 1.97, 1.52, 1.04, 0.6, 0.11, -0.34, -0.82, -1.25, -1.7, -2.08, -2.48, -2.82, -3.19, -3.5, -3.84, -4.14, -4.43, -4.59, -4.79, -4.92, -5.09, -5.24, -5.36, -5.34, -5.37, -5.32, -5.34, -5.33, -5.4, -5.47, -5.58, -5.66, -5.74, -5.68, -5.69, -5.65, -5.67, -5.68, -5.73, -5.72, -5.78, -5.79, -5.86, -5.89, -6.01, -6.13, -6.28, -6.41, -6.53, -6.49, -6.5, -6.45, -6.41, -6.26, -6.11, -5.9, -5.63, -5.13, -4.68, -4.19, -3.72, -3.21, -2.7, -2.09, -1.48, -0.75, -0.08, 0.62, 1.26, 1.95, 2.59, 3.28, 3.92, 4.61, 5.2, 5.73, 6.29, 7, 7.68, 8.45, 9.13, 9.78, 10.38, 10.99, 11.64, 12.47, 13.23, 14, 14.69, 15.38, 16, 16.64, 17.19, 17.72, 18.19, 18.67, 19.13, 19.69, 20.14, 20.54, 20.86, 21.14, 21.41, 21.78, 22.06, 22.3, 22.51, 22.79, 23.01, 23.29, 23.46, 23.55, 23.63, 23.8, 23.95, 24.25, 24.39, 24.42, 24.34, 24.22, 24.1, 24.08, 24.02, 24.04, 23.98, 23.91, 23.89, 23.95, 23.93, 23.92, 23.88, 23.94, 23.91, 23.82, 23.76, 23.87, 23.91, 23.95, 23.96, 24, 24.04, 24.2, 24.35, 24.61, 24.82, 25.09, 25.3, 25.56, 25.77, 26.05, 26.27, 26.54, 26.76, 27.04, 27.27, 27.55, 27.77, 28.03, 28.25, 28.5, 28.7, 28.95, 29.15, 29.38, 29.57, 29.8, 29.97, 30.19, 30.36, 30.57, 30.72, 30.93, 31.07, 31.24, 31.349, 31.516, 31.677, 31.923, 32.166, 32.449, 32.671, 32.919, 33.15, 33.397, 33.584, 33.804, 33.992, 34.24, 34.466, 34.731, 35.03, 35.4, 35.738, 36.147, 36.546, 36.995, 37.429, 37.879, 38.291, 38.753, 39.204, 39.707, 40.182, 40.706, 41.17, 41.686, 42.227, 42.825, 43.373, 43.959, 44.486, 44.997, 45.477, 45.983, 46.458, 46.997, 47.521, 48.034, 48.535, 49.099, 49.589, 50.102, 50.54, 50.975, 51.382, 51.81, 52.168, 52.572, 52.957, 53.434, 53.789, 54.087],\r\n    first: 1657,\r\n    last: 1984.5\r\n  },\r\n  data: {\r\n    table: [43.4724372, 43.5648351, 43.6736863, 43.7782156, 43.8763273, 43.9562443, 44.0314956, 44.1131788, 44.1982187, 44.2951747, 44.3936471, 44.4840562, 44.5646335, 44.6425099, 44.7385767, 44.8370135, 44.9302138, 44.9986146, 45.0583549, 45.1283911, 45.2063835, 45.2980068, 45.3897017, 45.476138, 45.5632485, 45.6450189, 45.7374593, 45.8283721, 45.9132976, 45.9819705, 46.0407484, 46.1067084, 46.1825041, 46.2788561, 46.3713351, 46.4567207, 46.544486, 46.6310899, 46.7302231, 46.8283588, 46.9247443, 46.9969757, 47.0709148, 47.1450515, 47.2361542, 47.3413241, 47.4319364, 47.5213815, 47.6049313, 47.6837388, 47.7781381, 47.8770756, 47.9687104, 48.0348257, 48.0942021, 48.1608205, 48.2460028, 48.3438529, 48.4355405, 48.5344163, 48.6324506, 48.7293718, 48.8365414, 48.9353232, 49.0318781, 49.1013205, 49.1590844, 49.2285534, 49.3069683, 49.4017939, 49.4945263, 49.5861495, 49.6804907, 49.7602264, 49.8555805, 49.9489224, 50.0346777, 50.1018531, 50.1621723, 50.2260014, 50.2967905, 50.3831254, 50.4598772, 50.5387068, 50.6160484, 50.6865941, 50.7658362, 50.8453698, 50.918672, 50.9761148, 51.0278017, 51.084323, 51.1537928, 51.2318645, 51.306308, 51.3807849, 51.4526292, 51.5160394, 51.5985479, 51.680924, 51.7572854, 51.8133335, 51.8532385, 51.9014358, 51.9603433, 52.0328072, 52.0984957, 52.1667826, 52.2316418, 52.2938376, 52.3679897, 52.4465221, 52.5179552, 52.5751485, 52.6178012, 52.666816, 52.7340036, 52.8055792, 52.8792189, 52.9564838, 53.0444971, 53.126769, 53.2196749, 53.3024139, 53.3746645, 53.4335399, 53.4778015, 53.5299937, 53.5845392, 53.6522628, 53.7255844, 53.7882418, 53.8366625, 53.8829665, 53.9442904, 54.0042478, 54.0536342, 54.085644, 54.1084122, 54.1462942, 54.1913988, 54.2452023, 54.2957622, 54.3427024, 54.3910864, 54.4319877, 54.4897699, 54.545636, 54.597741, 54.6354962, 54.6532352, 54.677594, 54.7173643, 54.7740957, 54.8253023, 54.8712512, 54.916146, 54.9580535, 54.9997186, 55.047571, 55.0911778, 55.1132386, 55.132774, 55.1532423, 55.1898003, 55.2415531, 55.283803, 55.3222105, 55.3612676, 55.406262, 55.4628719, 55.5110909, 55.5523777, 55.5811877, 55.6004372, 55.626202, 55.6656271, 55.7167999, 55.7698097, 55.8196609, 55.8615028, 55.9129883, 55.9663474, 56.0220102, 56.0700015, 56.0939035, 56.110463, 56.1313736, 56.1610839, 56.2068432, 56.2582503, 56.3000349, 56.339902, 56.3789995, 56.4282839, 56.4803947, 56.5352164, 56.5697487, 56.5983102, 56.6328326, 56.6738814, 56.7332116, 56.7971596, 56.8552701, 56.9111378, 56.9754725, 57.0470772, 57.1136128, 57.173831, 57.2226068, 57.259731, 57.3072742, 57.3643368, 57.4334281, 57.5015747, 57.5653127, 57.6333396, 57.6972844, 57.7710774, 57.8407427, 57.9057801, 57.9575663, 57.9974929, 58.0425517, 58.1043319, 58.1679128, 58.2389092, 58.3091659, 58.3833021, 58.4536748, 58.5401438, 58.6227714, 58.6916662, 58.7409628, 58.7836189, 58.8405543, 58.898579, 58.9713678, 59.043837, 59.1218414, 59.2002687, 59.274737, 59.3574134, 59.4433827, 59.5242416, 59.5849787, 59.6343497, 59.6927827, 59.758805, 59.8386448, 59.9110567, 59.9844537, 60.056435, 60.123065, 60.2042185, 60.2803745, 60.3530352, 60.4011891, 60.4439959, 60.4900257, 60.5578054, 60.6324446, 60.7058569, 60.7853482, 60.8663504, 60.9386672, 61.0276757, 61.1103448, 61.1870458, 61.2453891, 61.2881024, 61.3377799, 61.4036165, 61.4760366, 61.5524599, 61.6286593, 61.6845819, 61.743306, 61.8132425, 61.8823203, 61.9496762, 61.9968743, 62.0342938, 62.0714108, 62.1202315, 62.1809508, 62.2382046, 62.2950486, 62.3506479, 62.3995381, 62.475395, 62.5463091, 62.6136031, 62.6570739, 62.6941742, 62.7383271, 62.7926305, 62.8566986, 62.9145607, 62.9658689, 63.0216632, 63.0807052, 63.1461718, 63.2052946, 63.2599441, 63.2844088, 63.2961369, 63.3126092, 63.3421622, 63.3871303, 63.4339302, 63.4673369, 63.4978642, 63.5319327, 63.5679441, 63.6104432, 63.6444291, 63.6641815, 63.6739403, 63.692603, 63.7147066, 63.7518055, 63.792717, 63.8285221, 63.8556871, 63.8803854, 63.9075025, 63.9392787, 63.9690744, 63.9798604, 63.9833077, 63.9938011, 64.0093384, 64.0399621, 64.0670429, 64.0907881, 64.1068077, 64.1282125, 64.1584211, 64.1832722, 64.2093975, 64.2116628, 64.2073173, 64.2115565, 64.2222858, 64.2499625, 64.2760973, 64.2998037, 64.3191858, 64.345013, 64.3734584, 64.3943291, 64.4151156, 64.4132064, 64.4118464, 64.4096536, 64.4167832, 64.43292, 64.4510529, 64.4734276, 64.4893377, 64.5053342, 64.5269189, 64.5470942, 64.5596729, 64.5512293, 64.5370906, 64.5359472, 64.5414947, 64.5543634, 64.5654298, 64.5736111, 64.5891142, 64.6014759, 64.6176147, 64.6374397, 64.6548674, 64.6530021, 64.6379271, 64.637161, 64.6399614, 64.6543152, 64.6723164, 64.6876311, 64.7051905, 64.7313433, 64.7575312, 64.7811143, 64.8000929, 64.7994561, 64.7876424, 64.783095, 64.7920604, 64.8096421, 64.8310888, 64.8451826, 64.8597013, 64.8849929, 64.9174991, 64.9480298, 64.9793881, 64.9894772, 65.0028155, 65.0138193, 65.0371432, 65.0772597, 65.112197, 65.1464034, 65.1832638, 65.2145358, 65.2493713, 65.2920645, 65.3279403, 65.3413366, 65.3451881, 65.34964, 65.3711307, 65.3971998, 65.4295547, 65.4573487, 65.486752, 65.5152012, 65.5449916, 65.5780768, 65.612728, 65.6287505, 65.6370091, 65.6493375, 65.6759928, 65.7096966, 65.746092, 65.7768362, 65.8024614, 65.8236695, 65.8595036, 65.8973008, 65.932291, 65.950911, 65.9534105, 65.962833, 65.9838647, 66.0146733, 66.042049, 66.0699217, 66.0961343, 66.1310116, 66.1682713, 66.2071627, 66.2355846, 66.2408549, 66.2335423, 66.2349107, 66.2441095, 66.2751123, 66.3054334, 66.3245568, 66.3405713, 66.3624433, 66.3957101, 66.428903, 66.4618675, 66.4748837, 66.4751281, 66.4828678, 66.5056165, 66.5382912, 66.5705628, 66.6030198, 66.6339689, 66.6569117, 66.6925011, 66.7288729, 66.7578719, 66.7707625, 66.7740427, 66.7846288, 66.810324, 66.840048, 66.8778601, 66.9069091, 66.944259, 66.9762508, 67.0258126, 67.0716286, 67.1100184, 67.1266401, 67.1331391, 67.145797, 67.17174, 67.2091069, 67.2459812, 67.2810383, 67.3136452, 67.3456968, 67.389003, 67.4318433, 67.4666209, 67.4858459, 67.4989147, 67.5110936, 67.5352658, 67.571103, 67.6070253, 67.6439167, 67.6765272, 67.7116693, 67.7590634, 67.8011542, 67.840213, 67.8606318, 67.8821576, 67.9120101, 67.9546462, 68.0054839, 68.051412, 68.1024205, 68.1577127, 68.2043653, 68.2664507, 68.3188171, 68.3703564, 68.3964356, 68.4094472, 68.4304611, 68.4629791, 68.507818, 68.5537018, 68.5927179, 68.6298107, 68.6670627, 68.7135208, 68.7622755, 68.8032843, 68.8244838, 68.8373427, 68.847693, 68.8688567, 68.9005814, 68.9354999, 68.9676423, 68.9875354, 69.0175527, 69.0499081, 69.0823433, 69.1070034, 69.1134027, 69.1141898, 69.1207203, 69.1355578, 69.16459, 69.1964228, 69.2201632, 69.2451564, 69.2732758, 69.3031979, 69.3325675, 69.3540507, 69.3581722, 69.3441594, 69.3376329, 69.3377424, 69.3432191, 69.3540144, 69.3611554, 69.3751703, 69.3889904, 69.4091639, 69.4264662, 69.4386335, 69.4241335, 69.3921241, 69.3693422, 69.3574782, 69.3593242, 69.3630244, 69.359334, 69.3510133, 69.3537917, 69.3582217, 69.367306, 69.3678649, 69.3514228, 69.3273414, 69.3033273, 69.2892463, 69.2880419, 69.2908014, 69.2944974, 69.2913953, 69.286149, 69.2835153, 69.2815422, 69.2806375, 69.2553511, 69.2125426, 69.1847287, 69.17207, 69.1691531, 69.173303, 69.1698064, 69.1589095, 69.1556275, 69.1672253, 69.1771384],\r\n    first: 1973.0849315068492,\r\n    firstYM: [1973, 2],\r\n    last: 2023.3287671232877,\r\n    lastYM: [2023, 5]\r\n  },\r\n  prediction: {\r\n    table: [67.87818, 67.96817999999999, 68.02817999999999, 68.04818, 68.12818, 68.21817999999999, 68.26818, 68.28818, 68.36818, 68.44818, 68.50818, 68.51818, 68.59818, 68.68818, 68.73818, 68.74817999999999, 68.82818, 68.91817999999999, 68.96817999999999, 68.98818, 69.06818, 69.14818, 69.20818, 69.22818, 69.30818, 69.39818, 69.46817999999999, 69.48818, 69.57818, 69.66817999999999, 69.73818, 69.75818, 69.85817999999999, 69.95818, 70.02817999999999, 70.05818, 70.15818, 70.25818, 70.33818, 70.36818, 70.46817999999999],\r\n    first: 2022,\r\n    last: 2032\r\n  }\r\n};\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (m);\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/data/deltat.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/angle.js":
/*!**********************************************!*\
  !*** ./node_modules/astronomia/src/angle.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   hav: () => (/* binding */ hav),\n/* harmony export */   minSep: () => (/* binding */ minSep),\n/* harmony export */   minSepHav: () => (/* binding */ minSepHav),\n/* harmony export */   minSepPauwels: () => (/* binding */ minSepPauwels),\n/* harmony export */   minSepRect: () => (/* binding */ minSepRect),\n/* harmony export */   relativePosition: () => (/* binding */ relativePosition),\n/* harmony export */   sep: () => (/* binding */ sep),\n/* harmony export */   sepHav: () => (/* binding */ sepHav),\n/* harmony export */   sepPauwels: () => (/* binding */ sepPauwels)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _interpolation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interpolation.js */ \"./node_modules/astronomia/src/interpolation.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module angle\r\n */\r\n/**\r\n * Angle: Chapter 17: Angular Separation.\r\n *\r\n * Functions in this package are useful for Ecliptic, Equatorial, or any\r\n * similar coordinate frame.  To avoid suggestion of a particular frame,\r\n * function parameters are specified simply as \"r1, d1\" to correspond to a\r\n * right ascenscion, declination pair or to a longitude, latitude pair.\r\n *\r\n * In function Sep, Meeus recommends 10 arc min as a threshold.  This\r\n * value is in package base as base.SmallAngle because it has general utility.\r\n *\r\n * All angles are in radians.\r\n */\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\nconst { abs, acos, asin, atan2, cos, hypot, sin, sqrt, tan } = Math\r\n\r\n/**\r\n * `sep` returns the angular separation between two celestial bodies.\r\n *\r\n * The algorithm is numerically naïve, and while patched up a bit for\r\n * small separations, remains unstable for separations near π.\r\n *\r\n * @param {Coord} c1 - coordinate of celestial body 1\r\n * @param {Coord} c2 - coordinate of celestial body 2\r\n * @return {Number} angular separation between two celestial bodies\r\n */\r\nfunction sep (c1, c2) {\r\n  const [sind1, cosd1] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(c1.dec)\r\n  const [sind2, cosd2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(c2.dec)\r\n  const cd = sind1 * sind2 + cosd1 * cosd2 * cos(c1.ra - c2.ra) // (17.1) p. 109\r\n  if (cd < _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].CosSmallAngle) {\r\n    return acos(cd)\r\n  } else {\r\n    const cosd = cos((c2.dec + c1.dec) / 2) // average dec of two bodies\r\n    return hypot((c2.ra - c1.ra) * cosd, c2.dec - c1.dec) // (17.2) p. 109\r\n  }\r\n}\r\n\r\n/**\r\n * `minSep` returns the minimum separation between two moving objects.\r\n *\r\n * The motion is represented as an ephemeris of three rows, equally spaced\r\n * in time.  Jd1, jd3 are julian day times of the first and last rows.\r\n * R1, d1, r2, d2 are coordinates at the three times.  They must each be\r\n * slices of length 3.0\r\n *\r\n * Result is obtained by computing separation at each of the three times\r\n * and interpolating a minimum.  This may be invalid for sufficiently close\r\n * approaches.\r\n *\r\n * @throws Error\r\n * @param {Number} jd1 - Julian day - time at cs1[0], cs2[0]\r\n * @param {Number} jd3 - Julian day - time at cs1[2], cs2[2]\r\n * @param {Coord[]} cs1 - 3 coordinates of moving object 1\r\n * @param {Coord[]} cs2 - 3 coordinates of moving object 2\r\n * @param {function} [fnSep] - alternative `sep` function e.g. `angle.sepPauwels`, `angle.sepHav`\r\n * @return {Number} angular separation between two celestial bodies\r\n */\r\nfunction minSep (jd1, jd3, cs1, cs2, fnSep) {\r\n  fnSep = fnSep || sep\r\n  if (cs1.length !== 3 || cs2.length !== 3) {\r\n    throw _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].errorNot3\r\n  }\r\n  const y = new Array(3)\r\n  cs1.forEach((c, x) => {\r\n    y[x] = sep(cs1[x], cs2[x])\r\n  })\r\n  const d3 = new _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Len3(jd1, jd3, y)\r\n  const dMin = d3.extremum()[1]\r\n  return dMin\r\n}\r\n\r\n/**\r\n * `minSepRect` returns the minimum separation between two moving objects.\r\n *\r\n * Like `minSep`, but using a method of rectangular coordinates that gives\r\n * accurate results even for close approaches.\r\n *\r\n * @throws Error\r\n * @param {Number} jd1 - Julian day - time at cs1[0], cs2[0]\r\n * @param {Number} jd3 - Julian day - time at cs1[2], cs2[2]\r\n * @param {Coord[]} cs1 - 3 coordinates of moving object 1\r\n * @param {Coord[]} cs2 - 3 coordinates of moving object 2\r\n * @return {Number} angular separation between two celestial bodies\r\n */\r\nfunction minSepRect (jd1, jd3, cs1, cs2) {\r\n  if (cs1.length !== 3 || cs2.length !== 3) {\r\n    throw _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ErrorNot3\r\n  }\r\n  const uv = function (c1, c2) {\r\n    const [sind1, cosd1] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(c1.dec)\r\n    const Δr = c2.ra - c1.ra\r\n    const tanΔr = tan(Δr)\r\n    const tanhΔr = tan(Δr / 2)\r\n    const K = 1 / (1 + sind1 * sind1 * tanΔr * tanhΔr)\r\n    const sinΔd = sin(c2.dec - c1.dec)\r\n    const u = -K * (1 - (sind1 / cosd1) * sinΔd) * cosd1 * tanΔr\r\n    const v = K * (sinΔd + sind1 * cosd1 * tanΔr * tanhΔr)\r\n    return [u, v]\r\n  }\r\n  const us = new Array(3).fill(0)\r\n  const vs = new Array(3).fill(0)\r\n  cs1.forEach((c, x) => {\r\n    [us[x], vs[x]] = uv(cs1[x], cs2[x])\r\n  })\r\n  const u3 = new _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Len3(-1, 1, us) // if line throws then bug not caller's fault.\r\n  const v3 = new _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Len3(-1, 1, vs) // if line throws then bug not caller's fault.\r\n  const up0 = (us[2] - us[0]) / 2\r\n  const vp0 = (vs[2] - vs[0]) / 2\r\n  const up1 = us[0] + us[2] - 2 * us[1]\r\n  const vp1 = vs[0] + vs[2] - 2 * vs[1]\r\n  const up = up0\r\n  const vp = vp0\r\n  let dn = -(us[1] * up + vs[1] * vp) / (up * up + vp * vp)\r\n  let n = dn\r\n  let u\r\n  let v\r\n  for (let limit = 0; limit < 10; limit++) {\r\n    u = u3.interpolateN(n)\r\n    v = v3.interpolateN(n)\r\n    if (abs(dn) < 1e-5) {\r\n      return hypot(u, v) // success\r\n    }\r\n    const up = up0 + n * up1\r\n    const vp = vp0 + n * vp1\r\n    dn = -(u * up + v * vp) / (up * up + vp * vp)\r\n    n += dn\r\n  }\r\n  throw new Error('minSepRect: failure to converge')\r\n}\r\n\r\n/**\r\n * haversine function (17.5) p. 115\r\n */\r\nfunction hav (a) {\r\n  return 0.5 * (1 - Math.cos(a))\r\n}\r\n\r\n/**\r\n * `sepHav` returns the angular separation between two celestial bodies.\r\n *\r\n * The algorithm uses the haversine function and is superior to the naïve\r\n * algorithm of the Sep function.\r\n *\r\n * @param {Coord} c1 - coordinate of celestial body 1\r\n * @param {Coord} c2 - coordinate of celestial body 2\r\n * @return {Number} angular separation between two celestial bodies\r\n */\r\nfunction sepHav (c1, c2) {\r\n  // using (17.5) p. 115\r\n  return 2 * asin(sqrt(hav(c2.dec - c1.dec) +\r\n    cos(c1.dec) * cos(c2.dec) * hav(c2.ra - c1.ra)))\r\n}\r\n\r\n/**\r\n * Same as `minSep` but uses function `sepHav` to return the minimum separation\r\n * between two moving objects.\r\n */\r\nfunction minSepHav (jd1, jd3, cs1, cs2) {\r\n  return minSep(jd1, jd3, cs1, cs2, sepHav)\r\n}\r\n\r\n/**\r\n * `sepPauwels` returns the angular separation between two celestial bodies.\r\n *\r\n * The algorithm is a numerically stable form of that used in `sep`.\r\n *\r\n * @param {Coord} c1 - coordinate of celestial body 1\r\n * @param {Coord} c2 - coordinate of celestial body 2\r\n * @return {Number} angular separation between two celestial bodies\r\n */\r\nfunction sepPauwels (c1, c2) {\r\n  const [sind1, cosd1] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(c1.dec)\r\n  const [sind2, cosd2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(c2.dec)\r\n  const cosdr = cos(c2.ra - c1.ra)\r\n  const x = cosd1 * sind2 - sind1 * cosd2 * cosdr\r\n  const y = cosd2 * sin(c2.ra - c1.ra)\r\n  const z = sind1 * sind2 + cosd1 * cosd2 * cosdr\r\n  return atan2(hypot(x, y), z)\r\n}\r\n\r\n/**\r\n * Same as `minSep` but uses function `sepPauwels` to return the minimum\r\n * separation between two moving objects.\r\n */\r\nfunction minSepPauwels (jd1, jd3, cs1, cs2) {\r\n  return minSep(jd1, jd3, cs1, cs2, sepPauwels)\r\n}\r\n\r\n/**\r\n * RelativePosition returns the position angle of one body with respect to\r\n * another.\r\n *\r\n * The position angle result `p` is measured counter-clockwise from North.\r\n * If negative then `p` is in the range of 90° ... 270°\r\n *\r\n * ````\r\n *                  North\r\n *                    |\r\n *             (p)  ..|\r\n *                 .  |\r\n *                V   |\r\n *    c1 x------------x c2\r\n *                    |\r\n * ````\r\n *\r\n * @param {Coord} c1 - coordinate of celestial body 1\r\n * @param {Coord} c2 - coordinate of celestial body 2\r\n * @return {Number} position angle (p)\r\n */\r\nfunction relativePosition (c1, c2) {\r\n  const [sinΔr, cosΔr] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(c1.ra - c2.ra)\r\n  const [sind2, cosd2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(c2.dec)\r\n  const p = atan2(sinΔr, cosd2 * tan(c1.dec) - sind2 * cosΔr)\r\n  return p\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  sep,\r\n  minSep,\r\n  minSepRect,\r\n  hav,\r\n  sepHav,\r\n  minSepHav,\r\n  sepPauwels,\r\n  minSepPauwels,\r\n  relativePosition\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/angle.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/apparent.js":
/*!*************************************************!*\
  !*** ./node_modules/astronomia/src/apparent.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aberration: () => (/* binding */ aberration),\n/* harmony export */   aberrationRonVondrak: () => (/* binding */ aberrationRonVondrak),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   eclipticAberration: () => (/* binding */ eclipticAberration),\n/* harmony export */   nutation: () => (/* binding */ nutation),\n/* harmony export */   perihelion: () => (/* binding */ perihelion),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   positionRonVondrak: () => (/* binding */ positionRonVondrak)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _precess_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./precess.js */ \"./node_modules/astronomia/src/precess.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module apparent\r\n */\r\n/**\r\n * Apparent: Chapter 23, Apparent Place of a Star\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { cos, tan } = Math\r\n\r\n/**\r\n * Nutation returns corrections due to nutation for equatorial coordinates\r\n * of an object.\r\n *\r\n * Results are invalid for objects very near the celestial poles.\r\n * @param {Number} α - right ascension\r\n * @param {Number} δ - declination\r\n * @param {Number} jd - Julian Day\r\n * @return {Number[]} [Δα1, Δδ1] -\r\n*/\r\nfunction nutation (α, δ, jd) { // (α, δ, jd float64)  (Δα1, Δδ1 float64)\r\n  const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].meanObliquity(jd)\r\n  const [sinε, cosε] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε)\r\n  const [Δψ, Δε] = _nutation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].nutation(jd)\r\n  const [sinα, cosα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α)\r\n  const tanδ = tan(δ)\r\n  // (23.1) p. 151\r\n  const Δα1 = (cosε + sinε * sinα * tanδ) * Δψ - cosα * tanδ * Δε\r\n  const Δδ1 = sinε * cosα * Δψ + sinα * Δε\r\n  return [Δα1, Δδ1]\r\n}\r\n\r\n/**\r\n * κ is the constant of aberration in radians.\r\n */\r\nconst κ = 20.49552 * Math.PI / 180 / 3600\r\n\r\n/**\r\n * longitude of perihelian of Earth's orbit.\r\n */\r\nfunction perihelion (T) { // (T float64)  float64\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 102.93735, 1.71946, 0.00046) * Math.PI / 180\r\n}\r\n\r\n/**\r\n * EclipticAberration returns corrections due to aberration for ecliptic\r\n * coordinates of an object.\r\n */\r\nfunction eclipticAberration (λ, β, jd) { // (λ, β, jd float64)  (Δλ, Δβ float64)\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jd)\r\n  const { lon, ano } = _solar_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].trueLongitude(T) // eslint-disable-line no-unused-vars\r\n  const e = _solar_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].eccentricity(T)\r\n  const π = perihelion(T)\r\n  const [sβ, cβ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(β)\r\n  const [ssλ, csλ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(lon - λ)\r\n  const [sinπλ, cosπλ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(π - λ)\r\n  // (23.2) p. 151\r\n  const Δλ = κ * (e * cosπλ - csλ) / cβ\r\n  const Δβ = -κ * sβ * (ssλ - e * sinπλ)\r\n  return [Δλ, Δβ]\r\n}\r\n\r\n/**\r\n * Aberration returns corrections due to aberration for equatorial\r\n * coordinates of an object.\r\n */\r\nfunction aberration (α, δ, jd) { // (α, δ, jd float64)  (Δα2, Δδ2 float64)\r\n  const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].meanObliquity(jd)\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jd)\r\n  const { lon, ano } = _solar_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].trueLongitude(T) // eslint-disable-line no-unused-vars\r\n  const e = _solar_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].eccentricity(T)\r\n  const π = perihelion(T)\r\n  const [sinα, cosα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α)\r\n  const [sinδ, cosδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n  const [sins, coss] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(lon)\r\n  const [sinπ, cosπ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(π)\r\n  const cosε = cos(ε)\r\n  const q1 = cosα * cosε\r\n  // (23.3) p. 152\r\n  const Δα2 = κ * (e * (q1 * cosπ + sinα * sinπ) - (q1 * coss + sinα * sins)) / cosδ\r\n  const q2 = cosε * (tan(ε) * cosδ - sinα * sinδ)\r\n  const q3 = cosα * sinδ\r\n  const Δδ2 = κ * (e * (cosπ * q2 + sinπ * q3) - (coss * q2 + sins * q3))\r\n  return [Δα2, Δδ2]\r\n}\r\n\r\n/**\r\n * Position computes the apparent position of an object.\r\n *\r\n * Position is computed for equatorial coordinates in eqFrom, considering\r\n * proper motion, precession, nutation, and aberration.  Result is in\r\n * eqTo.  EqFrom and eqTo must be non-nil, but may point to the same struct.\r\n */\r\nfunction position (eqFrom, epochFrom, epochTo, mα, mδ) { // (eqFrom, eqTo *coord.Equatorial, epochFrom, epochTo float64, mα sexa.HourAngle, mδ sexa.Angle)  *coord.Equatorial\r\n  const eqTo = _precess_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].position(eqFrom, epochFrom, epochTo, mα, mδ)\r\n  const jd = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JulianYearToJDE(epochTo)\r\n  const [Δα1, Δδ1] = nutation(eqTo.ra, eqTo.dec, jd)\r\n  const [Δα2, Δδ2] = aberration(eqTo.ra, eqTo.dec, jd)\r\n  eqTo.ra += Δα1 + Δα2\r\n  eqTo.dec += Δδ1 + Δδ2\r\n  return eqTo\r\n}\r\n\r\n/**\r\n * AberrationRonVondrak uses the Ron-Vondrák expression to compute corrections\r\n * due to aberration for equatorial coordinates of an object.\r\n */\r\nfunction aberrationRonVondrak (α, δ, jd) { // (α, δ, jd float64)  (Δα, Δδ float64)\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jd)\r\n  const r = {\r\n    T,\r\n    L2: 3.1761467 + 1021.3285546 * T,\r\n    L3: 1.7534703 + 628.3075849 * T,\r\n    L4: 6.2034809 + 334.0612431 * T,\r\n    L5: 0.5995465 + 52.9690965 * T,\r\n    L6: 0.8740168 + 21.3299095 * T,\r\n    L7: 5.4812939 + 7.4781599 * T,\r\n    L8: 5.3118863 + 3.8133036 * T,\r\n    Lp: 3.8103444 + 8399.6847337 * T,\r\n    D: 5.1984667 + 7771.3771486 * T,\r\n    Mp: 2.3555559 + 8328.6914289 * T,\r\n    F: 1.6279052 + 8433.4661601 * T\r\n  }\r\n  let Xp = 0\r\n  let Yp = 0\r\n  let Zp = 0\r\n  // sum smaller terms first\r\n  for (let i = 35; i >= 0; i--) {\r\n    const [x, y, z] = rvTerm[i](r)\r\n    Xp += x\r\n    Yp += y\r\n    Zp += z\r\n  }\r\n  const [sinα, cosα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α)\r\n  const [sinδ, cosδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n  // (23.4) p. 156\r\n  return [(Yp * cosα - Xp * sinα) / (c * cosδ), -((Xp * cosα + Yp * sinα) * sinδ - Zp * cosδ) / c]\r\n}\r\n\r\nconst c = 17314463350 // unit is 1e-8 AU / day\r\n\r\n// r = {T, L2, L3, L4, L5, L6, L7, L8, Lp, D, Mp, F}\r\nconst rvTerm = [\r\n  function (r) { // 1\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L3)\r\n    return [(-1719914 - 2 * r.T) * sinA - 25 * cosA,\r\n      (25 - 13 * r.T) * sinA + (1578089 + 156 * r.T) * cosA,\r\n      (10 + 32 * r.T) * sinA + (684185 - 358 * r.T) * cosA\r\n    ]\r\n  },\r\n  function (r) { // 2\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L3)\r\n    return [(6434 + 141 * r.T) * sinA + (28007 - 107 * r.T) * cosA,\r\n      (25697 - 95 * r.T) * sinA + (-5904 - 130 * r.T) * cosA,\r\n      (11141 - 48 * r.T) * sinA + (-2559 - 55 * r.T) * cosA\r\n    ]\r\n  },\r\n  function (r) { // 3\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L5)\r\n    return [715 * sinA, 6 * sinA - 657 * cosA, -15 * sinA - 282 * cosA]\r\n  },\r\n  function (r) { // 4\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.Lp)\r\n    return [715 * sinA, -656 * cosA, -285 * cosA]\r\n  },\r\n  function (r) { // 5\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(3 * r.L3)\r\n    return [(486 - 5 * r.T) * sinA + (-236 - 4 * r.T) * cosA,\r\n      (-216 - 4 * r.T) * sinA + (-446 + 5 * r.T) * cosA, -94 * sinA - 193 * cosA\r\n    ]\r\n  },\r\n  function (r) { // 6\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L6)\r\n    return [159 * sinA, 2 * sinA - 147 * cosA, -6 * sinA - 61 * cosA]\r\n  },\r\n  function (r) { // 7\r\n    const cosA = Math.cos(r.F)\r\n    return [0, 26 * cosA, -59 * cosA]\r\n  },\r\n  function (r) { // 8\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.Lp + r.Mp)\r\n    return [39 * sinA, -36 * cosA, -16 * cosA]\r\n  },\r\n  function (r) { // 9\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L5)\r\n    return [33 * sinA - 10 * cosA, -9 * sinA - 30 * cosA, -5 * sinA - 13 * cosA]\r\n  },\r\n  function (r) { // 10\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L3 - r.L5)\r\n    return [31 * sinA + cosA, sinA - 28 * cosA, -12 * cosA]\r\n  },\r\n  function (r) { // 11\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(3 * r.L3 - 8 * r.L4 + 3 * r.L5)\r\n    return [8 * sinA - 28 * cosA, 25 * sinA + 8 * cosA, 11 * sinA + 3 * cosA]\r\n  },\r\n  function (r) { // 12\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(5 * r.L3 - 8 * r.L4 + 3 * r.L5)\r\n    return [8 * sinA - 28 * cosA, -25 * sinA - 8 * cosA, -11 * sinA + -3 * cosA]\r\n  },\r\n  function (r) { // 13\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L2 - r.L3)\r\n    return [21 * sinA, -19 * cosA, -8 * cosA]\r\n  },\r\n  function (r) { // 14\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L2)\r\n    return [-19 * sinA, 17 * cosA, 8 * cosA]\r\n  },\r\n  function (r) { // 15\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L7)\r\n    return [17 * sinA, -16 * cosA, -7 * cosA]\r\n  },\r\n  function (r) { // 16\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L3 - 2 * r.L5)\r\n    return [16 * sinA, 15 * cosA, sinA + 7 * cosA]\r\n  },\r\n  function (r) { // 17\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L8)\r\n    return [16 * sinA, sinA - 15 * cosA, -3 * sinA - 6 * cosA]\r\n  },\r\n  function (r) { // 18\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L3 + r.L5)\r\n    return [11 * sinA - cosA, -sinA - 10 * cosA, -sinA - 5 * cosA]\r\n  },\r\n  function (r) { // 19\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L2 - 2 * r.L3)\r\n    return [-11 * cosA, -10 * sinA, -4 * sinA]\r\n  },\r\n  function (r) { // 20\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L3 - r.L5)\r\n    return [-11 * sinA - 2 * cosA, -2 * sinA + 9 * cosA, -sinA + 4 * cosA]\r\n  },\r\n  function (r) { // 21\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(4 * r.L3)\r\n    return [-7 * sinA - 8 * cosA, -8 * sinA + 6 * cosA, -3 * sinA + 3 * cosA]\r\n  },\r\n  function (r) { // 22\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(3 * r.L3 - 2 * r.L5)\r\n    return [-10 * sinA, 9 * cosA, 4 * cosA]\r\n  },\r\n  function (r) { // 23\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.L2 - 2 * r.L3)\r\n    return [-9 * sinA, -9 * cosA, -4 * cosA]\r\n  },\r\n  function (r) { // 24\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L2 - 3 * r.L3)\r\n    return [-9 * sinA, -8 * cosA, -4 * cosA]\r\n  },\r\n  function (r) { // 25\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L6)\r\n    return [-9 * cosA, -8 * sinA, -3 * sinA]\r\n  },\r\n  function (r) { // 26\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L2 - 4 * r.L3)\r\n    return [-9 * cosA, 8 * sinA, 3 * sinA]\r\n  },\r\n  function (r) { // 27\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(3 * r.L3 - 2 * r.L4)\r\n    return [8 * sinA, -8 * cosA, -3 * cosA]\r\n  },\r\n  function (r) { // 28\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.Lp + 2 * r.D - r.Mp)\r\n    return [8 * sinA, -7 * cosA, -3 * cosA]\r\n  },\r\n  function (r) { // 29\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(8 * r.L2 - 12 * r.L3)\r\n    return [-4 * sinA - 7 * cosA, -6 * sinA + 4 * cosA, -3 * sinA + 2 * cosA]\r\n  },\r\n  function (r) { // 30\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(8 * r.L2 - 14 * r.L3)\r\n    return [-4 * sinA - 7 * cosA, 6 * sinA - 4 * cosA, 3 * sinA - 2 * cosA]\r\n  },\r\n  function (r) { // 31\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L4)\r\n    return [-6 * sinA - 5 * cosA, -4 * sinA + 5 * cosA, -2 * sinA + 2 * cosA]\r\n  },\r\n  function (r) { // 32\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(3 * r.L2 - 4 * r.L3)\r\n    return [-sinA - cosA, -2 * sinA - 7 * cosA, sinA - 4 * cosA]\r\n  },\r\n  function (r) { // 33\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L3 - 2 * r.L5)\r\n    return [4 * sinA - 6 * cosA, -5 * sinA - 4 * cosA, -2 * sinA - 2 * cosA]\r\n  },\r\n  function (r) { // 34\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(3 * r.L2 - 3 * r.L3)\r\n    return [-7 * cosA, -6 * sinA, -3 * sinA]\r\n  },\r\n  function (r) { // 35\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * r.L3 - 2 * r.L4)\r\n    return [5 * sinA - 5 * cosA, -4 * sinA - 5 * cosA, -2 * sinA - 2 * cosA]\r\n  },\r\n  function (r) { // 36\r\n    const [sinA, cosA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r.Lp - 2 * r.D)\r\n    return [5 * sinA, -5 * cosA, -2 * cosA]\r\n  }\r\n]\r\n\r\n/**\r\n * PositionRonVondrak computes the apparent position of an object using\r\n * the Ron-Vondrák expression for aberration.\r\n *\r\n * Position is computed for equatorial coordinates in eqFrom, considering\r\n * proper motion, aberration, precession, and _nutation.  Result is in\r\n * eqTo.  EqFrom and eqTo must be non-nil, but may point to the same struct.\r\n *\r\n * Note the Ron-Vondrák expression is only valid for the epoch J2000.\r\n * EqFrom must be coordinates at epoch J2000.\r\n */\r\nfunction positionRonVondrak (eqFrom, epochTo, mα, mδ) { // (eqFrom, eqTo *coord.Equatorial, epochTo float64, mα sexa.HourAngle, mδ sexa.Angle)  *coord.Equatorial\r\n  const t = epochTo - 2000\r\n  let eqTo = new _coord_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Equatorial()\r\n  eqTo.ra = eqFrom.ra + mα.rad() * t\r\n  eqTo.dec = eqFrom.dec + mδ.rad() * t\r\n  const jd = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JulianYearToJDE(epochTo)\r\n  const [Δα, Δδ] = aberrationRonVondrak(eqTo.ra, eqTo.dec, jd)\r\n  eqTo.ra += Δα\r\n  eqTo.dec += Δδ\r\n  eqTo = _precess_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].position(eqTo, 2000, epochTo, 0, 0)\r\n  const [Δα1, Δδ1] = nutation(eqTo.ra, eqTo.dec, jd)\r\n  eqTo.ra += Δα1\r\n  eqTo.dec += Δδ1\r\n  return eqTo\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  nutation,\r\n  perihelion,\r\n  eclipticAberration,\r\n  aberration,\r\n  position,\r\n  aberrationRonVondrak,\r\n  positionRonVondrak\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/apparent.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/apsis.js":
/*!**********************************************!*\
  !*** ./node_modules/astronomia/src/apsis.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EARTH_RADIUS: () => (/* binding */ EARTH_RADIUS),\n/* harmony export */   MOON_RADIUS: () => (/* binding */ MOON_RADIUS),\n/* harmony export */   apogee: () => (/* binding */ apogee),\n/* harmony export */   apogeeParallax: () => (/* binding */ apogeeParallax),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   meanApogee: () => (/* binding */ meanApogee),\n/* harmony export */   meanPerigee: () => (/* binding */ meanPerigee),\n/* harmony export */   perigee: () => (/* binding */ perigee),\n/* harmony export */   perigeeParallax: () => (/* binding */ perigeeParallax)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module apsis\r\n */\r\n/**\r\n * Apsis: Chapter 50, Perigee and apogee of the Moon\r\n */\r\n\r\n\r\nconst { sin, cos } = Math\r\n\r\n/**\r\n * conversion factor from k to T, given in (50.3) p. 356\r\n */\r\nconst ck = 1 / 1325.55\r\nconst D2R = Math.PI / 180\r\n\r\n// from http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html\r\nconst EARTH_RADIUS = 6378.137 // km\r\n// from http://nssdc.gsfc.nasa.gov/planetary/factsheet/moonfact.html\r\nconst MOON_RADIUS = 1738.1 // km\r\n\r\n/**\r\n * mean time of perigee or apogee\r\n * (50.1) p. 355\r\n */\r\nconst mean = function (T) {\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 2451534.6698, 27.55454989 / ck,\r\n    -0.0006691, -0.000001098, 0.0000000052)\r\n}\r\n\r\n/**\r\n * snap returns k at half h nearest year y.\r\n */\r\nconst snap = function (y, h) {\r\n  const k = (y - 1999.97) * 13.2555 // (50.2) p. 355\r\n  return Math.floor(k - h + 0.5) + h\r\n}\r\n\r\n/**\r\n * meanPerigee returns the jde of the mean perigee of the Moon nearest the given date.\r\n *\r\n * @param {Number} year - is a decimal year specifying a date.\r\n * @return {Number} jde - Julian ephemeris day\r\n */\r\nfunction meanPerigee (year) {\r\n  return mean(snap(year, 0) * ck)\r\n}\r\n\r\n/**\r\n * perigee returns the jde of perigee of the Moon nearest the given date.\r\n *\r\n * @param {Number} year - is a decimal year specifying a date.\r\n * @return {Number} jde - Julian ephemeris day\r\n */\r\nfunction perigee (year) {\r\n  const l = new La(year, 0)\r\n  return mean(l.T) + l.perigeeCorr()\r\n}\r\n\r\n/**\r\n * meanApogee returns the jde of the mean apogee of the Moon nearest the given date.\r\n *\r\n * @param {Number} year - is a decimal year specifying a date.\r\n * @return {Number} jde - Julian ephemeris day\r\n */\r\nfunction meanApogee (year) { // (year float64)  float64\r\n  return mean(snap(year, 0.5) * ck)\r\n}\r\n\r\n/**\r\n * apogee returns the jde of apogee of the Moon nearest the given date.\r\n *\r\n * @param {Number} year - is a decimal year specifying a date.\r\n * @return {Number} jde - Julian ephemeris day\r\n */\r\nfunction apogee (year) {\r\n  const l = new La(year, 0.5)\r\n  return mean(l.T) + l.apogeeCorr()\r\n}\r\n\r\n/**\r\n * apogeeParallax returns equatorial horizontal parallax of the Moon at the Apogee nearest the given date.\r\n *\r\n * @param {Number} year - is a decimal year specifying a date.\r\n * @return {Number} equatorial horizontal parallax in radians\r\n */\r\nfunction apogeeParallax (year) {\r\n  return new La(year, 0.5).apogeeParallax()\r\n}\r\n\r\n/**\r\n * perigeeParallax returns equatorial horizontal parallax of the Moon at the Apogee nearest the given date.\r\n *\r\n * @param {Number} year - is a decimal year specifying a date.\r\n * @return {Number} equatorial horizontal parallax in radians\r\n */\r\nfunction perigeeParallax (year) {\r\n  return new La(year, 0).perigeeParallax()\r\n}\r\n\r\n/**\r\n * Calculate the distance earth - moon (center to center) using the parallax angle in radians\r\n *\r\n * @param {Number} parallax - parallax angle in radians\r\n * @return {Number} distance in `km`\r\n */\r\nfunction distance (parallax) {\r\n  return EARTH_RADIUS / sin(parallax)\r\n}\r\n\r\nclass La {\r\n  constructor (y, h) {\r\n    this.k = snap(y, h)\r\n    this.T = this.k * ck // (50.3) p. 350\r\n    this.D = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(this.T, 171.9179 * D2R, 335.9106046 * D2R / ck,\r\n      -0.0100383 * D2R, -0.00001156 * D2R, 0.000000055 * D2R)\r\n    this.M = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(this.T, 347.3477 * D2R, 27.1577721 * D2R / ck,\r\n      -0.000813 * D2R, -0.000001 * D2R)\r\n    this.F = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(this.T, 316.6109 * D2R, 364.5287911 * D2R / ck,\r\n      -0.0125053 * D2R, -0.0000148 * D2R)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * perigee correction\r\n   */\r\n  perigeeCorr () {\r\n    const l = this\r\n    return -1.6769 * sin(2 * l.D) +\r\n    0.4589 * sin(4 * l.D) +\r\n    -0.1856 * sin(6 * l.D) +\r\n    0.0883 * sin(8 * l.D) +\r\n    (-0.0773 + 0.00019 * l.T) * sin(2 * l.D - l.M) +\r\n    (0.0502 - 0.00013 * l.T) * sin(l.M) +\r\n    -0.046 * sin(10 * l.D) +\r\n    (0.0422 - 0.00011 * l.T) * sin(4 * l.D - l.M) +\r\n    -0.0256 * sin(6 * l.D - l.M) +\r\n    0.0253 * sin(12 * l.D) +\r\n    0.0237 * sin(l.D) +\r\n    0.0162 * sin(8 * l.D - l.M) +\r\n    -0.0145 * sin(14 * l.D) +\r\n    0.0129 * sin(2 * l.F) +\r\n    -0.0112 * sin(3 * l.D) +\r\n    -0.0104 * sin(10 * l.D - l.M) +\r\n    0.0086 * sin(16 * l.D) +\r\n    0.0069 * sin(12 * l.D - l.M) +\r\n    0.0066 * sin(5 * l.D) +\r\n    -0.0053 * sin(2 * (l.D + l.F)) +\r\n    -0.0052 * sin(18 * l.D) +\r\n    -0.0046 * sin(14 * l.D - l.M) +\r\n    -0.0041 * sin(7 * l.D) +\r\n    0.004 * sin(2 * l.D + l.M) +\r\n    0.0032 * sin(20 * l.D) +\r\n    -0.0032 * sin(l.D + l.M) +\r\n    0.0031 * sin(16 * l.D - l.M) +\r\n    -0.0029 * sin(4 * l.D + l.M) +\r\n    0.0027 * sin(9 * l.D) +\r\n    0.0027 * sin(4 * l.D + 2 * l.F) +\r\n    -0.0027 * sin(2 * (l.D - l.M)) +\r\n    0.0024 * sin(4 * l.D - 2 * l.M) +\r\n    -0.0021 * sin(6 * l.D - 2 * l.M) +\r\n    -0.0021 * sin(22 * l.D) +\r\n    -0.0021 * sin(18 * l.D - l.M) +\r\n    0.0019 * sin(6 * l.D + l.M) +\r\n    -0.0018 * sin(11 * l.D) +\r\n    -0.0014 * sin(8 * l.D + l.M) +\r\n    -0.0014 * sin(4 * l.D - 2 * l.F) +\r\n    -0.0014 * sin(6 * l.D + 2 * l.F) +\r\n    0.0014 * sin(3 * l.D + l.M) +\r\n    -0.0014 * sin(5 * l.D + l.M) +\r\n    0.0013 * sin(13 * l.D) +\r\n    0.0013 * sin(20 * l.D - l.M) +\r\n    0.0011 * sin(3 * l.D + 2 * l.M) +\r\n    -0.0011 * sin(2 * (2 * l.D + l.F - l.M)) +\r\n    -0.001 * sin(l.D + 2 * l.M) +\r\n    -0.0009 * sin(22 * l.D - l.M) +\r\n    -0.0008 * sin(4 * l.F) +\r\n    0.0008 * sin(6 * l.D - 2 * l.F) +\r\n    0.0008 * sin(2 * (l.D - l.F) + l.M) +\r\n    0.0007 * sin(2 * l.M) +\r\n    0.0007 * sin(2 * l.F - l.M) +\r\n    0.0007 * sin(2 * l.D + 4 * l.F) +\r\n    -0.0006 * sin(2 * (l.F - l.M)) +\r\n    -0.0006 * sin(2 * (l.D - l.F + l.M)) +\r\n    0.0006 * sin(24 * l.D) +\r\n    0.0005 * sin(4 * (l.D - l.F)) +\r\n    0.0005 * sin(2 * (l.D + l.M)) +\r\n    -0.0004 * sin(l.D - l.M)\r\n  }\r\n\r\n  /**\r\n   * apogee correction\r\n   */\r\n  apogeeCorr () {\r\n    const l = this\r\n    return 0.4392 * sin(2 * l.D) +\r\n    0.0684 * sin(4 * l.D) +\r\n    (0.0456 - 0.00011 * l.T) * sin(l.M) +\r\n    (0.0426 - 0.00011 * l.T) * sin(2 * l.D - l.M) +\r\n    0.0212 * sin(2 * l.F) +\r\n    -0.0189 * sin(l.D) +\r\n    0.0144 * sin(6 * l.D) +\r\n    0.0113 * sin(4 * l.D - l.M) +\r\n    0.0047 * sin(2 * (l.D + l.F)) +\r\n    0.0036 * sin(l.D + l.M) +\r\n    0.0035 * sin(8 * l.D) +\r\n    0.0034 * sin(6 * l.D - l.M) +\r\n    -0.0034 * sin(2 * (l.D - l.F)) +\r\n    0.0022 * sin(2 * (l.D - l.M)) +\r\n    -0.0017 * sin(3 * l.D) +\r\n    0.0013 * sin(4 * l.D + 2 * l.F) +\r\n    0.0011 * sin(8 * l.D - l.M) +\r\n    0.001 * sin(4 * l.D - 2 * l.M) +\r\n    0.0009 * sin(10 * l.D) +\r\n    0.0007 * sin(3 * l.D + l.M) +\r\n    0.0006 * sin(2 * l.M) +\r\n    0.0005 * sin(2 * l.D + l.M) +\r\n    0.0005 * sin(2 * (l.D + l.M)) +\r\n    0.0004 * sin(6 * l.D + 2 * l.F) +\r\n    0.0004 * sin(6 * l.D - 2 * l.M) +\r\n    0.0004 * sin(10 * l.D - l.M) +\r\n    -0.0004 * sin(5 * l.D) +\r\n    -0.0004 * sin(4 * l.D - 2 * l.F) +\r\n    0.0003 * sin(2 * l.F + l.M) +\r\n    0.0003 * sin(12 * l.D) +\r\n    0.0003 * sin(2 * l.D + 2 * l.F - l.M) +\r\n    -0.0003 * sin(l.D - l.M)\r\n  }\r\n\r\n  /**\r\n   * apogee parallax\r\n   */\r\n  apogeeParallax () {\r\n    const s = Math.PI / 180 / 3600\r\n    const l = this\r\n    return 3245.251 * s +\r\n    -9.147 * s * cos(2 * l.D) +\r\n    -0.841 * s * cos(l.D) +\r\n    0.697 * s * cos(2 * l.F) +\r\n    (-0.656 * s + 0.0016 * s * l.T) * cos(l.M) +\r\n    0.355 * s * cos(4 * l.D) +\r\n    0.159 * s * cos(2 * l.D - l.M) +\r\n    0.127 * s * cos(l.D + l.M) +\r\n    0.065 * s * cos(4 * l.D - l.M) +\r\n    0.052 * s * cos(6 * l.D) +\r\n    0.043 * s * cos(2 * l.D + l.M) +\r\n    0.031 * s * cos(2 * (l.D + l.F)) +\r\n    -0.023 * s * cos(2 * (l.D - l.F)) +\r\n    0.022 * s * cos(2 * (l.D - l.M)) +\r\n    0.019 * s * cos(2 * (l.D + l.M)) +\r\n    -0.016 * s * cos(2 * l.M) +\r\n    0.014 * s * cos(6 * l.D - l.M) +\r\n    0.01 * s * cos(8 * l.D)\r\n  }\r\n\r\n  /**\r\n   * perigee parallax\r\n   */\r\n  perigeeParallax () {\r\n    const s = Math.PI / 180 / 3600\r\n    const l = this\r\n    return 3629.215 * s +\r\n      63.224 * s * cos(2 * l.D) +\r\n      -6.990 * s * cos(4 * l.D) +\r\n      (2.834 * s - 0.0071 * l.T * s) * cos(2 * l.D - l.M) +\r\n      1.927 * s * cos(6 * l.D) +\r\n      -1.263 * s * cos(l.D) +\r\n      -0.702 * s * cos(8 * l.D) +\r\n      (0.696 * s - 0.0017 * l.T * s) * cos(l.M) +\r\n      -0.690 * s * cos(2 * l.F) +\r\n      (-0.629 * s + 0.0016 * l.T * s) * cos(4 * l.D - l.M) +\r\n      -0.392 * s * cos(2 * (l.D - l.F)) +\r\n      0.297 * s * cos(10 * l.D) +\r\n      0.260 * s * cos(6 * l.D - l.M) +\r\n      0.201 * s * cos(3 * l.D) +\r\n      -0.161 * s * cos(2 * l.D + l.M) +\r\n      0.157 * s * cos(l.D + l.M) +\r\n      -0.138 * s * cos(12 * l.D) +\r\n      -0.127 * s * cos(8 * l.D - l.M) +\r\n      0.104 * s * cos(2 * (l.D + l.F)) +\r\n      0.104 * s * cos(2 * (l.D - l.M)) +\r\n      -0.079 * s * cos(5 * l.D) +\r\n      0.068 * s * cos(14 * l.D) +\r\n      0.067 * s * cos(10 * l.D - l.M) +\r\n      0.054 * s * cos(4 * l.D + l.M) +\r\n      -0.038 * s * cos(12 * l.D - l.M) +\r\n      -0.038 * s * cos(4 * l.D - 2 * l.M) +\r\n      0.037 * s * cos(7 * l.D) +\r\n      -0.037 * s * cos(4 * l.D + 2 * l.F) +\r\n      -0.035 * s * cos(16 * l.D) +\r\n      -0.030 * s * cos(3 * l.D + l.M) +\r\n      0.029 * s * cos(l.D - l.M) +\r\n      -0.025 * s * cos(6 * l.D + l.M) +\r\n      0.023 * s * cos(2 * l.M) +\r\n      0.023 * s * cos(14 * l.D - l.M) +\r\n      -0.023 * s * cos(2 * (l.D + l.M)) +\r\n      0.022 * s * cos(6 * l.D - 2 * l.M) +\r\n      -0.021 * s * cos(2 * l.D - 2 * l.F - l.M) +\r\n      -0.020 * s * cos(9 * l.D) +\r\n      0.019 * s * cos(18 * l.D) +\r\n      0.017 * s * cos(6 * l.D + 2 * l.F) +\r\n      0.014 * s * cos(2 * l.F - l.M) +\r\n      -0.014 * s * cos(16 * l.D - l.M) +\r\n      0.013 * s * cos(4 * l.D - 2 * l.F) +\r\n      0.012 * s * cos(8 * l.D + l.M) +\r\n      0.011 * s * cos(11 * l.D) +\r\n      0.010 * s * cos(5 * l.D + l.M) +\r\n      -0.010 * s * cos(20 * l.D)\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  EARTH_RADIUS,\r\n  MOON_RADIUS,\r\n  meanPerigee,\r\n  perigee,\r\n  meanApogee,\r\n  apogee,\r\n  apogeeParallax,\r\n  perigeeParallax,\r\n  distance\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/apsis.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/base.js":
/*!*********************************************!*\
  !*** ./node_modules/astronomia/src/base.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AU: () => (/* binding */ AU),\n/* harmony export */   B1900: () => (/* binding */ B1900),\n/* harmony export */   B1950: () => (/* binding */ B1950),\n/* harmony export */   BesselianYear: () => (/* binding */ BesselianYear),\n/* harmony export */   BesselianYearToJDE: () => (/* binding */ BesselianYearToJDE),\n/* harmony export */   COblJ2000: () => (/* binding */ COblJ2000),\n/* harmony export */   Coord: () => (/* binding */ Coord),\n/* harmony export */   CosSmallAngle: () => (/* binding */ CosSmallAngle),\n/* harmony export */   J1900: () => (/* binding */ J1900),\n/* harmony export */   J2000: () => (/* binding */ J2000),\n/* harmony export */   J2000Century: () => (/* binding */ J2000Century),\n/* harmony export */   JDEToBesselianYear: () => (/* binding */ JDEToBesselianYear),\n/* harmony export */   JDEToJulianYear: () => (/* binding */ JDEToJulianYear),\n/* harmony export */   JMod: () => (/* binding */ JMod),\n/* harmony export */   JulianCentury: () => (/* binding */ JulianCentury),\n/* harmony export */   JulianYear: () => (/* binding */ JulianYear),\n/* harmony export */   JulianYearToJDE: () => (/* binding */ JulianYearToJDE),\n/* harmony export */   K: () => (/* binding */ K),\n/* harmony export */   SOblJ2000: () => (/* binding */ SOblJ2000),\n/* harmony export */   SmallAngle: () => (/* binding */ SmallAngle),\n/* harmony export */   cmp: () => (/* binding */ cmp),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   errorCode: () => (/* binding */ errorCode),\n/* harmony export */   floorDiv: () => (/* binding */ floorDiv),\n/* harmony export */   horner: () => (/* binding */ horner),\n/* harmony export */   illuminated: () => (/* binding */ illuminated),\n/* harmony export */   lightTime: () => (/* binding */ lightTime),\n/* harmony export */   limb: () => (/* binding */ limb),\n/* harmony export */   meanSiderealYear: () => (/* binding */ meanSiderealYear),\n/* harmony export */   modf: () => (/* binding */ modf),\n/* harmony export */   pmod: () => (/* binding */ pmod),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   sincos: () => (/* binding */ sincos),\n/* harmony export */   toDeg: () => (/* binding */ toDeg),\n/* harmony export */   toRad: () => (/* binding */ toRad)\n/* harmony export */ });\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module base\r\n */\r\n/**\r\n * Base: Functions and other definitions useful with multiple packages.\r\n *\r\n * Base contains various definitions and support functions useful in multiple\r\n * chapters.\r\n *\r\n * Bessellian and Julian Year\r\n *\r\n * Chapter 21, Precession actually contains these definitions.  They are moved\r\n * here because of their general utility.\r\n *\r\n * Chapter 22, Nutation contains the function for Julian centuries since J2000.\r\n *\r\n * Phase angle functions\r\n *\r\n * Two functions, Illuminated and Limb, concern the illumnated phase of a body\r\n * and are given in two chapters, 41 an 48.  They are collected here because\r\n * the identical functions apply in both chapters.\r\n *\r\n * General purpose math functions\r\n *\r\n * SmallAngle is recommended in chapter 17, p. 109.\r\n *\r\n * PMod addresses the issue on p. 7, chapter 1, in the section \"Trigonometric\r\n * functions of large angles\", but the function is not written to be specific\r\n * to angles and so has more general utility.\r\n *\r\n * Horner is described on p. 10, chapter 1.\r\n *\r\n * FloorDiv and FloorDiv64 are optimizations for the INT function described\r\n * on p. 60, chapter 7.\r\n*/\r\n\r\n// ---- constants ----\r\n\r\n/** K is the Gaussian gravitational constant. */\r\nconst K = 0.01720209895\r\n// K from ch 33, p. 228, for example\r\n\r\n/** AU is one astronomical unit in km. */\r\nconst AU = 149597870\r\n// from Appendix I, p, 407.\r\n\r\n/** SOblJ2000 sine obliquity at J2000. */\r\nconst SOblJ2000 = 0.397777156\r\n/** COblJ2000 cosine obliquity at J2000. */\r\nconst COblJ2000 = 0.917482062\r\n// SOblJ2000, COblJ2000 from ch 33, p. 228, for example\r\n\r\n/**\r\n * lightTime returns time for light to travel a given distance.\r\n * `dist` is distance in to earth in AU. √(x² + y² + z²)\r\n * Result in seconds of time.\r\n * @param {Number} dist - distance in to earth in AU\r\n * @returns {Number} time for light to travel a given distance in seconds\r\n */\r\nfunction lightTime (dist) {\r\n  // Formula given as (33.3) p. 224.\r\n  return 0.0057755183 * dist\r\n}\r\n\r\n// ---- julian ----\r\n\r\n/**\r\n * Julian and Besselian years described in chapter 21, Precession.\r\n * T, Julian centuries since J2000 described in chapter 22, Nutation.\r\n */\r\n\r\n/** JMod is the Julian date of the modified Julian date epoch. */\r\nconst JMod = 2400000.5\r\n\r\n/** J2000 is the Julian date corresponding to January 1.5, year 2000. */\r\nconst J2000 = 2451545.0\r\n\r\n// Julian days of common epochs.\r\n// B1900, B1950 from p. 133\r\n/** Julian days of Julian epoch 1900 */\r\nconst J1900 = 2415020.0\r\n/** Julian days of Besselian epoch 1900 */\r\nconst B1900 = 2415020.3135\r\n/** Julian days of Besselian epoch 1950 */\r\nconst B1950 = 2433282.4235\r\n\r\n// JulianYear and other common periods\r\n/** JulianYear in days */\r\nconst JulianYear = 365.25 // days\r\n/** JulianCentury in days */\r\nconst JulianCentury = 36525 // days\r\n/** BesselianYear in days; equals mean tropical year */\r\nconst BesselianYear = 365.2421988 // days\r\n/** Mean sidereal year */\r\nconst meanSiderealYear = 365.25636 // days\r\n\r\n/**\r\n * JulianYearToJDE returns the Julian ephemeris day for a Julian year.\r\n * @param {Number} jy - Julian year\r\n * @returns {Number} jde - Julian ephemeris day\r\n */\r\nfunction JulianYearToJDE (jy) {\r\n  return J2000 + JulianYear * (jy - 2000)\r\n}\r\n\r\n/**\r\n * JDEToJulianYear returns a Julian year for a Julian ephemeris day.\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Number} jy - Julian year\r\n */\r\nfunction JDEToJulianYear (jde) {\r\n  return 2000 + (jde - J2000) / JulianYear\r\n}\r\n\r\n/**\r\n * BesselianYearToJDE returns the Julian ephemeris day for a Besselian year.\r\n * @param {Number} by - Besselian year\r\n * @returns {Number} jde - Julian ephemeris day\r\n */\r\nfunction BesselianYearToJDE (by) {\r\n  return B1900 + BesselianYear * (by - 1900)\r\n}\r\n\r\n/**\r\n * JDEToBesselianYear returns the Besselian year for a Julian ephemeris day.\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Number} by - Besselian year\r\n */\r\nfunction JDEToBesselianYear (jde) {\r\n  return 1900 + (jde - B1900) / BesselianYear\r\n}\r\n\r\n/**\r\n * J2000Century returns the number of Julian centuries since J2000.\r\n *\r\n * The quantity appears as T in a number of time series.\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Number} number of Julian centuries since J2000\r\n */\r\nfunction J2000Century (jde) {\r\n  // The formula is given in a number of places in the book, for example\r\n  // (12.1) p. 87.\r\n  // (22.1) p. 143.\r\n  // (25.1) p. 163.\r\n  return (jde - J2000) / JulianCentury\r\n}\r\n\r\n// ---- phase ----\r\n\r\n/**\r\n * illuminated returns the illuminated fraction of a body's disk.\r\n *\r\n * The illuminated body can be the Moon or a planet.\r\n *\r\n * @param {Number} i - phase angle in radians.\r\n * @returns {Number} illuminated fraction of a body's disk.\r\n */\r\nfunction illuminated (i) {\r\n  // (41.1) p. 283, also (48.1) p. 345.\r\n  return (1 + Math.cos(i)) * 0.5\r\n}\r\n\r\n/**\r\n * celestial coordinates in right ascension and declination\r\n * or ecliptic coordinates in longitude and latitude\r\n */\r\nclass Coord {\r\n  /**\r\n   * celestial coordinates in right ascension and declination\r\n   * or ecliptic coordinates in longitude and latitude\r\n   *\r\n   * @param {number} ra - right ascension (or longitude)\r\n   * @param {number} dec - declination (or latitude)\r\n   * @param {number} [range] - distance\r\n   * @param {number} [elongation] - elongation\r\n   */\r\n  constructor (ra, dec, range, elongation) {\r\n    this._ra = ra || 0\r\n    this._dec = dec || 0\r\n    this.range = range\r\n    this.elongation = elongation\r\n  }\r\n\r\n  /**\r\n   * right ascension\r\n   * @return {number}\r\n   */\r\n  get ra () {\r\n    return this._ra\r\n  }\r\n\r\n  set ra (ra) {\r\n    this._ra = ra\r\n  }\r\n\r\n  /**\r\n   * declination\r\n   * @return {number}\r\n   */\r\n  get dec () {\r\n    return this._dec\r\n  }\r\n\r\n  set dec (dec) {\r\n    this._dec = dec\r\n  }\r\n\r\n  /**\r\n   * right ascension (or longitude)\r\n   * @return {number}\r\n   */\r\n  get lon () {\r\n    return this._ra\r\n  }\r\n\r\n  set lon (ra) {\r\n    this._ra = ra\r\n  }\r\n\r\n  /**\r\n   * declination (or latitude)\r\n   * @return {number}\r\n   */\r\n  get lat () {\r\n    return this._dec\r\n  }\r\n\r\n  set lat (dec) {\r\n    this._dec = dec\r\n  }\r\n}\r\n\r\n/**\r\n * Limb returns the position angle of the midpoint of an illuminated limb.\r\n *\r\n * The illuminated body can be the Moon or a planet.\r\n *\r\n * @param {Coord} equ - equatorial coordinates of the body `{ra, dec}` (in radians)\r\n * @param {Coord} appSun - apparent coordinates of the Sun `{ra, dec}` (In radians).\r\n * @returns {Number} position angle of the midpoint (in radians).\r\n */\r\nfunction limb (equ, appSun) {\r\n  const α = equ.ra\r\n  const δ = equ.dec\r\n  const α0 = appSun.ra\r\n  const δ0 = appSun.dec\r\n  // Mentioned in ch 41, p. 283.  Formula (48.5) p. 346\r\n  const sδ = Math.sin(δ)\r\n  const cδ = Math.cos(δ)\r\n  const sδ0 = Math.sin(δ0)\r\n  const cδ0 = Math.cos(δ0)\r\n  const sα0α = Math.sin(α0 - α)\r\n  const cα0α = Math.cos(α0 - α)\r\n  let χ = Math.atan2(cδ0 * sα0α, (sδ0 * cδ - cδ0 * sδ * cα0α))\r\n  if (χ < 0) {\r\n    χ += 2 * Math.PI\r\n  }\r\n  return χ\r\n}\r\n\r\n// ---- math ----\r\n\r\n// In chapter 17, p. 109, Meeus recommends 10′.\r\n/**\r\n * SmallAngle is threshold used by various routines for switching between\r\n * trigonometric functions and Pythagorean approximations.\r\n */\r\nconst SmallAngle = 10 * Math.PI / 180 / 60 // about .003 radians\r\n/** cosine of SmallAngle */\r\nconst CosSmallAngle = Math.cos(SmallAngle) // about .999996\r\n\r\n/**\r\n * pmod returns a positive floating-point x mod y.\r\n *\r\n * For a positive argument y, it returns a value in the range [0,y).\r\n *\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @returns {Number} x % y - The result may not be useful if y is negative.\r\n */\r\nfunction pmod (x, y) {\r\n  let r = x % y\r\n  if (r < 0) {\r\n    r += y\r\n  }\r\n  return r\r\n}\r\n\r\n/**\r\n * horner evaluates a polynomal with coefficients c at x.  The constant\r\n * term is c[0].\r\n * @param {Number} x\r\n * @param {Number[]} c - coefficients; c[0] may be of type Number[]\r\n * @returns {Number}\r\n */\r\nfunction horner (x, ...c) {\r\n  if (Array.isArray(c[0])) {\r\n    c = c[0]\r\n  }\r\n  let i = c.length - 1\r\n  let y = c[i]\r\n  while (i > 0) {\r\n    i--\r\n    y = y * x + c[i]\r\n  }\r\n  return y\r\n}\r\n\r\n/**\r\n * FloorDiv returns the integer floor of the fractional value (x / y).\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @returns {Number} (int)\r\n */\r\nfunction floorDiv (x, y) {\r\n  const q = x / y\r\n  return Math.floor(q)\r\n}\r\n\r\n/**\r\n * Cmp compares two float64s and returns -1, 0, or 1 if a is <, ==, or > b,\r\n * respectively.\r\n * .\r\n * @param {Number} a\r\n * @param {Number} b\r\n * @returns {Number} comparison result\r\n */\r\nfunction cmp (a, b) {\r\n  if (a < b) return -1\r\n  if (a > b) return 1\r\n  return 0\r\n}\r\n\r\n/**\r\n * shorthand function for Math.sin, Math.cos\r\n * @param {Number} ε\r\n * @returns {Number[]} [sin(ε), cos(ε)]\r\n */\r\nfunction sincos (ε) {\r\n  return [Math.sin(ε), Math.cos(ε)]\r\n}\r\n\r\n/**\r\n * Convert degrees to radians\r\n * @param  {Number} deg - Angle in degrees\r\n * @return {Number} Angle in radians\r\n */\r\nfunction toRad (deg) {\r\n  return (Math.PI / 180.0) * deg\r\n}\r\n\r\n/**\r\n * Convert radians to degrees\r\n * @param  {Number} rad - Angle in radians\r\n * @return {Number} Angle in degrees\r\n */\r\nfunction toDeg (rad) {\r\n  return (180.0 / Math.PI) * rad\r\n}\r\n\r\n/**\r\n * separate fix `i` from fraction `f`\r\n * @param {Number} float\r\n * @returns {Array} [i, f]\r\n *  {Number} i - (int) fix value\r\n *  {Number} f - (float) fractional portion; always > 1\r\n */\r\nfunction modf (float) {\r\n  const i = Math.trunc(float)\r\n  const f = Math.abs(float - i)\r\n  return [i, f]\r\n}\r\n\r\n/**\r\n * Rounds `float` value by precision\r\n * @param {Number} float - value to round\r\n * @param {Number} [precision] - (int) number of post decimal positions\r\n * @return {Number} rounded `float`\r\n */\r\nfunction round (float, precision = 14) {\r\n  return parseFloat(float.toFixed(precision))\r\n}\r\n\r\nfunction errorCode (msg, code) {\r\n  const err = new Error(msg)\r\n  // @ts-ignore\r\n  err.code = code\r\n  return err\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  K,\r\n  AU,\r\n  SOblJ2000,\r\n  COblJ2000,\r\n  lightTime,\r\n  JMod,\r\n  J2000,\r\n  J1900,\r\n  B1900,\r\n  B1950,\r\n  JulianYear,\r\n  JulianCentury,\r\n  BesselianYear,\r\n  meanSiderealYear,\r\n  JulianYearToJDE,\r\n  JDEToJulianYear,\r\n  BesselianYearToJDE,\r\n  JDEToBesselianYear,\r\n  J2000Century,\r\n  illuminated,\r\n  Coord,\r\n  limb,\r\n  SmallAngle,\r\n  CosSmallAngle,\r\n  pmod,\r\n  horner,\r\n  floorDiv,\r\n  cmp,\r\n  sincos,\r\n  toRad,\r\n  toDeg,\r\n  modf,\r\n  round,\r\n  errorCode\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/base.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/binary.js":
/*!***********************************************!*\
  !*** ./node_modules/astronomia/src/binary.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apparentEccentricity: () => (/* binding */ apparentEccentricity),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   meanAnomaly: () => (/* binding */ meanAnomaly),\n/* harmony export */   position: () => (/* binding */ position)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module binary\r\n */\r\n/**\r\n * Binary: Chapter 57, Binary Stars\r\n */\r\n\r\nconst { atan, atan2, cos, sqrt, tan } = Math\r\n\r\n/**\r\n * computes mean anomaly for the given date.\r\n *\r\n * @param {Number} year - is a decimal year specifying the date\r\n * @param {Number} T - is time of periastron, as a decimal year\r\n * @param {Number} P - is period of revolution in mean solar years\r\n * @returns {Number} mean anomaly in radians.\r\n */\r\nfunction meanAnomaly (year, T, P) { // (year, T, P float64)  float64\r\n  const n = 2 * Math.PI / P\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(n * (year - T), 2 * Math.PI)\r\n}\r\n\r\n/**\r\n * Position computes apparent position angle and angular distance of\r\n * components of a binary star.\r\n *\r\n * @param {Number} a - is apparent semimajor axis in arc seconds\r\n * @param {Number} e - is eccentricity of the true orbit\r\n * @param {Number} i - is inclination relative to the line of sight\r\n * @param {Number} Ω - is position angle of the ascending node\r\n * @param {Number} ω - is longitude of periastron\r\n * @param {Number} E - is eccentric anomaly, computed for example with package kepler\r\n *  and the mean anomaly as returned by function M in this package.\r\n * @returns {Number[]} [θ, ρ]\r\n *  {Number} θ -is the apparent position angle in radians,\r\n *  {Number} ρ is the angular distance in arc seconds.\r\n */\r\nfunction position (a, e, i, Ω, ω, E) { // (a, e, i, Ω, ω, E float64)  (θ, ρ float64)\r\n  const r = a * (1 - e * cos(E))\r\n  const ν = 2 * atan(sqrt((1 + e) / (1 - e)) * tan(E / 2))\r\n  const [sinνω, cosνω] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ν + ω)\r\n  const cosi = cos(i)\r\n  const num = sinνω * cosi\r\n  let θ = atan2(num, cosνω) + Ω\r\n  if (θ < 0) {\r\n    θ += 2 * Math.PI\r\n  }\r\n  const ρ = r * sqrt(num * num + cosνω * cosνω)\r\n  return [θ, ρ]\r\n}\r\n\r\n/**\r\n * ApparentEccentricity returns apparent eccenticity of a binary star\r\n * given true orbital elements.\r\n *\r\n * @param {Number} e - is eccentricity of the true orbit\r\n * @param {Number} i - is inclination relative to the line of sight\r\n * @param {Number} ω - is longitude of periastron\r\n * @returns {Number} apparent eccenticity of a binary star\r\n */\r\nfunction apparentEccentricity (e, i, ω) { // (e, i, ω float64)  float64\r\n  const cosi = cos(i)\r\n  const [sinω, cosω] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ω)\r\n  const A = (1 - e * e * cosω * cosω) * cosi * cosi\r\n  const B = e * e * sinω * cosω * cosi\r\n  const C = 1 - e * e * sinω * sinω\r\n  const d = A - C\r\n  const sqrtD = sqrt(d * d + 4 * B * B)\r\n  return sqrt(2 * sqrtD / (A + C + sqrtD))\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  meanAnomaly,\r\n  position,\r\n  apparentEccentricity\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/binary.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/circle.js":
/*!***********************************************!*\
  !*** ./node_modules/astronomia/src/circle.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   smallest: () => (/* binding */ smallest)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module circle\r\n */\r\n/**\r\n * Circle: Chapter 20, Smallest Circle containing three Celestial Bodies.\r\n */\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n/**\r\n * Smallest finds the smallest circle containing three points.\r\n *\r\n * Arguments should represent coordinates in right ascension and declination\r\n * or longitude and latitude.  Result Δ is the diameter of the circle, typeI\r\n * is true if solution is of type I.\r\n *\r\n * @param {Coord} c1 - ra, dec point 1\r\n * @param {Coord} c2 - ra, dec point 2\r\n * @param {Coord} c3 - ra, dec point 3\r\n * @returns {Array} [Δ, typeI]\r\n *  {Number} Δ - diameter of the circle\r\n *  {Number} typeI - true - Two points on circle, one interior.\r\n *                   false - All three points on circle.\r\n */\r\nfunction smallest (c1, c2, c3) {\r\n  // Using haversine formula\r\n  const cd1 = Math.cos(c1.dec)\r\n  const cd2 = Math.cos(c2.dec)\r\n  const cd3 = Math.cos(c3.dec)\r\n  let a = 2 * Math.asin(Math.sqrt(hav(c2.dec - c1.dec) + cd1 * cd2 * hav(c2.ra - c1.ra)))\r\n  let b = 2 * Math.asin(Math.sqrt(hav(c3.dec - c2.dec) + cd2 * cd3 * hav(c3.ra - c2.ra)))\r\n  let c = 2 * Math.asin(Math.sqrt(hav(c1.dec - c3.dec) + cd3 * cd1 * hav(c1.ra - c3.ra)))\r\n  if (b > a) {\r\n    [a, b] = noswap(b, a)\r\n  }\r\n  if (c > a) {\r\n    [a, c] = noswap(c, a)\r\n  }\r\n  if (a * a >= b * b + c * c) {\r\n    return [a, true]\r\n  }\r\n  // (20.1) p. 128\r\n  return [2 * a * b * c / Math.sqrt((a + b + c) * (a + b - c) * (b + c - a) * (a + c - b)), false]\r\n}\r\n\r\nconst noswap = function (a, b) {\r\n  return [a, b]\r\n}\r\n\r\n/**\r\n * haversine function (17.5) p. 115\r\n */\r\nconst hav = function (a) {\r\n  return 0.5 * (1 - Math.cos(a))\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  smallest\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/circle.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/conjunction.js":
/*!****************************************************!*\
  !*** ./node_modules/astronomia/src/conjunction.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   planetary: () => (/* binding */ planetary),\n/* harmony export */   stellar: () => (/* binding */ stellar)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _interpolation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interpolation.js */ \"./node_modules/astronomia/src/interpolation.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module conjunction\r\n */\r\n/**\r\n * Conjunction: Chapter 18: Planetary Conjunctions.\r\n */\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n\r\n/**\r\n * Planetary computes a conjunction between two moving objects, such as planets.\r\n *\r\n * Conjunction is found with interpolation against length 5 ephemerides.\r\n *\r\n * t1, t5 are times of first and last rows of ephemerides.  The scale is\r\n * arbitrary.\r\n *\r\n * cs1 is the ephemeris of the first object. The columns may be celestial\r\n * coordinates in right ascension and declination or ecliptic coordinates in\r\n * longitude and latitude.\r\n *\r\n * cs2 is the ephemeris of the second object, in the same frame as the first.\r\n *\r\n * Return value t is time of conjunction in the scale of t1, t5.\r\n *\r\n * @param {Number} t1 - julian ephemeris day of first row\r\n * @param {Number} t5 - julian ephemeris day of fifth row\r\n * @param {Coord[]} cs1 - ephemeris of first moving object\r\n * @param {Coord[]} cs2 - ephemeris of decond moving object\r\n * @return {Array}\r\n *    {Number} t - time of conjunction in JDE\r\n *    {Number} Δd - is the amount that object 2 was \"above\" object 1 at the time of conjunction.\r\n */\r\nfunction planetary (t1, t5, cs1, cs2) {\r\n  if (cs1.length !== 5 || cs2.length !== 5) {\r\n    throw new Error('Five rows required in ephemerides')\r\n  }\r\n  const dr = new Array(5)\r\n  const dd = new Array(5)\r\n  cs1.forEach((r, i) => {\r\n    dr[i] = cs2[i].ra - cs1[i].ra\r\n    dd[i] = cs2[i].dec - cs1[i].dec\r\n  })\r\n  return conj(t1, t5, dr, dd)\r\n}\r\n\r\n/**\r\n * Stellar computes a conjunction between a moving and non-moving object.\r\n *\r\n * Arguments and return values same as with Planetary, except the non-moving\r\n * object is c1.  The ephemeris of the moving object is cs2.\r\n *\r\n * @param {Number} t1 - julian ephemeris day of first row\r\n * @param {Number} t5 - julian ephemeris day of fifth row\r\n * @param {Coord} c1 - ephemeris of non-moving object\r\n * @param {Coord[]} cs2 - ephemeris of moving object\r\n * @return {Array}\r\n *    {Number} t - time of conjunction in JDE\r\n *    {Number} Δd - is the amount that object 2 was \"above\" object 1 at the time of conjunction.\r\n */\r\nfunction stellar (t1, t5, c1, cs2) {\r\n  if (cs2.length !== 5) {\r\n    throw new Error('Five rows required in ephemerides')\r\n  }\r\n  const dr = new Array(5)\r\n  const dd = new Array(5)\r\n  cs2.forEach((r, i) => {\r\n    dr[i] = cs2[i].ra - c1.ra\r\n    dd[i] = cs2[i].dec - c1.dec\r\n  })\r\n  return conj(t1, t5, dr, dd)\r\n}\r\n\r\nconst conj = function (t1, t5, dr, dd) { // (t1, t5 float64, dr, dd []float64)  (t, Δd float64, err error)\r\n  let l5 = new _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Len5(t1, t5, dr)\r\n  const t = l5.zero(true)\r\n  l5 = new _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Len5(t1, t5, dd)\r\n  const Δd = l5.interpolateXStrict(t)\r\n  return [t, Δd]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  planetary,\r\n  stellar\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/conjunction.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/coord.js":
/*!**********************************************!*\
  !*** ./node_modules/astronomia/src/coord.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ecliptic: () => (/* binding */ Ecliptic),\n/* harmony export */   Equatorial: () => (/* binding */ Equatorial),\n/* harmony export */   Galactic: () => (/* binding */ Galactic),\n/* harmony export */   Horizontal: () => (/* binding */ Horizontal),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   galactic0Lon1950: () => (/* binding */ galactic0Lon1950),\n/* harmony export */   galacticLon0: () => (/* binding */ galacticLon0),\n/* harmony export */   galacticNorth: () => (/* binding */ galacticNorth),\n/* harmony export */   galacticNorth1950: () => (/* binding */ galacticNorth1950)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/* harmony import */ var _globe_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./globe.js */ \"./node_modules/astronomia/src/globe.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module coord\r\n */\r\n/**\r\n * Coord: Chapter 13, Transformation of Coordinates.\r\n *\r\n * Transforms in this package are provided in two forms, function and method.\r\n * The results of the two forms should be identical.\r\n *\r\n * The function forms pass all arguments and results as single values.  These\r\n * forms are best used when you are transforming a single pair of coordinates\r\n * and wish to avoid memory allocation.\r\n *\r\n * The method forms take and return pointers to structs.  These forms are best\r\n * used when you are transforming multiple coordinates and can reuse one or\r\n * more of the structs.  In this case reuse of structs will minimize\r\n * allocations, and the struct pointers will pass more efficiently on the\r\n * stack.  These methods transform their arguments, placing the result in\r\n * the receiver.  The receiver is then returned for convenience.\r\n *\r\n * A number of the functions take sine and cosine of the obliquity of the\r\n * ecliptic.  This becomes an advantage when you doing multiple transformations\r\n * with the same obliquity.  The efficiency of computing sine and cosine once\r\n * and reuse these values far outweighs the overhead of passing one number as\r\n * opposed to two.\r\n */\r\n\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n/**\r\n * @typedef {object} LonLat\r\n * @property {Number} lon - Longitude (λ) in radians\r\n * @property {Number} lat - Latitude (β) in radians\r\n */\r\n\r\n/**\r\n* Ecliptic coordinates are referenced to the plane of the ecliptic.\r\n*/\r\nclass Ecliptic {\r\n  /**\r\n   * IMPORTANT: Longitudes are measured *positively* westwards\r\n   * e.g. Washington D.C. +77°04; Vienna -16°23'\r\n   * @param {Number|LonLat} [lon] - Longitude (λ) in radians\r\n   * @param {Number} [lat] - Latitude (β) in radians\r\n   */\r\n  constructor (lon, lat) {\r\n    if (typeof lon === 'object') {\r\n      lat = lon.lat\r\n      lon = lon.lon\r\n    }\r\n    this.lon = lon || 0\r\n    this.lat = lat || 0\r\n  }\r\n\r\n  /**\r\n   * converts ecliptic coordinates to equatorial coordinates.\r\n   * @param {Number} ε - Obliquity\r\n   * @returns {Equatorial}\r\n   */\r\n  toEquatorial (ε) {\r\n    const [εsin, εcos] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε)\r\n    const [sβ, cβ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.lat)\r\n    const [sλ, cλ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.lon)\r\n    let ra = Math.atan2(sλ * εcos - (sβ / cβ) * εsin, cλ) // (13.3) p. 93\r\n    if (ra < 0) {\r\n      ra += 2 * Math.PI\r\n    }\r\n    const dec = Math.asin(sβ * εcos + cβ * εsin * sλ) // (13.4) p. 93\r\n    return new Equatorial(ra, dec)\r\n  }\r\n}\r\n\r\n/**\r\n * Equatorial coordinates are referenced to the Earth's rotational axis.\r\n */\r\nclass Equatorial {\r\n  /**\r\n   * @param {Number} ra - (float) Right ascension (α) in radians\r\n   * @param {Number} dec - (float) Declination (δ) in radians\r\n   */\r\n  constructor (ra = 0, dec = 0) {\r\n    this.ra = ra\r\n    this.dec = dec\r\n  }\r\n\r\n  /**\r\n   * EqToEcl converts equatorial coordinates to ecliptic coordinates.\r\n   * @param {Number} ε - Obliquity\r\n   * @returns {Ecliptic}\r\n   */\r\n  toEcliptic (ε) {\r\n    const [εsin, εcos] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε)\r\n    const [sα, cα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.ra)\r\n    const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.dec)\r\n    const lon = Math.atan2(sα * εcos + (sδ / cδ) * εsin, cα) // (13.1) p. 93\r\n    const lat = Math.asin(sδ * εcos - cδ * εsin * sα) // (13.2) p. 93\r\n    return new Ecliptic(lon, lat)\r\n  }\r\n\r\n  /**\r\n   * EqToHz computes Horizontal coordinates from equatorial coordinates.\r\n   *\r\n   * Argument g is the location of the observer on the Earth.  Argument st\r\n   * is the sidereal time at Greenwich.\r\n   *\r\n   * Sidereal time must be consistent with the equatorial coordinates.\r\n   * If coordinates are apparent, sidereal time must be apparent as well.\r\n   *\r\n   * @param {GlobeCoord} g - coordinates of observer on Earth\r\n   * @param {Number} st - sidereal time at Greenwich at time of observation\r\n   * @returns {Horizontal}\r\n   */\r\n  toHorizontal (g, st) {\r\n    const H = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Time(st).rad() - g.lon - this.ra\r\n    const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n    const [sφ, cφ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(g.lat)\r\n    const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.dec)\r\n    const azimuth = Math.atan2(sH, cH * sφ - (sδ / cδ) * cφ) // (13.5) p. 93\r\n    const altitude = Math.asin(sφ * sδ + cφ * cδ * cH) // (13.6) p. 93\r\n    return new Horizontal(azimuth, altitude)\r\n  }\r\n\r\n  /**\r\n   * EqToGal converts equatorial coordinates to galactic coordinates.\r\n   *\r\n   * Equatorial coordinates must be referred to the standard equinox of B1950.0.\r\n   * For conversion to B1950, see package precess and utility functions in\r\n   * package \"common\".\r\n   *\r\n   * @returns {Galactic}\r\n   */\r\n  toGalactic () {\r\n    const [sdα, cdα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(galacticNorth1950.ra - this.ra)\r\n    const [sgδ, cgδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(galacticNorth1950.dec)\r\n    const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.dec)\r\n    const x = Math.atan2(sdα, cdα * sgδ - (sδ / cδ) * cgδ) // (13.7) p. 94\r\n    // (galactic0Lon1950 + 1.5*math.Pi) = magic number of 303 deg\r\n    const lon = (galactic0Lon1950 + 1.5 * Math.PI - x) % (2 * Math.PI) // (13.8) p. 94\r\n    const lat = Math.asin(sδ * sgδ + cδ * cgδ * cdα)\r\n    return new Galactic(lon, lat)\r\n  }\r\n}\r\n\r\n/**\r\n * Horizontal coordinates are referenced to the local horizon of an observer\r\n * on the surface of the Earth.\r\n * @param {Number} az - Azimuth (A) in radians\r\n * @param {Number} alt - Altitude (h) in radians\r\n */\r\nclass Horizontal {\r\n  constructor (az = 0, alt = 0) {\r\n    this.az = az\r\n    this.alt = alt\r\n  }\r\n\r\n  /**\r\n   * transforms horizontal coordinates to equatorial coordinates.\r\n   *\r\n   * Sidereal time must be consistent with the equatorial coordinates.\r\n   * If coordinates are apparent, sidereal time must be apparent as well.\r\n   * @param {GlobeCoord} g - coordinates of observer on Earth (lat, lon)\r\n   * @param {Number} st - sidereal time at Greenwich at time of observation.\r\n   * @returns {Equatorial} (right ascension, declination)\r\n   */\r\n  toEquatorial (g, st) {\r\n    const [sA, cA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.az)\r\n    const [sh, ch] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.alt)\r\n    const [sφ, cφ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(g.lat)\r\n    const H = Math.atan2(sA, cA * sφ + sh / ch * cφ)\r\n    const ra = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Time(st).rad() - g.lon - H, 2 * Math.PI)\r\n    const dec = Math.asin(sφ * sh - cφ * ch * cA)\r\n    return new Equatorial(ra, dec)\r\n  }\r\n}\r\n\r\n/**\r\n * Galactic coordinates are referenced to the plane of the Milky Way.\r\n * @param {Number} lon - Longitude (l) in radians\r\n * @param {Number} lat - Latitude (b) in radians\r\n */\r\nclass Galactic {\r\n  constructor (lon = 0, lat = 0) {\r\n    this.lon = lon\r\n    this.lat = lat\r\n  }\r\n\r\n  /**\r\n   * GalToEq converts galactic coordinates to equatorial coordinates.\r\n   *\r\n   * Resulting equatorial coordinates will be referred to the standard equinox of\r\n   * B1950.0.  For subsequent conversion to other epochs, see package precess and\r\n   * utility functions in package meeus.\r\n   *\r\n   * @returns {Equatorial} (right ascension, declination)\r\n   */\r\n  toEquatorial () {\r\n    // (-galactic0Lon1950 - math.Pi/2) = magic number of -123 deg\r\n    const [sdLon, cdLon] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.lon - galactic0Lon1950 - Math.PI / 2)\r\n    const [sgδ, cgδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(galacticNorth1950.dec)\r\n    const [sb, cb] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.lat)\r\n    const y = Math.atan2(sdLon, cdLon * sgδ - (sb / cb) * cgδ)\r\n    // (galacticNorth1950.RA.Rad() - math.Pi) = magic number of 12.25 deg\r\n    const ra = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(y + galacticNorth1950.ra - Math.PI, 2 * Math.PI)\r\n    const dec = Math.asin(sb * sgδ + cb * cgδ * cdLon)\r\n    return new Equatorial(ra, dec)\r\n  }\r\n}\r\n\r\n/**\r\n* equatorial coords for galactic north\r\n* IAU B1950.0 coordinates of galactic North Pole\r\n*/\r\nconst galacticNorth = new Equatorial(\r\n  new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].RA(12, 49, 0).rad(),\r\n  27.4 * Math.PI / 180\r\n)\r\nconst galacticNorth1950 = galacticNorth\r\n\r\n/**\r\n* Galactic Longitude 0°\r\n* Meeus gives 33 as the origin of galactic longitudes relative to the\r\n* ascending node of of the galactic equator.  33 + 90 = 123, the IAU\r\n* value for origin relative to the equatorial pole.\r\n*/\r\nconst galacticLon0 = 33 * Math.PI / 180\r\nconst galactic0Lon1950 = galacticLon0\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  Ecliptic,\r\n  Equatorial,\r\n  Horizontal,\r\n  Galactic,\r\n  galacticNorth,\r\n  galacticNorth1950,\r\n  galacticLon0,\r\n  galactic0Lon1950\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/coord.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/deltat.js":
/*!***********************************************!*\
  !*** ./node_modules/astronomia/src/deltat.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   deltaT: () => (/* binding */ deltaT)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _interpolation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interpolation.js */ \"./node_modules/astronomia/src/interpolation.js\");\n/* harmony import */ var _data_deltat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/deltat.js */ \"./node_modules/astronomia/data/deltat.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module deltat\r\n */\r\n/**\r\n * DeltaT: Chapter 10, Dynamical Time and Universal Time.\r\n *\r\n * This package uses no functions from the Chapter. Polynoms are from\r\n * <http://eclipse.gsfc.nasa.gov/SEcat5/deltatpoly.html>, data sets are from\r\n * <http://maia.usno.navy.mil/ser7/>\r\n *\r\n * Functions in this package compute ΔT for various ranges of dates.\r\n *\r\n * ΔT = TD - UT1\r\n *\r\n * TD = \"Dynamical Time\", which is related to:\r\n *   ET \"Ephermis Time\", an older term.\r\n *   TDB \"Barycentric Dynamical Time\", very close to TD.\r\n *   TDT \"Terrestrial Dynamical Time\", a more correct term.\r\n *   TT \"Terrestrial Time\", a newer and more correct term.\r\n *\r\n * UT = \"Universal Time\", which is related (if ambiguously) to GMT \"Greenwich\r\n * Mean Time\".\r\n *\r\n * Terrestrial Time is effectively equal to International Atomic Time (TAI)\r\n * plus 32.184 seconds exactly: TT = TAI + 32.184\r\n * The epoch designated \"J2000.0\" is specified as Julian date 2451545.0 TT,\r\n * or 2000 January 1, 12h TT. This epoch can also be expressed as\r\n * 2000 January 1, 11:59:27.816 TAI or 2000 January 1, 11:58:55.816 UTC.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n// avoids ciclic import { LeapYearGregorian } from './julian.js'\r\nfunction LeapYearGregorian (y) {\r\n  return (y % 4 === 0 && y % 100 !== 0) || y % 400 === 0\r\n}\r\n\r\n/**\r\n * deltaT returns the difference ΔT = TD - UT between Dynamical Time TD and\r\n * Univeral Time (GMT+12) in seconds\r\n *\r\n * Polynoms are from <http://eclipse.gsfc.nasa.gov/SEcat5/deltatpoly.html>\r\n * and <http://www.staff.science.uu.nl/~gent0113/deltat/deltat_old.htm>\r\n *\r\n * @param {Number} dyear - decimal year\r\n * @returns {Number} ΔT in seconds.\r\n */\r\nfunction deltaT (dyear) {\r\n  let ΔT\r\n  if (dyear < -500) {\r\n    ΔT = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner((dyear - 1820) * 0.01, -20, 0, 32)\r\n  } else if (dyear < 500) {\r\n    ΔT = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(dyear * 0.01,\r\n      10583.6, -1014.41, 33.78311, -5.952053, -0.1798452, 0.022174192, 0.0090316521\r\n    )\r\n  } else if (dyear < 1600) {\r\n    ΔT = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner((dyear - 1000) * 0.01,\r\n      1574.2, -556.01, 71.23472, 0.319781, -0.8503463, -0.005050998, 0.0083572073\r\n    )\r\n  } else if (dyear < _data_deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].historic.first) {\r\n    ΔT = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner((dyear - 1600), 120, -0.9808, -0.01532, 1 / 7129)\r\n  } else if (dyear < _data_deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].data.first) {\r\n    ΔT = interpolate(dyear, _data_deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].historic)\r\n  } else if (dyear < _data_deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].data.last - 0.25) { // -0.25 ~= do not consider last 3 months in dataset\r\n    ΔT = interpolateData(dyear, _data_deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].data)\r\n  } else if (dyear < _data_deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].prediction.last) {\r\n    ΔT = interpolate(dyear, _data_deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].prediction)\r\n  } else if (dyear < 2050) {\r\n    ΔT = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner((dyear - 2000) / 100, 62.92, 32.217, 55.89)\r\n  } else if (dyear < 2150) {\r\n    ΔT = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner((dyear - 1820) / 100, -205.72, 56.28, 32)\r\n  } else {\r\n    const u = (dyear - 1820) / 100\r\n    ΔT = -20 + 32 * u * u\r\n  }\r\n  return ΔT\r\n}\r\n\r\n/**\r\n * interpolation of dataset\r\n * @private\r\n * @param {Number} dyear - julian year\r\n * @returns {Number} ΔT in seconds.\r\n */\r\nfunction interpolate (dyear, data) {\r\n  const d3 = _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].len3ForInterpolateX(dyear,\r\n    data.first, data.last, data.table\r\n  )\r\n  return d3.interpolateX(dyear)\r\n}\r\n\r\n/**\r\n * interpolation of dataset from finals2000A with is one entry per month\r\n * linear interpolation over whole dataset is inaccurate as points per month\r\n * are not equidistant. Therefore points are approximated using 2nd diff. interpolation\r\n * from current month using the following two points\r\n *\r\n * @private\r\n * @param {Number} dyear - julian year\r\n * @returns {Number} ΔT in seconds.\r\n */\r\nfunction interpolateData (dyear, data) {\r\n  const [fyear, fmonth] = data.firstYM\r\n  const { year, month, first, last } = monthOfYear(dyear)\r\n  const pos = 12 * (year - fyear) + (month - fmonth)\r\n  const table = data.table.slice(pos, pos + 3)\r\n  const d3 = new _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Len3(first, last, table)\r\n  return d3.interpolateX(dyear)\r\n}\r\n\r\n/**\r\n * Get month of Year from fraction. Fraction differs at leap years.\r\n * @private\r\n * @param {Number} dyear - decimal year\r\n * @return {Object} `{year: Number, month: Number, first: Number, last}`\r\n */\r\nfunction monthOfYear (dyear) {\r\n  // if (!monthOfYear.data) { // memoize yearly fractions per month\r\n  //   monthOfYear.data = { 0: [], 1: [] }\r\n  //   for (let m = 0; m <= 12; m++) {\r\n  //     monthOfYear.data[0][m] = new Calendar(1999, m, 1).toYear() - 1999 // non leap year\r\n  //     monthOfYear.data[1][m] = new Calendar(2000, m, 1).toYear() - 2000 // leap year\r\n  //   }\r\n  // }\r\n  // console.log(monthOfYear)\r\n  const year = dyear | 0\r\n  const f = dyear - year\r\n  const d = LeapYearGregorian(year) ? 1 : 0\r\n  const data = monthOfYear.data[d]\r\n\r\n  let month = 12 // TODO loop could be improved\r\n  while (month > 0 && data[month] > f) {\r\n    month--\r\n  }\r\n  const first = year + data[month]\r\n  const last = month < 11 ? year + data[month + 2] : year + 1 + data[(month + 2) % 12]\r\n  return { year, month, first, last }\r\n}\r\n/**\r\n  monthOfYear.data[0][m] = new Calendar(1999, m, 1).toYear() - 1999 // non leap year\r\n  monthOfYear.data[1][m] = new Calendar(2000, m, 1).toYear() - 2000 // leap year\r\n */\r\nmonthOfYear.data = [\r\n  [ // non leap year\r\n    0,\r\n    0,\r\n    0.08493150684921602,\r\n    0.16164383561635987,\r\n    0.24657534246580326,\r\n    0.3287671232876619,\r\n    0.4136986301368779,\r\n    0.4958904109589639,\r\n    0.5808219178081799,\r\n    0.6657534246576233,\r\n    0.747945205479482,\r\n    0.832876712328698,\r\n    0.915068493150784\r\n  ],\r\n  [ // leap year\r\n    0,\r\n    0,\r\n    0.08743169398917416,\r\n    0.1639344262296163,\r\n    0.24863387978143692,\r\n    0.3306010928961314,\r\n    0.4153005464481794,\r\n    0.49726775956287383,\r\n    0.5819672131146945,\r\n    0.6666666666667425,\r\n    0.7486338797814369,\r\n    0.8333333333332575,\r\n    0.9153005464481794\r\n  ]\r\n]\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  deltaT\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/deltat.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/eclipse.js":
/*!************************************************!*\
  !*** ./node_modules/astronomia/src/eclipse.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TYPE: () => (/* binding */ TYPE),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   lunar: () => (/* binding */ lunar),\n/* harmony export */   solar: () => (/* binding */ solar)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _moonphase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./moonphase.js */ \"./node_modules/astronomia/src/moonphase.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module eclipse\r\n */\r\n/**\r\n * Eclipse: Chapter 54, Eclipses.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nconst g = function (k, jm, c1, c2) { // (k, jm, c1, c2 float64)  (eclipse bool, jdeMax, γ, u, Mʹ float64)\r\n  const ck = 1 / 1236.85\r\n  const p = Math.PI / 180\r\n  const T = k * ck\r\n  const F = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 160.7108 * p, 390.67050284 * p / ck,\r\n    -0.0016118 * p, -0.00000227 * p, 0.000000011 * p)\r\n  if (Math.abs(Math.sin(F)) > 0.36) {\r\n    return [false] // no eclipse\r\n  }\r\n  const eclipse = true\r\n  const E = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 1, -0.002516, -0.0000074)\r\n  const M = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 2.5534 * p, 29.1053567 * p / ck,\r\n    -0.0000014 * p, -0.00000011 * p)\r\n  const Mʹ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 201.5643 * p, 385.81693528 * p / ck,\r\n    0.0107582 * p, 0.00001238 * p, -0.000000058 * p)\r\n  const Ω = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 124.7746 * p, -1.56375588 * p / ck,\r\n    0.0020672 * p, 0.00000215 * p)\r\n  const sΩ = Math.sin(Ω)\r\n  const F1 = F - 0.02665 * p * sΩ\r\n  const A1 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 299.77 * p, 0.107408 * p / ck, -0.009173 * p)\r\n  // (54.1) p. 380\r\n  const jdeMax = jm +\r\n    c1 * Math.sin(Mʹ) +\r\n    c2 * Math.sin(M) * E +\r\n    0.0161 * Math.sin(2 * Mʹ) +\r\n    -0.0097 * Math.sin(2 * F1) +\r\n    0.0073 * Math.sin(Mʹ - M) * E +\r\n    -0.005 * Math.sin(Mʹ + M) * E +\r\n    -0.0023 * Math.sin(Mʹ - 2 * F1) +\r\n    0.0021 * Math.sin(2 * M) * E +\r\n    0.0012 * Math.sin(Mʹ + 2 * F1) +\r\n    0.0006 * Math.sin(2 * Mʹ + M) * E +\r\n    -0.0004 * Math.sin(3 * Mʹ) +\r\n    -0.0003 * Math.sin(M + 2 * F1) * E +\r\n    0.0003 * Math.sin(A1) +\r\n    -0.0002 * Math.sin(M - 2 * F1) * E +\r\n    -0.0002 * Math.sin(2 * Mʹ - M) * E +\r\n    -0.0002 * sΩ\r\n  const P = 0.207 * Math.sin(M) * E +\r\n    0.0024 * Math.sin(2 * M) * E +\r\n    -0.0392 * Math.sin(Mʹ) +\r\n    0.0116 * Math.sin(2 * Mʹ) +\r\n    -0.0073 * Math.sin(Mʹ + M) * E +\r\n    0.0067 * Math.sin(Mʹ - M) * E +\r\n    0.0118 * Math.sin(2 * F1)\r\n  const Q = 5.2207 +\r\n    -0.0048 * Math.cos(M) * E +\r\n    0.002 * Math.cos(2 * M) * E +\r\n    -0.3299 * Math.cos(Mʹ) +\r\n    -0.006 * Math.cos(Mʹ + M) * E +\r\n    0.0041 * Math.cos(Mʹ - M) * E\r\n  const [sF1, cF1] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(F1)\r\n  const W = Math.abs(cF1)\r\n  const γ = (P * cF1 + Q * sF1) * (1 - 0.0048 * W)\r\n  const u = 0.0059 +\r\n    0.0046 * Math.cos(M) * E +\r\n    -0.0182 * Math.cos(Mʹ) +\r\n    0.0004 * Math.cos(2 * Mʹ) +\r\n    -0.0005 * Math.cos(M + Mʹ)\r\n  return [eclipse, jdeMax, γ, u, Mʹ] // (eclipse bool, jdeMax, γ, u, Mʹ float64)\r\n}\r\n\r\n/**\r\n * Eclipse type identifiers returned from Solar and Lunar.\r\n */\r\nconst TYPE = {\r\n  None: 0,\r\n  Partial: 1, // for solar eclipses\r\n  Annular: 2, // solar\r\n  AnnularTotal: 3, // solar\r\n  Penumbral: 4, // for lunar eclipses\r\n  Umbral: 5, // lunar\r\n  Total: 6 // solar or lunar\r\n}\r\n\r\n/**\r\n * Snap returns k at specified quarter q nearest year y.\r\n * Cut and paste from moonphase.  Time corresponding to k needed in these\r\n * algorithms but otherwise not meaningful enough to export from moonphase.\r\n */\r\nconst snap = function (y, q) { // (y, q float64)  float64\r\n  const k = (y - 2000) * 12.3685 // (49.2) p. 350\r\n  return Math.floor(k - q + 0.5) + q\r\n}\r\n\r\n/**\r\n * Solar computes quantities related to solar eclipses.\r\n *\r\n * Argument year is a decimal year specifying a date.\r\n *\r\n * eclipseType will be None, Partial, Annular, AnnularTotal, or Total.\r\n * If None, none of the other return values may be meaningful.\r\n *\r\n * central is true if the center of the eclipse shadow touches the Earth.\r\n *\r\n * jdeMax is the jde when the center of the eclipse shadow is closest to the\r\n * Earth center, in a plane through the center of the Earth.\r\n *\r\n * γ is the distance from the eclipse shadow center to the Earth center\r\n * at time jdeMax.\r\n *\r\n * u is the radius of the Moon's umbral cone in the plane of the Earth.\r\n *\r\n * p is the radius of the penumbral cone.\r\n *\r\n * mag is eclipse magnitude for partial eclipses.  It is not valid for other\r\n * eclipse types.\r\n *\r\n * γ, u, and p are in units of equatorial Earth radii.\r\n */\r\nfunction solar (year) { // (year float64)  (eclipseType int, central bool, jdeMax, γ, u, p, mag float64)\r\n  let eclipseType = TYPE.None\r\n  let mag\r\n\r\n  const [e, jdeMax, γ, u, _] = g(snap(year, 0), _moonphase_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].meanNew(year), -0.4075, 0.1721) // eslint-disable-line no-unused-vars\r\n\r\n  const p = u + 0.5461\r\n  if (!e) {\r\n    return { type: eclipseType } // no eclipse\r\n  }\r\n  const aγ = Math.abs(γ)\r\n  if (aγ > 1.5433 + u) {\r\n    return { type: eclipseType } // no eclipse\r\n  }\r\n  const central = aγ < 0.9972 // eclipse center touches Earth\r\n\r\n  if (!central) {\r\n    eclipseType = TYPE.Partial // most common case\r\n    if (aγ < 1.026) { // umbral cone may touch earth\r\n      if (aγ < 0.9972 + Math.abs(u)) { // total or annular\r\n        eclipseType = TYPE.Total // report total in both cases\r\n      }\r\n    }\r\n  } else if (u < 0) {\r\n    eclipseType = TYPE.Total\r\n  } else if (u > 0.0047) {\r\n    eclipseType = TYPE.Annular\r\n  } else {\r\n    const ω = 0.00464 * Math.sqrt(1 - γ * γ)\r\n    if (u < ω) {\r\n      eclipseType = TYPE.AnnularTotal\r\n    } else {\r\n      eclipseType = TYPE.Annular\r\n    }\r\n  }\r\n\r\n  if (eclipseType === TYPE.Partial) {\r\n    // (54.2) p. 382\r\n    mag = (1.5433 + u - aγ) / (0.5461 + 2 * u)\r\n  }\r\n\r\n  return {\r\n    type: eclipseType,\r\n    central,\r\n    jdeMax,\r\n    magnitude: mag,\r\n    distance: γ,\r\n    umbral: u,\r\n    penumbral: p\r\n  }\r\n}\r\n\r\n/**\r\n * Lunar computes quantities related to lunar eclipses.\r\n *\r\n * Argument year is a decimal year specifying a date.\r\n *\r\n * eclipseType will be None, Penumbral, Umbral, or Total.\r\n * If None, none of the other return values may be meaningful.\r\n *\r\n * jdeMax is the jde when the center of the eclipse shadow is closest to the\r\n * Moon center, in a plane through the center of the Moon.\r\n *\r\n * γ is the distance from the eclipse shadow center to the moon center\r\n * at time jdeMax.\r\n *\r\n * σ is the radius of the umbral cone in the plane of the Moon.\r\n *\r\n * ρ is the radius of the penumbral cone.\r\n *\r\n * mag is eclipse magnitude.\r\n *\r\n * sd- return values are semidurations of the phases of the eclipse, in days.\r\n *\r\n * γ, σ, and ρ are in units of equatorial Earth radii.\r\n */\r\nfunction lunar (year) { // (year float64)  (eclipseType int, jdeMax, γ, ρ, σ, mag, sdTotal, sdPartial, sdPenumbral float64)\r\n  let eclipseType = TYPE.None\r\n  let mag\r\n  let sdTotal\r\n  let sdPartial\r\n  let sdPenumbral\r\n\r\n  const [e, jdeMax, γ, u, Mʹ] = g(snap(year, 0.5),\r\n    _moonphase_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].meanFull(year), -0.4065, 0.1727)\r\n  if (!e) {\r\n    return { type: eclipseType } // no eclipse\r\n  }\r\n  const ρ = 1.2848 + u\r\n  const σ = 0.7403 - u\r\n  const aγ = Math.abs(γ)\r\n  mag = (1.0128 - u - aγ) / 0.545 // (54.3) p. 382\r\n\r\n  if (mag > 1) {\r\n    eclipseType = TYPE.Total\r\n  } else if (mag > 0) {\r\n    eclipseType = TYPE.Umbral\r\n  } else {\r\n    mag = (1.5573 + u - aγ) / 0.545 // (54.4) p. 382\r\n    if (mag < 0) {\r\n      return { type: eclipseType } // no eclipse\r\n    }\r\n    eclipseType = TYPE.Penumbral\r\n  }\r\n\r\n  const p = 1.0128 - u\r\n  const t = 0.4678 - u\r\n  const n = 0.5458 + 0.04 * Math.cos(Mʹ)\r\n  const γ2 = γ * γ\r\n\r\n  /* eslint-disable no-fallthrough */\r\n  switch (eclipseType) {\r\n    case TYPE.Total: {\r\n      sdTotal = Math.sqrt(t * t - γ2) / n / 24\r\n    }\r\n    case TYPE.Umbral: {\r\n      sdPartial = Math.sqrt(p * p - γ2) / n / 24\r\n    }\r\n    default: {\r\n      const h = 1.5573 + u\r\n      sdPenumbral = Math.sqrt(h * h - γ2) / n / 24\r\n    }\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return {\r\n    type: eclipseType,\r\n    jdeMax,\r\n    magnitude: mag,\r\n    distance: γ,\r\n    umbral: σ,\r\n    penumbral: ρ,\r\n    sdTotal,\r\n    sdPartial,\r\n    sdPenumbral\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  TYPE,\r\n  solar,\r\n  lunar\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/eclipse.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/elementequinox.js":
/*!*******************************************************!*\
  !*** ./node_modules/astronomia/src/elementequinox.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Elements: () => (/* binding */ Elements),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   reduceB1950FK4ToJ2000FK5: () => (/* binding */ reduceB1950FK4ToJ2000FK5),\n/* harmony export */   reduceB1950ToJ2000: () => (/* binding */ reduceB1950ToJ2000)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module elementequinox\r\n */\r\n/**\r\n * Elementequinox: Chapter 24, Reduction of Ecliptical Elements\r\n * from one Equinox to another one.\r\n *\r\n * See package precess for the method EclipticPrecessor.ReduceElements and\r\n * associated example.  The method is described in this chapter but located\r\n * in package precess so that it can be a method of EclipticPrecessor.\r\n */\r\n\r\n\r\n\r\n/**\r\n * Elements are the orbital elements of a solar system object which change\r\n * from one equinox to another.\r\n *\r\n * @param {Number} inc  - inclination\r\n * @param {Number} node - longitude of ascending node (Ω)\r\n * @param {Number} peri - argument of perihelion (ω)\r\n */\r\nclass Elements {\r\n  constructor (inc, node, peri) {\r\n    if (typeof inc === 'object') {\r\n      node = inc.pode\r\n      peri = inc.peri\r\n      inc = inc.inc\r\n    }\r\n    this.inc = inc || 0\r\n    this.node = node || 0\r\n    this.peri = peri || 0\r\n  }\r\n}\r\n\r\n// (24.4) p. 161\r\nconst S = 0.0001139788\r\nconst C = 0.9999999935\r\n/**\r\n * ReduceB1950ToJ2000 reduces orbital elements of a solar system body from\r\n * equinox B1950 to J2000.\r\n *\r\n * @param {Elements} eFrom\r\n * @returns {Elements} eTo\r\n */\r\nfunction reduceB1950ToJ2000 (eFrom) {\r\n  const W = eFrom.node - 174.298782 * Math.PI / 180\r\n  const [si, ci] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eFrom.inc)\r\n  const [sW, cW] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(W)\r\n  const A = si * sW\r\n  const B = C * si * cW - S * ci\r\n  const eTo = new Elements()\r\n  eTo.inc = Math.asin(Math.hypot(A, B))\r\n  eTo.node = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(174.997194 * Math.PI / 180 + Math.atan2(A, B),\r\n    2 * Math.PI)\r\n  eTo.peri = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(eFrom.peri + Math.atan2(-S * sW, C * si - S * ci * cW),\r\n    2 * Math.PI)\r\n  return eTo\r\n}\r\n\r\nconst Lp = 4.50001688 * Math.PI / 180\r\nconst L = 5.19856209 * Math.PI / 180\r\nconst J = 0.00651966 * Math.PI / 180\r\n\r\n/**\r\n * ReduceB1950ToJ2000 reduces orbital elements of a solar system body from\r\n * equinox B1950 in the FK4 system to equinox J2000 in the FK5 system.\r\n *\r\n * @param {Elements} eFrom\r\n * @returns {Elements} eTo\r\n */\r\nfunction reduceB1950FK4ToJ2000FK5 (eFrom) {\r\n  const W = L + eFrom.node\r\n  const [si, ci] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eFrom.inc)\r\n  const [sJ, cJ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(J)\r\n  const [sW, cW] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(W)\r\n  const eTo = new Elements()\r\n  eTo.inc = Math.acos(ci * cJ - si * sJ * cW)\r\n  eTo.node = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(Math.atan2(si * sW, ci * sJ + si * cJ * cW) - Lp,\r\n    2 * Math.PI)\r\n  eTo.peri = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(eFrom.peri + Math.atan2(sJ * sW, si * cJ + ci * sJ * cW),\r\n    2 * Math.PI)\r\n  return eTo\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  Elements,\r\n  reduceB1950ToJ2000,\r\n  reduceB1950FK4ToJ2000FK5\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/elementequinox.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/elliptic.js":
/*!*************************************************!*\
  !*** ./node_modules/astronomia/src/elliptic.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Elements: () => (/* binding */ Elements),\n/* harmony export */   astrometricJ2000: () => (/* binding */ astrometricJ2000),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   length1: () => (/* binding */ length1),\n/* harmony export */   length2: () => (/* binding */ length2),\n/* harmony export */   length4: () => (/* binding */ length4),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   vAphelion: () => (/* binding */ vAphelion),\n/* harmony export */   vPerihelion: () => (/* binding */ vPerihelion),\n/* harmony export */   velocity: () => (/* binding */ velocity)\n/* harmony export */ });\n/* harmony import */ var _apparent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apparent.js */ \"./node_modules/astronomia/src/apparent.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _kepler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kepler.js */ \"./node_modules/astronomia/src/kepler.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/* harmony import */ var _solarxyz_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./solarxyz.js */ \"./node_modules/astronomia/src/solarxyz.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module elliptic\r\n */\r\n/**\r\n * Elliptic: Chapter 33, Elliptic Motion.\r\n *\r\n * Partial: Various formulas and algorithms are unimplemented for lack of\r\n * examples or test cases.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Position returns observed equatorial coordinates of a planet at a given time.\r\n *\r\n * Argument p must be a valid V87Planet object for the observed planet.\r\n * Argument earth must be a valid V87Planet object for Earth.\r\n *\r\n * Results are right ascension and declination, α and δ in radians.\r\n */\r\nfunction position (planet, earth, jde) { // (p, earth *pp.V87Planet, jde float64)  (α, δ float64)\r\n  let x = 0\r\n  let y = 0\r\n  let z = 0\r\n  const posEarth = earth.position(jde)\r\n  const [L0, B0, R0] = [posEarth.lon, posEarth.lat, posEarth.range]\r\n  const [sB0, cB0] = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sincos(B0)\r\n  const [sL0, cL0] = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sincos(L0)\r\n\r\n  function pos (τ = 0) {\r\n    const pos = planet.position(jde - τ)\r\n    const [L, B, R] = [pos.lon, pos.lat, pos.range]\r\n    const [sB, cB] = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sincos(B)\r\n    const [sL, cL] = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sincos(L)\r\n    x = R * cB * cL - R0 * cB0 * cL0\r\n    y = R * cB * sL - R0 * cB0 * sL0\r\n    z = R * sB - R0 * sB0\r\n  }\r\n\r\n  pos()\r\n  const Δ = Math.sqrt(x * x + y * y + z * z) // (33.4) p. 224\r\n  const τ = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lightTime(Δ)\r\n  // repeating with jde-τ\r\n  pos(τ)\r\n\r\n  let λ = Math.atan2(y, x) // (33.1) p. 223\r\n  let β = Math.atan2(z, Math.hypot(x, y)) // (33.2) p. 223\r\n  const [Δλ, Δβ] = _apparent_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].eclipticAberration(λ, β, jde)\r\n  const fk5 = _planetposition_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].toFK5(λ + Δλ, β + Δβ, jde)\r\n  λ = fk5.lon\r\n  β = fk5.lat\r\n  const [Δψ, Δε] = _nutation_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].nutation(jde)\r\n  λ += Δψ\r\n  const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].meanObliquity(jde) + Δε\r\n  return new _coord_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Ecliptic(λ, β).toEquatorial(ε)\r\n  // Meeus gives a formula for elongation but doesn't spell out how to\r\n  // obtaion term λ0 and doesn't give an example solution.\r\n}\r\n\r\n/**\r\n * Elements holds keplerian elements.\r\n */\r\nclass Elements {\r\n  /*\r\n  Axis  float64 // Semimajor axis, a, in AU\r\n  Ecc   float64 // Eccentricity, e\r\n  Inc   float64 // Inclination, i, in radians\r\n  ArgP  float64 // Argument of perihelion, ω, in radians\r\n  Node  float64 // Longitude of ascending node, Ω, in radians\r\n  TimeP float64 // Time of perihelion, T, as jde\r\n  */\r\n  constructor (axis, ecc, inc, argP, node, timeP) {\r\n    let o = {}\r\n    if (typeof axis === 'object') {\r\n      o = axis\r\n    }\r\n    this.axis = o.axis || axis\r\n    this.ecc = o.ecc || ecc\r\n    this.inc = o.inc || inc\r\n    this.argP = o.argP || argP\r\n    this.node = o.node || node\r\n    this.timeP = o.timeP || timeP\r\n  }\r\n\r\n  /**\r\n   * Position returns observed equatorial coordinates of a body with Keplerian elements.\r\n   *\r\n   * Argument e must be a valid V87Planet object for Earth.\r\n   *\r\n   * Results are right ascension and declination α and δ, and elongation ψ,\r\n   * all in radians.\r\n   */\r\n  position (jde, earth) { // (α, δ, ψ float64) {\r\n    // (33.6) p. 227\r\n    const n = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].K / this.axis / Math.sqrt(this.axis)\r\n    const sε = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SOblJ2000\r\n    const cε = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].COblJ2000\r\n    const [sΩ, cΩ] = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sincos(this.node)\r\n    const [si, ci] = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sincos(this.inc)\r\n    // (33.7) p. 228\r\n    const F = cΩ\r\n    const G = sΩ * cε\r\n    const H = sΩ * sε\r\n    const P = -sΩ * ci\r\n    const Q = cΩ * ci * cε - si * sε\r\n    const R = cΩ * ci * sε + si * cε\r\n    // (33.8) p. 229\r\n    const A = Math.atan2(F, P)\r\n    const B = Math.atan2(G, Q)\r\n    const C = Math.atan2(H, R)\r\n    const a = Math.hypot(F, P)\r\n    const b = Math.hypot(G, Q)\r\n    const c = Math.hypot(H, R)\r\n\r\n    const f = (jde) => { // (x, y, z float64) {\r\n      const M = n * (jde - this.timeP)\r\n      let E\r\n      try {\r\n        E = _kepler_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].kepler2b(this.ecc, M, 15)\r\n      } catch (e) {\r\n        E = _kepler_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].kepler3(this.ecc, M)\r\n      }\r\n      const ν = _kepler_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].trueAnomaly(E, this.ecc)\r\n      const r = _kepler_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].radius(E, this.ecc, this.axis)\r\n      // (33.9) p. 229\r\n      const x = r * a * Math.sin(A + this.argP + ν)\r\n      const y = r * b * Math.sin(B + this.argP + ν)\r\n      const z = r * c * Math.sin(C + this.argP + ν)\r\n      return { x, y, z }\r\n    }\r\n    return astrometricJ2000(f, jde, earth)\r\n  }\r\n}\r\n\r\n/**\r\n * AstrometricJ2000 is a utility function for computing astrometric coordinates.\r\n *\r\n * It is used internally and only exported so that it can be used from\r\n * multiple packages.  It is not otherwise expected to be used.\r\n *\r\n * Argument f is a function that returns J2000 equatorial rectangular\r\n * coodinates of a body.\r\n *\r\n * Results are J2000 right ascention, declination, and elongation.\r\n */\r\nfunction astrometricJ2000 (f, jde, earth) { // (f func(float64)  (x, y, z float64), jde float64, e *pp.V87Planet) (α, δ, ψ float64)\r\n  const sol = _solarxyz_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].positionJ2000(earth, jde)\r\n  const [X, Y, Z] = [sol.x, sol.y, sol.z]\r\n  let ξ = 0\r\n  let η = 0\r\n  let ζ = 0\r\n  let Δ = 0\r\n\r\n  function fn (τ = 0) {\r\n    // (33.10) p. 229\r\n    const { x, y, z } = f(jde - τ)\r\n    ξ = X + x\r\n    η = Y + y\r\n    ζ = Z + z\r\n    Δ = Math.sqrt(ξ * ξ + η * η + ζ * ζ)\r\n  }\r\n\r\n  fn()\r\n  const τ = _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lightTime(Δ)\r\n  fn(τ)\r\n\r\n  let α = Math.atan2(η, ξ)\r\n  if (α < 0) {\r\n    α += 2 * Math.PI\r\n  }\r\n  const δ = Math.asin(ζ / Δ)\r\n  const R0 = Math.sqrt(X * X + Y * Y + Z * Z)\r\n  const ψ = Math.acos((ξ * X + η * Y + ζ * Z) / R0 / Δ)\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Coord(α, δ, undefined, ψ)\r\n}\r\n\r\n/**\r\n * Velocity returns instantaneous velocity of a body in elliptical orbit around the Sun.\r\n *\r\n * Argument a is the semimajor axis of the body, r is the instaneous distance\r\n * to the Sun, both in AU.\r\n *\r\n * Result is in Km/sec.\r\n */\r\nfunction velocity (a, r) { // (a, r float64)  float64\r\n  return 42.1219 * Math.sqrt(1 / r - 0.5 / a)\r\n}\r\n\r\n/**\r\n * Velocity returns the velocity of a body at aphelion.\r\n *\r\n * Argument a is the semimajor axis of the body in AU, e is eccentricity.\r\n *\r\n * Result is in Km/sec.\r\n */\r\nfunction vAphelion (a, e) { // (a, e float64)  float64\r\n  return 29.7847 * Math.sqrt((1 - e) / (1 + e) / a)\r\n}\r\n\r\n/**\r\n * Velocity returns the velocity of a body at perihelion.\r\n *\r\n * Argument a is the semimajor axis of the body in AU, e is eccentricity.\r\n *\r\n * Result is in Km/sec.\r\n */\r\nfunction vPerihelion (a, e) { // (a, e float64)  float64\r\n  return 29.7847 * Math.sqrt((1 + e) / (1 - e) / a)\r\n}\r\n\r\n/**\r\n * Length1 returns Ramanujan's approximation for the length of an elliptical\r\n * orbit.\r\n *\r\n * Argument a is semimajor axis, e is eccentricity.\r\n *\r\n * Result is in units used for semimajor axis, typically AU.\r\n */\r\nfunction length1 (a, e) { // (a, e float64)  float64\r\n  const b = a * Math.sqrt(1 - e * e)\r\n  return Math.PI * (3 * (a + b) - Math.sqrt((a + 3 * b) * (3 * a + b)))\r\n}\r\n\r\n/**\r\n * Length2 returns an alternate approximation for the length of an elliptical\r\n * orbit.\r\n *\r\n * Argument a is semimajor axis, e is eccentricity.\r\n *\r\n * Result is in units used for semimajor axis, typically AU.\r\n */\r\nfunction length2 (a, e) { // (a, e float64)  float64\r\n  const b = a * Math.sqrt(1 - e * e)\r\n  const s = a + b\r\n  const p = a * b\r\n  const A = s * 0.5\r\n  const G = Math.sqrt(p)\r\n  const H = 2 * p / s\r\n  return Math.PI * (21 * A - 2 * G - 3 * H) * 0.125\r\n}\r\n\r\n/**\r\n * Length3 returns the length of an elliptical orbit.\r\n *\r\n * Argument a is semimajor axis, e is eccentricity.\r\n *\r\n * Result is exact, and in units used for semimajor axis, typically AU.\r\n */\r\n/* As Meeus notes, Length4 converges faster.  There is no reason to use\r\nthis function\r\nexport function length3 (a, e) { // (a, e float64)  float64\r\n  const sum0 = 1.0\r\n  const e2 = e * e\r\n  const term = e2 * 0.25\r\n  const sum1 = 1.0 - term\r\n  const nf = 1.0\r\n  const df = 2.0\r\n  while (sum1 !== sum0) {\r\n    term *= nf\r\n    nf += 2\r\n    df += 2\r\n    term *= nf * e2 / (df * df)\r\n    sum0 = sum1\r\n    sum1 -= term\r\n  }\r\n  return 2 * Math.PI * a * sum0\r\n} */\r\n\r\n/**\r\n * Length4 returns the length of an elliptical orbit.\r\n *\r\n * Argument a is semimajor axis, e is eccentricity.\r\n *\r\n * Result is exact, and in units used for semimajor axis, typically AU.\r\n */\r\nfunction length4 (a, e) { // (a, e float64)  float64\r\n  const b = a * Math.sqrt(1 - e * e)\r\n  const m = (a - b) / (a + b)\r\n  const m2 = m * m\r\n  let sum0 = 1.0\r\n  let term = m2 * 0.25\r\n  let sum1 = 1.0 + term\r\n  let nf = -1.0\r\n  let df = 2.0\r\n  while (sum1 !== sum0) {\r\n    nf += 2\r\n    df += 2\r\n    term *= nf * nf * m2 / (df * df)\r\n    sum0 = sum1\r\n    sum1 += term\r\n  }\r\n  return 2 * Math.PI * a * sum0 / (1 + m)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  position,\r\n  Elements,\r\n  astrometricJ2000,\r\n  velocity,\r\n  vAphelion,\r\n  vPerihelion,\r\n  length1,\r\n  length2,\r\n  // length3,\r\n  length4\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/elliptic.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/elp.js":
/*!********************************************!*\
  !*** ./node_modules/astronomia/src/elp.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Moon: () => (/* binding */ Moon),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   position: () => (/* binding */ position)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2020 mdmunir\r\n * @copyright 2020 commenthol\r\n * @license MIT\r\n * @module elp\r\n */\r\n\r\n/**\r\n * Elp Mpp02\r\n * source ftp://cyrano-se.obspm.fr/pub/2_lunar_solutions/2_elpmpp02/elpmpp02.pdf\r\n */\r\n\r\n\r\n\r\nconst SEC2RAD = 1 / 3600 * Math.PI / 180\r\n\r\nfunction sum (T, series) {\r\n  const coeffs = []\r\n  Object.keys(series).forEach((x) => {\r\n    coeffs[x] = 0.0\r\n    let y = series[x].length - 1\r\n    for (y; y >= 0; y--) {\r\n      // A, t0, t1, t2, t3, t4\r\n      const row = series[x][y]\r\n      const φ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, row.slice(1))\r\n      coeffs[x] += row[0] * Math.sin(φ)\r\n    }\r\n  })\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, ...coeffs)\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass Moon {\r\n  /**\r\n   * ELP representation of a Moon\r\n   * @constructs Moon\r\n   * @param {object} data - elp data series\r\n   * @example\r\n   * ```js\r\n   * // for use in browser\r\n   * import {data} from 'astronomia.js'\r\n   * const moon = new elp.Moon(data.elpMppDe)\r\n   * ```\r\n   */\r\n  constructor (data) {\r\n    if (typeof data !== 'object') throw new TypeError('need Elp data')\r\n    this.series = data\r\n  }\r\n\r\n  _calcLBR (T) {\r\n    const L = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, this.series.W1) + sum(T, this.series.L) * SEC2RAD\r\n    const B = sum(T, this.series.B) * SEC2RAD\r\n    const R = sum(T, this.series.R)\r\n    return { L: _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(L, 2 * Math.PI), B, R }\r\n  }\r\n\r\n  /**\r\n   * Position returns rectangular coordinates referred to the inertial mean ecliptic and equinox of J2000.\r\n   * @param {Number} jde - Julian ephemeris day\r\n   * @return {object} rectangular coordinates\r\n   *   {Number} x\r\n   *   {Number} y\r\n   *   {Number} z\r\n   */\r\n  positionXYZ (jde) {\r\n    const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n    const { L, B, R } = this._calcLBR(T)\r\n\r\n    const x = R * Math.cos(L) * Math.cos(B)\r\n    const y = R * Math.sin(L) * Math.cos(B)\r\n    const z = R * Math.sin(B)\r\n\r\n    const P = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 0, 0.10180391e-4, 0.47020439e-6, -0.5417367e-9, -0.2507948e-11, 0.463486e-14)\r\n    const Q = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 0, -0.113469002e-3, 0.12372674e-6, 0.12654170e-8, -0.1371808e-11, -0.320334e-14)\r\n    const sq = Math.sqrt(1 - P * P - Q * Q)\r\n    const p11 = 1 - 2 * P * P\r\n    const p12 = 2 * P * Q\r\n    const p13 = 2 * P * sq\r\n    const p21 = 2 * P * Q\r\n    const p22 = 1 - 2 * Q * Q\r\n    const p23 = -2 * Q * sq\r\n    const p31 = -2 * P * sq\r\n    const p32 = 2 * Q * sq\r\n    const p33 = 1 - 2 * P * P - 2 * Q * Q\r\n\r\n    const result = {\r\n      x: p11 * x + p12 * y + p13 * z,\r\n      y: p21 * x + p22 * y + p23 * z,\r\n      z: p31 * x + p32 * y + p33 * z\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Delay effect of light time\r\n   *\r\n   * @param {Number} jde - Julian ephemeris day\r\n   * @returns {Number} Delay time in days\r\n   */\r\n  lightTime (jde) {\r\n    const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n    const R = sum(T, this.series.R)\r\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lightTime(R / _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AU)\r\n  }\r\n\r\n  /**\r\n   * Position returns ecliptic position of moon at equinox and ecliptic of date.\r\n   *\r\n   * @param {Number} jde - the date for which positions are desired.\r\n   * @returns {Coord} Results are positions consistent with those elp data,\r\n   * that is, at equinox and ecliptic of date.\r\n   *  {Number} lon - geocentric longitude in radians.\r\n   *  {Number} lat - geocentric latitude in radians.\r\n   *  {Number} range - geocentric range in KM.\r\n   */\r\n  position (jde) {\r\n    const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n    const { L, B, R } = this._calcLBR(T)\r\n\r\n    // precession\r\n    const pA = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 0, 5029.0966 - 0.29965, 1.1120, 0.000077, -0.00002353) * SEC2RAD\r\n    return new _base_js__WEBPACK_IMPORTED_MODULE_0__.Coord(\r\n      _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(L + pA, 2 * Math.PI),\r\n      B,\r\n      R)\r\n  }\r\n}\r\n\r\n/**\r\n * Position returns the true geometric position of the moon as ecliptic coordinates.\r\n *\r\n * Result computed by Elp theory.  Result is at equator and equinox\r\n * of date in the FK5 frame.  It does not include nutation or aberration.\r\n *\r\n * @param {Object} elpData\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Object}\r\n *   {Number} lon - ecliptic longitude in radians\r\n *   {Number} lat - ecliptic latitude in radians\r\n *   {Number} range - range in KM\r\n */\r\nfunction position (elpData, jde) {\r\n  const moon = new Moon(elpData)\r\n  return moon.position(jde)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  Moon,\r\n  position\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/elp.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/eqtime.js":
/*!***********************************************!*\
  !*** ./node_modules/astronomia/src/eqtime.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   e: () => (/* binding */ e),\n/* harmony export */   eSmart: () => (/* binding */ eSmart)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module eqtime\r\n */\r\n/**\r\n * Eqtime: Chapter 28, Equation of time.\r\n */\r\n\r\n\r\n\r\n\r\n\r\nconst { cos, sin, tan } = Math\r\n\r\n/**\r\n * e computes the \"equation of time\" for the given JDE.\r\n *\r\n * Parameter planet must be a planetposition.Planet object for Earth obtained\r\n * with `new planetposition.Planet('earth')`.\r\n *\r\n * @param {Number} jde - Julian ephemeris day\r\n * @param {planetposition.Planet} earth - VSOP87 planet\r\n * @returns {Number} equation of time as an hour angle in radians.\r\n */\r\nfunction e (jde, earth) {\r\n  const τ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde) * 0.1\r\n  const L0 = l0(τ)\r\n  // code duplicated from solar.ApparentEquatorialVSOP87 so that\r\n  // we can keep Δψ and cε\r\n  const { lon, lat, range } = _solar_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].trueVSOP87(earth, jde)\r\n  const [Δψ, Δε] = _nutation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].nutation(jde)\r\n  const a = -20.4898 / 3600 * Math.PI / 180 / range\r\n  const λ = lon + Δψ + a\r\n  const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].meanObliquity(jde) + Δε\r\n  const eq = new _coord_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Ecliptic(λ, lat).toEquatorial(ε)\r\n  // (28.1) p. 183\r\n  const E = L0 - 0.0057183 * Math.PI / 180 - eq.ra + Δψ * cos(ε)\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(E + Math.PI, 2 * Math.PI) - Math.PI\r\n}\r\n\r\n/**\r\n * (28.2) p. 183\r\n */\r\nconst l0 = function (τ) {\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(τ, 280.4664567, 360007.6982779, 0.03032028,\r\n    1.0 / 49931, -1.0 / 15300, -1.0 / 2000000) * Math.PI / 180\r\n}\r\n\r\n/**\r\n * eSmart computes the \"equation of time\" for the given JDE.\r\n *\r\n * Result is less accurate that e() but the function has the advantage\r\n * of not requiring the V87Planet object.\r\n *\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Number} equation of time as an hour angle in radians.\r\n */\r\nfunction eSmart (jde) {\r\n  const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].meanObliquity(jde)\r\n  const t = tan(ε * 0.5)\r\n  const y = t * t\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  const L0 = l0(T * 0.1)\r\n  const e = _solar_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].eccentricity(T)\r\n  const M = _solar_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].meanAnomaly(T)\r\n  const [sin2L0, cos2L0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * L0)\r\n  const sinM = sin(M)\r\n  // (28.3) p. 185\r\n  return y * sin2L0 - 2 * e * sinM + 4 * e * y * sinM * cos2L0 -\r\n    y * y * sin2L0 * cos2L0 - 1.25 * e * e * sin(2 * M)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  e,\r\n  eSmart\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/eqtime.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/fit.js":
/*!********************************************!*\
  !*** ./node_modules/astronomia/src/fit.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   correlationCoefficient: () => (/* binding */ correlationCoefficient),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   func1: () => (/* binding */ func1),\n/* harmony export */   func3: () => (/* binding */ func3),\n/* harmony export */   linear: () => (/* binding */ linear),\n/* harmony export */   quadratic: () => (/* binding */ quadratic)\n/* harmony export */ });\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module fit\r\n */\r\n/**\r\n * Fit: Chapter 4, Curve Fitting.\r\n */\r\n\r\n/**\r\n * Linear fits a line to sample data.\r\n *\r\n * Argument p is a list of data points.  Results a and b are coefficients\r\n * of the best fit line y = ax + b.\r\n */\r\nfunction linear (points) { // (p []struct{ X, Y float64 })  (a, b float64)\r\n  let sx = 0\r\n  let sy = 0\r\n  let sx2 = 0\r\n  let sxy = 0\r\n  for (const p of points) {\r\n    const x = p.x\r\n    const y = p.y\r\n    sx += x\r\n    sy += y\r\n    sx2 += x * x\r\n    sxy += x * y\r\n  }\r\n  const n = points.length\r\n  const d = n * sx2 - sx * sx\r\n  // (4.2) p. 36\r\n  const a = (n * sxy - sx * sy) / d\r\n  const b = (sy * sx2 - sx * sxy) / d\r\n  return [a, b]\r\n}\r\n\r\n/**\r\n * CorrelationCoefficient returns a correlation coefficient for sample data.\r\n */\r\nfunction correlationCoefficient (points) { // (p []struct{ X, Y float64 })  float64\r\n  let sx = 0\r\n  let sy = 0\r\n  let sx2 = 0\r\n  let sy2 = 0\r\n  let sxy = 0\r\n  for (const p of points) {\r\n    const x = p.x\r\n    const y = p.y\r\n    sx += x\r\n    sy += y\r\n    sx2 += x * x\r\n    sy2 += y * y\r\n    sxy += x * y\r\n  }\r\n  const n = points.length\r\n  // (4.3) p. 38\r\n  return (n * sxy - sx * sy) / (Math.sqrt(n * sx2 - sx * sx) * Math.sqrt(n * sy2 - sy * sy))\r\n}\r\n\r\n/**\r\n * Quadratic fits y = ax² + bx + c to sample data.\r\n *\r\n * Argument p is a list of data points.  Results a, b, and c are coefficients\r\n * of the best fit quadratic y = ax² + bx + c.\r\n */\r\nfunction quadratic (points) {\r\n  let P = 0\r\n  let Q = 0\r\n  let R = 0\r\n  let S = 0\r\n  let T = 0\r\n  let U = 0\r\n  let V = 0\r\n  for (const p of points) {\r\n    const x = p.x\r\n    const y = p.y\r\n    const x2 = x * x\r\n    P += x\r\n    Q += x2\r\n    R += x * x2\r\n    S += x2 * x2\r\n    T += y\r\n    U += x * y\r\n    V += x2 * y\r\n  }\r\n  const N = points.length\r\n  // (4.5) p. 43\r\n  const D = N * Q * S + 2 * P * Q * R - Q * Q * Q - P * P * S - N * R * R\r\n  // (4.6) p. 43\r\n  const a = (N * Q * V + P * R * T + P * Q * U - Q * Q * T - P * P * V - N * R * U) / D\r\n  const b = (N * S * U + P * Q * V + Q * R * T - Q * Q * U - P * S * T - N * R * V) / D\r\n  const c = (Q * S * T + Q * R * U + P * R * V - Q * Q * V - P * S * U - R * R * T) / D\r\n  return [a, b, c]\r\n}\r\n\r\n/**\r\n * Func3 implements multiple linear regression for a linear combination\r\n * of three functions.\r\n *\r\n * Given sample data and three functions in x, Func3 returns coefficients\r\n * a, b, and c fitting y = aƒ₀(x) + bƒ₁(x) + cƒ₂(x) to sample data.\r\n */\r\nfunction func3 (points, f0, f1, f2) {\r\n  let M = 0\r\n  let P = 0\r\n  let Q = 0\r\n  let R = 0\r\n  let S = 0\r\n  let T = 0\r\n  let U = 0\r\n  let V = 0\r\n  let W = 0\r\n  for (const p of points) {\r\n    const x = p.x\r\n    const y = p.y\r\n    const y0 = f0(x)\r\n    const y1 = f1(x)\r\n    const y2 = f2(x)\r\n    M += y0 * y0\r\n    P += y0 * y1\r\n    Q += y0 * y2\r\n    R += y1 * y1\r\n    S += y1 * y2\r\n    T += y2 * y2\r\n    U += y * y0\r\n    V += y * y1\r\n    W += y * y2\r\n  }\r\n  // (4.7) p. 44\r\n  const D = M * R * T + 2 * P * Q * S - M * S * S - R * Q * Q - T * P * P\r\n  const a = (U * (R * T - S * S) + V * (Q * S - P * T) + W * (P * S - Q * R)) / D\r\n  const b = (U * (S * Q - P * T) + V * (M * T - Q * Q) + W * (P * Q - M * S)) / D\r\n  const c = (U * (P * S - R * Q) + V * (P * Q - M * S) + W * (M * R - P * P)) / D\r\n  return [a, b, c]\r\n}\r\n\r\n/**\r\n * Func1 fits a linear multiple of a function to sample data.\r\n *\r\n * Given sample data and a function in x, Func1 returns coefficient\r\n * a fitting y = aƒ(x).\r\n */\r\nfunction func1 (points, f) {\r\n  let syf = 0\r\n  let sf2 = 0\r\n  // (4.8) p. 45\r\n  for (const p of points) {\r\n    const fx = f(p.x)\r\n    const y = p.y\r\n    syf += y * fx\r\n    sf2 += fx * fx\r\n  }\r\n  return syf / sf2\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  linear,\r\n  correlationCoefficient,\r\n  quadratic,\r\n  func3,\r\n  func1\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/fit.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/globe.js":
/*!**********************************************!*\
  !*** ./node_modules/astronomia/src/globe.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Coord: () => (/* binding */ Coord),\n/* harmony export */   Earth76: () => (/* binding */ Earth76),\n/* harmony export */   Ellipsoid: () => (/* binding */ Ellipsoid),\n/* harmony export */   RotationRate1996_5: () => (/* binding */ RotationRate1996_5),\n/* harmony export */   approxAngularDistance: () => (/* binding */ approxAngularDistance),\n/* harmony export */   approxLinearDistance: () => (/* binding */ approxLinearDistance),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   geocentricLatitudeDifference: () => (/* binding */ geocentricLatitudeDifference),\n/* harmony export */   oneDegreeOfLatitude: () => (/* binding */ oneDegreeOfLatitude),\n/* harmony export */   oneDegreeOfLongitude: () => (/* binding */ oneDegreeOfLongitude)\n/* harmony export */ });\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module globe\r\n */\r\n/**\r\n * Globe: Chapter 11, The Earth's Globe.\r\n *\r\n * Globe contains functions concerning the surface of the Earth idealized as\r\n * an ellipsoid of revolution.\r\n */\r\n\r\n/**\r\n * Ellipsoid represents an ellipsoid of revolution. */\r\nclass Ellipsoid {\r\n  /**\r\n   * @param {number} radius - equatorial radius\r\n   * @param {number} flat - ellipsiod flattening\r\n   */\r\n  constructor (radius, flat) {\r\n    this.radius = radius\r\n    this.flat = flat\r\n  }\r\n\r\n  /** A is a common identifier for equatorial radius. */\r\n  A () {\r\n    return this.radius\r\n  }\r\n\r\n  /** B is a common identifier for polar radius. */\r\n  B () {\r\n    return this.radius * (1 - this.flat)\r\n  }\r\n\r\n  /** eccentricity of a meridian. */\r\n  eccentricity () {\r\n    return Math.sqrt((2 - this.flat) * this.flat)\r\n  }\r\n\r\n  /**\r\n   * parallaxConstants computes parallax constants ρ sin φ′ and ρ cos φ′.\r\n   *\r\n   * Arguments are geographic latitude φ in radians and height h\r\n   * in meters above the ellipsoid.\r\n   *\r\n   * @param {number} φ - geographic latitude in radians\r\n   * @param {number} h - height in meters above the ellipsoid\r\n   * @return {number[]} [ρ sin φ′, ρ cos φ] parallax constants [ρsφ, ρcφ]\r\n   */\r\n  parallaxConstants (φ, h) {\r\n    const boa = 1 - this.flat\r\n    const su = Math.sin(Math.atan(boa * Math.tan(φ)))\r\n    const cu = Math.cos(Math.atan(boa * Math.tan(φ)))\r\n    const s = Math.sin(φ)\r\n    const c = Math.cos(φ)\r\n    const hoa = h * 1e-3 / this.radius\r\n    // (s, c float)\r\n    const ρsφ = su * boa + hoa * s\r\n    const ρcφ = cu + hoa * c\r\n    return [ρsφ, ρcφ]\r\n  }\r\n\r\n  /**\r\n   * rho is distance from Earth center to a point on the ellipsoid.\r\n   *\r\n   * Result unit is fraction of the equatorial radius.\r\n   * @param {number} φ - geographic latitude in radians\r\n   * @returns {number} // TODO\r\n   */\r\n  rho (φ) {\r\n    // Magic numbers...\r\n    return 0.9983271 + 0.0016764 * Math.cos(2 * φ) - 0.0000035 * Math.cos(4 * φ)\r\n  }\r\n\r\n  /**\r\n   * radiusAtLatitude returns the radius of the circle that is the parallel of\r\n   * latitude at φ.\r\n   *\r\n   * Result unit is Km.\r\n   *\r\n   * @param {number} φ\r\n   * @return {number} radius in km\r\n   */\r\n  radiusAtLatitude (φ) {\r\n    const s = Math.sin(φ)\r\n    const c = Math.cos(φ)\r\n    return this.A() * c / Math.sqrt(1 - (2 - this.flat) * this.flat * s * s)\r\n  }\r\n\r\n  /**\r\n   * radiusOfCurvature of meridian at latitude φ.\r\n   *\r\n   * Result unit is Km.\r\n   *\r\n   * @param {number} φ\r\n   * @return {number} radius in km\r\n   */\r\n  radiusOfCurvature (φ) {\r\n    const s = Math.sin(φ)\r\n    const e2 = (2 - this.flat) * this.flat\r\n    return this.A() * (1 - e2) / Math.pow(1 - e2 * s * s, 1.5)\r\n  }\r\n\r\n  /**\r\n   * distance is distance between two points measured along the surface\r\n   * of an ellipsoid.\r\n   *\r\n   * Accuracy is much better than that of approxAngularDistance or\r\n   * approxLinearDistance.\r\n   *\r\n   * Result unit is Km.\r\n   *\r\n   * @param {Coord} c1\r\n   * @param {Coord} c2\r\n   * @return {number} radius in km\r\n   */\r\n  distance (c1, c2) {\r\n    // From AA, ch 11, p 84.\r\n    const [s2f, c2f] = sincos2((c1.lat + c2.lat) / 2)\r\n    const [s2g, c2g] = sincos2((c1.lat - c2.lat) / 2)\r\n    const [s2λ, c2λ] = sincos2((c1.lon - c2.lon) / 2)\r\n    const s = s2g * c2λ + c2f * s2λ\r\n    const c = c2g * c2λ + s2f * s2λ\r\n    const ω = Math.atan(Math.sqrt(s / c))\r\n    const r = Math.sqrt(s * c) / ω\r\n    const d = 2 * ω * this.radius\r\n    const h1 = (3 * r - 1) / (2 * c)\r\n    const h2 = (3 * r + 1) / (2 * s)\r\n    return d * (1 + this.flat * (h1 * s2f * c2g - h2 * c2f * s2g))\r\n  }\r\n}\r\n\r\n/** IAU 1976 values.  Radius in Km. */\r\nconst Earth76 = new Ellipsoid(6378.14, 1 / 298.257)\r\n\r\n/**\r\n * RotationRate1996_5 is the rotational angular velocity of the Earth\r\n * with respect to the stars at the epoch 1996.5.\r\n *\r\n * Unit is radian/second.\r\n */\r\nconst RotationRate1996_5 = 7.292114992e-5 // eslint-disable-line camelcase\r\n\r\n/**\r\n * oneDegreeOfLongitude returns the length of one degree of longitude.\r\n *\r\n * Argument `rp` is the radius in Km of a circle that is a parallel of latitude\r\n * (as returned by Ellipsoid.radiusAtLatitude.)\r\n * Result is distance in Km along one degree of the circle.\r\n *\r\n * @param {number} rp\r\n * @return {number} distance in Km\r\n */\r\nfunction oneDegreeOfLongitude (rp) {\r\n  return rp * Math.PI / 180\r\n}\r\n\r\n/**\r\n * oneDegreeOfLatitude returns the length of one degree of latitude.\r\n *\r\n * Argument `rm` is the radius in Km of curvature along a meridian.\r\n * (as returned by Ellipsoid.radiusOfCurvature.)\r\n * Result is distance in Km along one degree of the meridian.\r\n *\r\n * @param {number} rm\r\n * @return {number} distance in Km\r\n */\r\nfunction oneDegreeOfLatitude (rm) {\r\n  return rm * Math.PI / 180\r\n}\r\n\r\n/**\r\n * geocentricLatitudeDifference returns geographic latitude - geocentric\r\n * latitude (φ - φ′) with given geographic latitude (φ).\r\n *\r\n * Units are radians.\r\n * @param {number} φ\r\n * @returns {number} difference in Deg\r\n */\r\nfunction geocentricLatitudeDifference (φ) {\r\n  // This appears to be an approximation with hard coded magic numbers.\r\n  // No explanation is given in the text. The ellipsoid is not specified.\r\n  // Perhaps the approximation works well enough for all ellipsoids?\r\n  return (692.73 * Math.sin(2 * φ) - 1.16 * Math.sin(4 * φ)) * Math.PI / (180 * 3600)\r\n}\r\n\r\n/**\r\n * Coord represents geographic coordinates on the Earth.\r\n *\r\n * Longitude is measured positively westward from the Greenwich meridian.\r\n */\r\nclass Coord {\r\n  /**\r\n   * @param {number} lat - latitude (φ) in radians\r\n   * @param {number} lon - longitude (ψ, or L) in radians (measured positively westward)\r\n   */\r\n  constructor (lat = 0, lon = 0) {\r\n    this.lat = lat\r\n    this.lon = lon\r\n  }\r\n}\r\n\r\n/**\r\n * approxAngularDistance returns the cosine of the angle between two points.\r\n *\r\n * The accuracy deteriorates at small angles.\r\n *\r\n * @param {Coord} p1 - Point 1\r\n * @param {Coord} p2 - Point 2\r\n * @returns {number} cosine `cos` of the angle between two points.\r\n * Use `d = Math.acos(cos)` to obtain geocentric angular distance in radians\r\n */\r\nfunction approxAngularDistance (p1, p2) {\r\n  const s1 = Math.sin(p1.lat)\r\n  const c1 = Math.cos(p1.lat)\r\n  const s2 = Math.sin(p2.lat)\r\n  const c2 = Math.cos(p2.lat)\r\n  return s1 * s2 + c1 * c2 * Math.cos(p1.lon - p2.lon)\r\n}\r\n\r\n/**\r\n * approxLinearDistance computes a distance across the surface of the Earth.\r\n *\r\n * Approximating the Earth as a sphere, the function takes a geocentric angular\r\n * distance in radians and returns the corresponding linear distance in Km.\r\n *\r\n * @param {number} d - geocentric angular distance in radians\r\n * @returns linear distance in Km\r\n */\r\nfunction approxLinearDistance (d) {\r\n  return 6371 * d\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction sincos2 (x) {\r\n  const s = Math.sin(x)\r\n  const c = Math.cos(x)\r\n  return [s * s, c * c]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  Ellipsoid,\r\n  Earth76,\r\n  // eslint-disable-next-line camelcase\r\n  RotationRate1996_5,\r\n  oneDegreeOfLongitude,\r\n  oneDegreeOfLatitude,\r\n  geocentricLatitudeDifference,\r\n  Coord,\r\n  approxAngularDistance,\r\n  approxLinearDistance\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/globe.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/illum.js":
/*!**********************************************!*\
  !*** ./node_modules/astronomia/src/illum.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fraction: () => (/* binding */ fraction),\n/* harmony export */   fractionVenus: () => (/* binding */ fractionVenus),\n/* harmony export */   jupiter: () => (/* binding */ jupiter),\n/* harmony export */   jupiter84: () => (/* binding */ jupiter84),\n/* harmony export */   mars: () => (/* binding */ mars),\n/* harmony export */   mars84: () => (/* binding */ mars84),\n/* harmony export */   mercury: () => (/* binding */ mercury),\n/* harmony export */   mercury84: () => (/* binding */ mercury84),\n/* harmony export */   neptune: () => (/* binding */ neptune),\n/* harmony export */   neptune84: () => (/* binding */ neptune84),\n/* harmony export */   phaseAngle: () => (/* binding */ phaseAngle),\n/* harmony export */   phaseAngle2: () => (/* binding */ phaseAngle2),\n/* harmony export */   phaseAngle3: () => (/* binding */ phaseAngle3),\n/* harmony export */   pluto84: () => (/* binding */ pluto84),\n/* harmony export */   saturn: () => (/* binding */ saturn),\n/* harmony export */   saturn84: () => (/* binding */ saturn84),\n/* harmony export */   uranus: () => (/* binding */ uranus),\n/* harmony export */   uranus84: () => (/* binding */ uranus84),\n/* harmony export */   venus: () => (/* binding */ venus),\n/* harmony export */   venus84: () => (/* binding */ venus84)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module illum\r\n */\r\n/**\r\n * Illum: Chapter 41, Illuminated Fraction of the Disk and Magnitude of a Planet.\r\n *\r\n * Also see functions `illuminated` and `limb` in package base.  While this\r\n * chapter title includes \"illumnated fraction,\" the function for computing\r\n * illuminated fraction given a phase angle is `base.illuminated`.\r\n * `base.limb` is the function mentioned at the bottom of p. 283.0\r\n */\r\n\r\n\r\n\r\nconst { toDeg } = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\r\nconst D2R = Math.PI / 180\r\n\r\n/**\r\n * PhaseAngle computes the phase angle of a planet.\r\n *\r\n * Argument r is planet's distance to Sun, Δ its distance to Earth, and R\r\n * the distance from Sun to Earth.  All distances in AU.\r\n *\r\n * Result in radians.\r\n */\r\nfunction phaseAngle (r, Δ, R) { // (r, Δ, R float64)  float64\r\n  return Math.acos((r * r + Δ * Δ - R * R) / (2 * r * Δ))\r\n}\r\n\r\n/**\r\n * Fraction computes the illuminated fraction of the disk of a planet.\r\n *\r\n * Argument r is planet's distance to Sun, Δ its distance to Earth, and R\r\n * the distance from Sun to Earth.  All distances in AU.\r\n */\r\nfunction fraction (r, Δ, R) { // (r, Δ, R float64)  float64\r\n  // (41.2) p. 283\r\n  const s = r + Δ\r\n  return (s * s - R * R) / (4 * r * Δ)\r\n}\r\n\r\n/**\r\n * PhaseAngle2 computes the phase angle of a planet.\r\n *\r\n * Arguments L, B, R are heliocentric ecliptical coordinates of the planet.\r\n * L0, R0 are longitude and radius for Earth, Δ is distance from Earth to\r\n * the planet.  All distances in AU, angles in radians.\r\n *\r\n * The phase angle result is in radians.\r\n */\r\nfunction phaseAngle2 (L, B, R, L0, R0, Δ) { // (L, B, R, L0, R0, Δ float64)  float64\r\n  // (41.3) p. 283\r\n  return Math.acos((R - R0 * Math.cos(B) * Math.cos(L - L0)) / Δ)\r\n}\r\n\r\n/**\r\n * PhaseAngle3 computes the phase angle of a planet.\r\n *\r\n * Arguments L, B are heliocentric ecliptical longitude and latitude of the\r\n * planet.  x, y, z are cartesian coordinates of the planet, Δ is distance\r\n * from Earth to the planet.  All distances in AU, angles in radians.\r\n *\r\n * The phase angle result is in radians.\r\n */\r\nfunction phaseAngle3 (L, B, x, y, z, Δ) { // (L, B, x, y, z, Δ float64)  float64\r\n  // (41.4) p. 283\r\n  const [sL, cL] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(L)\r\n  const [sB, cB] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(B)\r\n  return Math.acos((x * cB * cL + y * cB * sL + z * sB) / Δ)\r\n}\r\n\r\n/**\r\n * FractionVenus computes an approximation of the illumanted fraction of Venus.\r\n */\r\nfunction fractionVenus (jde) { // (jde float64)  float64\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  const V = (261.51 + 22518.443 * T) * D2R\r\n  const M = (177.53 + 35999.05 * T) * D2R\r\n  const N = (50.42 + 58517.811 * T) * D2R\r\n  const W = V + (1.91 * Math.sin(M) + 0.78 * Math.sin(N)) * D2R\r\n  const Δ = Math.sqrt(1.52321 + 1.44666 * Math.cos(W))\r\n  const s = 0.72333 + Δ\r\n  return (s * s - 1) / 2.89332 / Δ\r\n}\r\n\r\n/**\r\n * Mercury computes the visual magnitude of Mercury.\r\n * Formula by G. Müller\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\r\n * and i the phase angle in radians.\r\n */\r\nfunction mercury (r, Δ, i) { // (r, Δ, i float64)  float64\r\n  const s = toDeg(i) - 50\r\n  return 1.16 + 5 * Math.log10(r * Δ) + (0.02838 + 0.0001023 * s) * s\r\n}\r\n\r\n/**\r\n * Venus computes the visual magnitude of Venus.\r\n * Formula by G. Müller\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\r\n * and i the phase angle in radians.\r\n */\r\nfunction venus (r, Δ, i) { // (r, Δ, i float64)  float64\r\n  const iDeg = toDeg(i)\r\n  return -4 + 5 * Math.log10(r * Δ) + (0.01322 + 0.0000004247 * iDeg * iDeg) * iDeg\r\n}\r\n\r\n/**\r\n * Mars computes the visual magnitude of Mars.\r\n * Formula by G. Müller\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\r\n * and i the phase angle in radians.\r\n */\r\nfunction mars (r, Δ, i) { // (r, Δ, i float64)  float64\r\n  return -1.3 + 5 * Math.log10(r * Δ) + 0.01486 * toDeg(i)\r\n}\r\n\r\n/**\r\n * Jupiter computes the visual magnitude of Jupiter.\r\n * Formula by G. Müller\r\n * Effect of phase not considered\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\r\n */\r\nfunction jupiter (r, Δ) { // (r, Δ float64)  float64\r\n  return -8.93 + 5 * Math.log10(r * Δ)\r\n}\r\n\r\n/**\r\n * Saturn computes the visual magnitude of Saturn.\r\n * Formula by G. Müller\r\n * Sun's altitude above the plane of the ring is not considered.\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\r\n * B is the Saturnicentric latitude of the Earth referred to the plane of\r\n * Saturn's ring.\r\n * ΔU (in radians) is the difference between the Saturnicentric longitudes\r\n * of the Sun and the Earth, measured in the plane of the ring.\r\n * You can use saturndisk.Disk() to obtain B and ΔU.\r\n */\r\nfunction saturn (r, Δ, B, ΔU) { // (r, Δ, B, ΔU float64)  float64\r\n  const s = Math.sin(Math.abs(B))\r\n  return -8.68 + 5 * Math.log10(r * Δ) + 0.044 * Math.abs(toDeg(ΔU)) - 2.6 * s + 1.25 * s * s\r\n}\r\n\r\n/**\r\n * Uranus computes the visual magnitude of Uranus.\r\n * Formula by G. Müller\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\r\n */\r\nfunction uranus (r, Δ) { // (r, Δ float64)  float64\r\n  return -6.85 + 5 * Math.log10(r * Δ)\r\n}\r\n\r\n/**\r\n * Neptune computes the visual magnitude of Neptune.\r\n * Formulae by G. Müller\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\r\n */\r\nfunction neptune (r, Δ) { // (r, Δ float64)  float64\r\n  return -7.05 + 5 * Math.log10(r * Δ)\r\n}\r\n\r\n/**\r\n * Mercury84 computes the visual magnitude of Mercury.\r\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\r\n * and i the phase angle in radians.\r\n */\r\nfunction mercury84 (r, Δ, i) { // (r, Δ, i float64)  float64\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(toDeg(i), -0.42 + 5 * Math.log10(r * Δ),\r\n    0.038, -0.000273, 0.000002)\r\n}\r\n\r\n/**\r\n * Venus84 computes the visual magnitude of Venus.\r\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\r\n * and i the phase angle in radians.\r\n */\r\nfunction venus84 (r, Δ, i) { // (r, Δ, i float64)  float64\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(toDeg(i), -4.4 + 5 * Math.log10(r * Δ),\r\n    0.0009, 0.000239, -0.00000065)\r\n}\r\n\r\n/**\r\n * Mars84 computes the visual magnitude of Mars.\r\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\r\n * and i the phase angle in radians.\r\n */\r\nfunction mars84 (r, Δ, i) { // (r, Δ, i float64)  float64\r\n  return -1.52 + 5 * Math.log10(r * Δ) + 0.016 * toDeg(i)\r\n}\r\n\r\n/**\r\n * Jupiter84 computes the visual magnitude of Jupiter.\r\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth,\r\n * and i the phase angle in radians.\r\n */\r\nfunction jupiter84 (r, Δ, i) { // (r, Δ, i float64)  float64\r\n  return -9.4 + 5 * Math.log10(r * Δ) + 0.005 * toDeg(i)\r\n}\r\n\r\n/**\r\n * Saturn84 computes the visual magnitude of Saturn.\r\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\r\n * B is the Saturnicentric latitude of the Earth referred to the plane of\r\n * Saturn's ring.\r\n * ΔU (in radians) is the difference between the Saturnicentric longitudes\r\n * of the Sun and the Earth, measured in the plane of the ring.\r\n */\r\nfunction saturn84 (r, Δ, B, ΔU) { // (r, Δ, B, ΔU float64)  float64\r\n  const s = Math.sin(Math.abs(B))\r\n  return -8.88 + 5 * Math.log10(r * Δ) + 0.044 * Math.abs(toDeg(ΔU)) - 2.6 * s + 1.25 * s * s\r\n}\r\n\r\n/**\r\n * Uranus84 computes the visual magnitude of Uranus.\r\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\r\n */\r\nfunction uranus84 (r, Δ) { // (r, Δ float64)  float64\r\n  return -7.19 + 5 * Math.log10(r * Δ)\r\n}\r\n\r\n/**\r\n * Neptune84 computes the visual magnitude of Neptune.\r\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\r\n */\r\nfunction neptune84 (r, Δ) { // (r, Δ float64)  float64\r\n  return -6.87 + 5 * Math.log10(r * Δ)\r\n}\r\n\r\n/**\r\n * Pluto84 computes the visual magnitude of Pluto.\r\n * The formula is that adopted in \"Astronomical Almanac\" in 1984.0\r\n *\r\n * Argument r is the planet's distance from the Sun, Δ the distance from Earth.\r\n */\r\nfunction pluto84 (r, Δ) { // (r, Δ float64)  float64\r\n  return -1 + 5 * Math.log10(r * Δ)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  phaseAngle,\r\n  fraction,\r\n  phaseAngle2,\r\n  phaseAngle3,\r\n  fractionVenus,\r\n  mercury,\r\n  venus,\r\n  mars,\r\n  jupiter,\r\n  saturn,\r\n  uranus,\r\n  neptune,\r\n  mercury84,\r\n  venus84,\r\n  mars84,\r\n  jupiter84,\r\n  saturn84,\r\n  uranus84,\r\n  neptune84,\r\n  pluto84\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/illum.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/astronomia/src/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   angle: () => (/* reexport safe */ _angle_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   apparent: () => (/* reexport safe */ _apparent_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   apsis: () => (/* reexport safe */ _apsis_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   base: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   binary: () => (/* reexport safe */ _binary_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   circle: () => (/* reexport safe */ _circle_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   conjunction: () => (/* reexport safe */ _conjunction_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   coord: () => (/* reexport safe */ _coord_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   deltat: () => (/* reexport safe */ _deltat_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   eclipse: () => (/* reexport safe */ _eclipse_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n/* harmony export */   elementequinox: () => (/* reexport safe */ _elementequinox_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   elliptic: () => (/* reexport safe */ _elliptic_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   elp: () => (/* reexport safe */ _elp_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   eqtime: () => (/* reexport safe */ _eqtime_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n/* harmony export */   fit: () => (/* reexport safe */ _fit_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n/* harmony export */   globe: () => (/* reexport safe */ _globe_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"]),\n/* harmony export */   illum: () => (/* reexport safe */ _illum_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]),\n/* harmony export */   interpolation: () => (/* reexport safe */ _interpolation_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"]),\n/* harmony export */   iterate: () => (/* reexport safe */ _iterate_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"]),\n/* harmony export */   jm: () => (/* reexport safe */ _jm_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"]),\n/* harmony export */   julian: () => (/* reexport safe */ _julian_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"]),\n/* harmony export */   jupiter: () => (/* reexport safe */ _jupiter_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"]),\n/* harmony export */   jupitermoons: () => (/* reexport safe */ _jupitermoons_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"]),\n/* harmony export */   kepler: () => (/* reexport safe */ _kepler_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"]),\n/* harmony export */   line: () => (/* reexport safe */ _line_js__WEBPACK_IMPORTED_MODULE_24__[\"default\"]),\n/* harmony export */   mars: () => (/* reexport safe */ _mars_js__WEBPACK_IMPORTED_MODULE_28__[\"default\"]),\n/* harmony export */   moon: () => (/* reexport safe */ _moon_js__WEBPACK_IMPORTED_MODULE_29__[\"default\"]),\n/* harmony export */   moonillum: () => (/* reexport safe */ _moonillum_js__WEBPACK_IMPORTED_MODULE_30__[\"default\"]),\n/* harmony export */   moonmaxdec: () => (/* reexport safe */ _moonmaxdec_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"]),\n/* harmony export */   moonnode: () => (/* reexport safe */ _moonnode_js__WEBPACK_IMPORTED_MODULE_32__[\"default\"]),\n/* harmony export */   moonphase: () => (/* reexport safe */ _moonphase_js__WEBPACK_IMPORTED_MODULE_33__[\"default\"]),\n/* harmony export */   moonposition: () => (/* reexport safe */ _moonposition_js__WEBPACK_IMPORTED_MODULE_34__[\"default\"]),\n/* harmony export */   nearparabolic: () => (/* reexport safe */ _nearparabolic_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"]),\n/* harmony export */   node: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_26__[\"default\"]),\n/* harmony export */   nutation: () => (/* reexport safe */ _nutation_js__WEBPACK_IMPORTED_MODULE_27__[\"default\"]),\n/* harmony export */   parabolic: () => (/* reexport safe */ _parabolic_js__WEBPACK_IMPORTED_MODULE_35__[\"default\"]),\n/* harmony export */   parallactic: () => (/* reexport safe */ _parallactic_js__WEBPACK_IMPORTED_MODULE_37__[\"default\"]),\n/* harmony export */   parallax: () => (/* reexport safe */ _parallax_js__WEBPACK_IMPORTED_MODULE_36__[\"default\"]),\n/* harmony export */   perihelion: () => (/* reexport safe */ _perihelion_js__WEBPACK_IMPORTED_MODULE_38__[\"default\"]),\n/* harmony export */   planetary: () => (/* reexport safe */ _planetary_js__WEBPACK_IMPORTED_MODULE_39__[\"default\"]),\n/* harmony export */   planetelements: () => (/* reexport safe */ _planetelements_js__WEBPACK_IMPORTED_MODULE_41__[\"default\"]),\n/* harmony export */   planetposition: () => (/* reexport safe */ _planetposition_js__WEBPACK_IMPORTED_MODULE_40__[\"default\"]),\n/* harmony export */   pluto: () => (/* reexport safe */ _pluto_js__WEBPACK_IMPORTED_MODULE_42__[\"default\"]),\n/* harmony export */   precess: () => (/* reexport safe */ _precess_js__WEBPACK_IMPORTED_MODULE_43__[\"default\"]),\n/* harmony export */   refraction: () => (/* reexport safe */ _refraction_js__WEBPACK_IMPORTED_MODULE_44__[\"default\"]),\n/* harmony export */   rise: () => (/* reexport safe */ _rise_js__WEBPACK_IMPORTED_MODULE_45__[\"default\"]),\n/* harmony export */   saturnmoons: () => (/* reexport safe */ _saturnmoons_js__WEBPACK_IMPORTED_MODULE_46__[\"default\"]),\n/* harmony export */   saturnring: () => (/* reexport safe */ _saturnring_js__WEBPACK_IMPORTED_MODULE_47__[\"default\"]),\n/* harmony export */   sexagesimal: () => (/* reexport safe */ _sexagesimal_js__WEBPACK_IMPORTED_MODULE_48__[\"default\"]),\n/* harmony export */   sidereal: () => (/* reexport safe */ _sidereal_js__WEBPACK_IMPORTED_MODULE_49__[\"default\"]),\n/* harmony export */   solar: () => (/* reexport safe */ _solar_js__WEBPACK_IMPORTED_MODULE_50__[\"default\"]),\n/* harmony export */   solardisk: () => (/* reexport safe */ _solardisk_js__WEBPACK_IMPORTED_MODULE_51__[\"default\"]),\n/* harmony export */   solarxyz: () => (/* reexport safe */ _solarxyz_js__WEBPACK_IMPORTED_MODULE_52__[\"default\"]),\n/* harmony export */   solstice: () => (/* reexport safe */ _solstice_js__WEBPACK_IMPORTED_MODULE_53__[\"default\"]),\n/* harmony export */   stellar: () => (/* reexport safe */ _stellar_js__WEBPACK_IMPORTED_MODULE_54__[\"default\"]),\n/* harmony export */   sundial: () => (/* reexport safe */ _sundial_js__WEBPACK_IMPORTED_MODULE_55__[\"default\"]),\n/* harmony export */   sunrise: () => (/* reexport safe */ _sunrise_js__WEBPACK_IMPORTED_MODULE_56__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _angle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./angle.js */ \"./node_modules/astronomia/src/angle.js\");\n/* harmony import */ var _apparent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apparent.js */ \"./node_modules/astronomia/src/apparent.js\");\n/* harmony import */ var _apsis_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./apsis.js */ \"./node_modules/astronomia/src/apsis.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _binary_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./binary.js */ \"./node_modules/astronomia/src/binary.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _conjunction_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./conjunction.js */ \"./node_modules/astronomia/src/conjunction.js\");\n/* harmony import */ var _circle_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./circle.js */ \"./node_modules/astronomia/src/circle.js\");\n/* harmony import */ var _deltat_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./deltat.js */ \"./node_modules/astronomia/src/deltat.js\");\n/* harmony import */ var _elementequinox_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./elementequinox.js */ \"./node_modules/astronomia/src/elementequinox.js\");\n/* harmony import */ var _elliptic_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./elliptic.js */ \"./node_modules/astronomia/src/elliptic.js\");\n/* harmony import */ var _eclipse_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./eclipse.js */ \"./node_modules/astronomia/src/eclipse.js\");\n/* harmony import */ var _elp_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./elp.js */ \"./node_modules/astronomia/src/elp.js\");\n/* harmony import */ var _eqtime_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./eqtime.js */ \"./node_modules/astronomia/src/eqtime.js\");\n/* harmony import */ var _fit_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./fit.js */ \"./node_modules/astronomia/src/fit.js\");\n/* harmony import */ var _globe_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./globe.js */ \"./node_modules/astronomia/src/globe.js\");\n/* harmony import */ var _illum_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./illum.js */ \"./node_modules/astronomia/src/illum.js\");\n/* harmony import */ var _interpolation_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./interpolation.js */ \"./node_modules/astronomia/src/interpolation.js\");\n/* harmony import */ var _iterate_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./iterate.js */ \"./node_modules/astronomia/src/iterate.js\");\n/* harmony import */ var _jm_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./jm.js */ \"./node_modules/astronomia/src/jm.js\");\n/* harmony import */ var _julian_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./julian.js */ \"./node_modules/astronomia/src/julian.js\");\n/* harmony import */ var _jupiter_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./jupiter.js */ \"./node_modules/astronomia/src/jupiter.js\");\n/* harmony import */ var _jupitermoons_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./jupitermoons.js */ \"./node_modules/astronomia/src/jupitermoons.js\");\n/* harmony import */ var _kepler_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./kepler.js */ \"./node_modules/astronomia/src/kepler.js\");\n/* harmony import */ var _line_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./line.js */ \"./node_modules/astronomia/src/line.js\");\n/* harmony import */ var _nearparabolic_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./nearparabolic.js */ \"./node_modules/astronomia/src/nearparabolic.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./node.js */ \"./node_modules/astronomia/src/node.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _mars_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./mars.js */ \"./node_modules/astronomia/src/mars.js\");\n/* harmony import */ var _moon_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./moon.js */ \"./node_modules/astronomia/src/moon.js\");\n/* harmony import */ var _moonillum_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./moonillum.js */ \"./node_modules/astronomia/src/moonillum.js\");\n/* harmony import */ var _moonmaxdec_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./moonmaxdec.js */ \"./node_modules/astronomia/src/moonmaxdec.js\");\n/* harmony import */ var _moonnode_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./moonnode.js */ \"./node_modules/astronomia/src/moonnode.js\");\n/* harmony import */ var _moonphase_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./moonphase.js */ \"./node_modules/astronomia/src/moonphase.js\");\n/* harmony import */ var _moonposition_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./moonposition.js */ \"./node_modules/astronomia/src/moonposition.js\");\n/* harmony import */ var _parabolic_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./parabolic.js */ \"./node_modules/astronomia/src/parabolic.js\");\n/* harmony import */ var _parallax_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./parallax.js */ \"./node_modules/astronomia/src/parallax.js\");\n/* harmony import */ var _parallactic_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./parallactic.js */ \"./node_modules/astronomia/src/parallactic.js\");\n/* harmony import */ var _perihelion_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./perihelion.js */ \"./node_modules/astronomia/src/perihelion.js\");\n/* harmony import */ var _planetary_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./planetary.js */ \"./node_modules/astronomia/src/planetary.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/* harmony import */ var _planetelements_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./planetelements.js */ \"./node_modules/astronomia/src/planetelements.js\");\n/* harmony import */ var _pluto_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./pluto.js */ \"./node_modules/astronomia/src/pluto.js\");\n/* harmony import */ var _precess_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./precess.js */ \"./node_modules/astronomia/src/precess.js\");\n/* harmony import */ var _refraction_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./refraction.js */ \"./node_modules/astronomia/src/refraction.js\");\n/* harmony import */ var _rise_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./rise.js */ \"./node_modules/astronomia/src/rise.js\");\n/* harmony import */ var _saturnmoons_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./saturnmoons.js */ \"./node_modules/astronomia/src/saturnmoons.js\");\n/* harmony import */ var _saturnring_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./saturnring.js */ \"./node_modules/astronomia/src/saturnring.js\");\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/* harmony import */ var _sidereal_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./sidereal.js */ \"./node_modules/astronomia/src/sidereal.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/* harmony import */ var _solardisk_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./solardisk.js */ \"./node_modules/astronomia/src/solardisk.js\");\n/* harmony import */ var _solarxyz_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./solarxyz.js */ \"./node_modules/astronomia/src/solarxyz.js\");\n/* harmony import */ var _solstice_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./solstice.js */ \"./node_modules/astronomia/src/solstice.js\");\n/* harmony import */ var _stellar_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./stellar.js */ \"./node_modules/astronomia/src/stellar.js\");\n/* harmony import */ var _sundial_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./sundial.js */ \"./node_modules/astronomia/src/sundial.js\");\n/* harmony import */ var _sunrise_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./sunrise.js */ \"./node_modules/astronomia/src/sunrise.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/index.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/interpolation.js":
/*!******************************************************!*\
  !*** ./node_modules/astronomia/src/interpolation.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Len3: () => (/* binding */ Len3),\n/* harmony export */   Len5: () => (/* binding */ Len5),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   errorExtremumOutside: () => (/* binding */ errorExtremumOutside),\n/* harmony export */   errorNOutOfRange: () => (/* binding */ errorNOutOfRange),\n/* harmony export */   errorNoConverge: () => (/* binding */ errorNoConverge),\n/* harmony export */   errorNoExtremum: () => (/* binding */ errorNoExtremum),\n/* harmony export */   errorNoXRange: () => (/* binding */ errorNoXRange),\n/* harmony export */   errorNot3: () => (/* binding */ errorNot3),\n/* harmony export */   errorNot4: () => (/* binding */ errorNot4),\n/* harmony export */   errorNot5: () => (/* binding */ errorNot5),\n/* harmony export */   errorZeroOutside: () => (/* binding */ errorZeroOutside),\n/* harmony export */   iterate: () => (/* binding */ iterate),\n/* harmony export */   lagrange: () => (/* binding */ lagrange),\n/* harmony export */   lagrangePoly: () => (/* binding */ lagrangePoly),\n/* harmony export */   len3ForInterpolateX: () => (/* binding */ len3ForInterpolateX),\n/* harmony export */   len4Half: () => (/* binding */ len4Half),\n/* harmony export */   linear: () => (/* binding */ linear)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module interpolation\r\n */\r\n/**\r\n * Interp: Chapter 3, Interpolation.\r\n *\r\n * Len3 and Len5 types\r\n *\r\n * These types allow interpolation from a table of equidistant x values\r\n * and corresponding y values.  Since the x values are equidistant,\r\n * only the first and last values are supplied as arguments to the\r\n * constructors.  The interior x values are implicit.  All y values must be\r\n * supplied however.  They are passed as a slice, and the length of y is fixed.\r\n * For Len3 it must be 3 and for (Len5 it must be 5.0\r\n *\r\n * For these Len3 and Len5 functions, Meeus notes the importance of choosing\r\n * the 3 or 5 rows of a larger table that will minimize the interpolating\r\n * factor n.  He does not provide algorithms for doing this however.\r\n *\r\n * For an example of a selection function, see len3ForInterpolateX. This\r\n * was useful for computing Delta T.\r\n */\r\n\r\n\r\nconst int = Math.trunc\r\n\r\n/**\r\n * Error values returned by functions and methods in this package.\r\n * Defined here to help testing for specific errors.\r\n */\r\nconst errorNot3 = new Error('Argument y must be length 3')\r\nconst errorNot4 = new Error('Argument y must be length 4')\r\nconst errorNot5 = new Error('Argument y must be length 5')\r\nconst errorNoXRange = new Error('Argument x3 (or x5) cannot equal x1')\r\nconst errorNOutOfRange = new Error('Interpolating factor n must be in range -1 to 1')\r\nconst errorNoExtremum = new Error('No extremum in table')\r\nconst errorExtremumOutside = new Error('Extremum falls outside of table')\r\nconst errorZeroOutside = new Error('Zero falls outside of table')\r\nconst errorNoConverge = new Error('Failure to converge')\r\n\r\n/**\r\n * Len3 allows second difference interpolation.\r\n */\r\nclass Len3 {\r\n  /**\r\n   * NewLen3 prepares a Len3 object from a table of three rows of x and y values.\r\n   *\r\n   * X values must be equally spaced, so only the first and last are supplied.\r\n   * X1 must not equal to x3.  Y must be a slice of three y values.\r\n   *\r\n   * @throws Error\r\n   * @param {Number} x1 - is the x value corresponding to the first y value of the table.\r\n   * @param {Number} x3 - is the x value corresponding to the last y value of the table.\r\n   * @param {Number[]} y - is all y values in the table. y.length should be >= 3.0\r\n   */\r\n  constructor (x1, x3, y) {\r\n    if (y.length !== 3) {\r\n      throw errorNot3\r\n    }\r\n    if (x3 === x1) {\r\n      throw errorNoXRange\r\n    }\r\n    this.x1 = x1\r\n    this.x3 = x3\r\n    this.y = y\r\n    // differences. (3.1) p. 23\r\n    this.a = y[1] - y[0]\r\n    this.b = y[2] - y[1]\r\n    this.c = this.b - this.a\r\n    // other intermediate values\r\n    this.abSum = this.a + this.b\r\n    this.xSum = x3 + x1\r\n    this.xDiff = x3 - x1\r\n  }\r\n\r\n  /**\r\n   * InterpolateX interpolates for a given x value.\r\n   */\r\n  interpolateX (x) {\r\n    const n = (2 * x - this.xSum) / this.xDiff\r\n    return this.interpolateN(n)\r\n  }\r\n\r\n  /**\r\n   * InterpolateXStrict interpolates for a given x value,\r\n   * restricting x to the range x1 to x3 given to the constructor NewLen3.\r\n   */\r\n  interpolateXStrict (x) {\r\n    const n = (2 * x - this.xSum) / this.xDiff\r\n    const y = this.interpolateNStrict(n)\r\n    return y\r\n  }\r\n\r\n  /**\r\n   * InterpolateN interpolates for (a given interpolating factor n.\r\n   *\r\n   * This is interpolation formula (3.3)\r\n   *\r\n   * @param n - The interpolation factor n is x-x2 in units of the tabular x interval.\r\n   * (See Meeus p. 24.)\r\n   * @return {number} interpolation value\r\n   */\r\n  interpolateN (n) {\r\n    return this.y[1] + n * 0.5 * (this.abSum + n * this.c)\r\n  }\r\n\r\n  /**\r\n   * InterpolateNStrict interpolates for (a given interpolating factor n.\r\n   *\r\n   * @param {number} n - n is restricted to the range [-1..1] corresponding to the range x1 to x3\r\n   * given to the constructor of Len3.\r\n   * @return {number} interpolation value\r\n   */\r\n  interpolateNStrict (n) {\r\n    if (n < -1 || n > 1) {\r\n      throw errorNOutOfRange\r\n    }\r\n    return this.interpolateN(n)\r\n  }\r\n\r\n  /**\r\n   * Extremum returns the x and y values at the extremum.\r\n   *\r\n   * Results are restricted to the range of the table given to the constructor\r\n   * new Len3.\r\n   */\r\n  extremum () {\r\n    if (this.c === 0) {\r\n      throw errorNoExtremum\r\n    }\r\n    const n = this.abSum / (-2 * this.c) // (3.5), p. 25\r\n    if (n < -1 || n > 1) {\r\n      throw errorExtremumOutside\r\n    }\r\n    const x = 0.5 * (this.xSum + this.xDiff * n)\r\n    const y = this.y[1] - (this.abSum * this.abSum) / (8 * this.c) // (3.4), p. 25\r\n    return [x, y]\r\n  }\r\n\r\n  /**\r\n   * Len3Zero finds a zero of the quadratic function represented by the table.\r\n   *\r\n   * That is, it returns an x value that yields y=0.\r\n   *\r\n   * Argument strong switches between two strategies for the estimation step.\r\n   * when iterating to converge on the zero.\r\n   *\r\n   * Strong=false specifies a quick and dirty estimate that works well\r\n   * for gentle curves, but can work poorly or fail on more dramatic curves.\r\n   *\r\n   * Strong=true specifies a more sophisticated and thus somewhat more\r\n   * expensive estimate.  However, if the curve has quick changes, This estimate\r\n   * will converge more reliably and in fewer steps, making it a better choice.\r\n   *\r\n   * Results are restricted to the range of the table given to the constructor\r\n   * NewLen3.\r\n   */\r\n  zero (strong) {\r\n    let f\r\n    if (strong) {\r\n      // (3.7), p. 27\r\n      f = (n0) => {\r\n        return n0 - (2 * this.y[1] + n0 * (this.abSum + this.c * n0)) /\r\n        (this.abSum + 2 * this.c * n0)\r\n      }\r\n    } else {\r\n      // (3.6), p. 26\r\n      f = (n0) => {\r\n        return -2 * this.y[1] / (this.abSum + this.c * n0)\r\n      }\r\n    }\r\n    const [n0, ok] = iterate(0, f)\r\n    if (!ok) {\r\n      throw errorNoConverge\r\n    }\r\n    if (n0 > 1 || n0 < -1) {\r\n      throw errorZeroOutside\r\n    }\r\n    return 0.5 * (this.xSum + this.xDiff * n0) // success\r\n  }\r\n}\r\n\r\n/**\r\n * Len3ForInterpolateX is a special purpose Len3 constructor.\r\n *\r\n * Like NewLen3, it takes a table of x and y values, but it is not limited\r\n * to tables of 3 rows.  An X value is also passed that represents the\r\n * interpolation target x value.  Len3ForInterpolateX will locate the\r\n * appropriate three rows of the table for interpolating for x, and initialize\r\n * the Len3 object for those rows.\r\n *\r\n * @param {Number} x - is the target for interpolation\r\n * @param {Number} x1 - is the x value corresponding to the first y value of the table.\r\n * @param {Number} xN - is the x value corresponding to the last y value of the table.\r\n * @param {Number[]} y - is all y values in the table.  y.length should be >= 3.0\r\n * @returns {Len3} interpolation value\r\n */\r\nfunction len3ForInterpolateX (x, x1, xN, y) {\r\n  let y3 = y\r\n  if (y.length > 3) {\r\n    const interval = (xN - x1) / (y.length - 1)\r\n    if (interval === 0) {\r\n      throw errorNoXRange\r\n    }\r\n    let nearestX = int((x - x1) / interval + 0.5)\r\n    if (nearestX < 1) {\r\n      nearestX = 1\r\n    } else if (nearestX > y.length - 2) {\r\n      nearestX = y.length - 2\r\n    }\r\n    y3 = y.slice(nearestX - 1, nearestX + 2)\r\n    xN = x1 + (nearestX + 1) * interval\r\n    x1 = x1 + (nearestX - 1) * interval\r\n  }\r\n  return new Len3(x1, xN, y3)\r\n}\r\n\r\n/**\r\n * @private\r\n * @param {Number} n0\r\n * @param {Function} f\r\n * @returns {Array}\r\n *   {Number} n1\r\n *   {Boolean} ok - if `false` failure to converge\r\n */\r\nconst iterate = function (n0, f) {\r\n  for (let limit = 0; limit < 50; limit++) {\r\n    const n1 = f(n0)\r\n    if (!isFinite(n1) || isNaN(n1)) {\r\n      break // failure to converge\r\n    }\r\n    if (Math.abs((n1 - n0) / n0) < 1e-15) {\r\n      return [n1, true] // success\r\n    }\r\n    n0 = n1\r\n  }\r\n  return [0, false] // failure to converge\r\n}\r\n\r\n/**\r\n * Len4Half interpolates a center value from a table of four rows.\r\n * @param {Number[]} y - 4 values\r\n * @returns {Number} interpolation result\r\n */\r\nfunction len4Half (y) {\r\n  if (y.length !== 4) {\r\n    throw errorNot4\r\n  }\r\n  // (3.12) p. 32\r\n  return (9 * (y[1] + y[2]) - y[0] - y[3]) / 16\r\n}\r\n\r\n/**\r\n * Len5 allows fourth Difference interpolation.\r\n */\r\nclass Len5 {\r\n  /**\r\n   * NewLen5 prepares a Len5 object from a table of five rows of x and y values.\r\n   *\r\n   * X values must be equally spaced, so only the first and last are suppliethis.\r\n   * X1 must not equal x5.  Y must be a slice of five y values.\r\n   */\r\n  constructor (x1, x5, y) {\r\n    if (y.length !== 5) {\r\n      throw errorNot5\r\n    }\r\n    if (x5 === x1) {\r\n      throw errorNoXRange\r\n    }\r\n    this.x1 = x1\r\n    this.x5 = x5\r\n    this.y = y\r\n    this.y3 = y[2]\r\n    // differences\r\n    this.a = y[1] - y[0]\r\n    this.b = y[2] - y[1]\r\n    this.c = y[3] - y[2]\r\n    this.d = y[4] - y[3]\r\n\r\n    this.e = this.b - this.a\r\n    this.f = this.c - this.b\r\n    this.g = this.d - this.c\r\n\r\n    this.h = this.f - this.e\r\n    this.j = this.g - this.f\r\n\r\n    this.k = this.j - this.h\r\n    // other intermediate values\r\n    this.xSum = x5 + x1\r\n    this.xDiff = x5 - x1\r\n    this.interpCoeff = [ // (3.8) p. 28\r\n      this.y3,\r\n      (this.b + this.c) / 2 - (this.h + this.j) / 12,\r\n      this.f / 2 - this.k / 24,\r\n      (this.h + this.j) / 12,\r\n      this.k / 24\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * InterpolateX interpolates for (a given x value.\r\n   */\r\n  interpolateX (x) {\r\n    const n = (4 * x - 2 * this.xSum) / this.xDiff\r\n    return this.interpolateN(n)\r\n  }\r\n\r\n  /**\r\n   * InterpolateXStrict interpolates for a given x value,\r\n   * restricting x to the range x1 to x5 given to the the constructor NewLen5.\r\n   */\r\n  interpolateXStrict (x) {\r\n    const n = (4 * x - 2 * this.xSum) / this.xDiff\r\n    const y = this.interpolateNStrict(n)\r\n    return y\r\n  }\r\n\r\n  /**\r\n   * InterpolateN interpolates for (a given interpolating factor n.\r\n   *\r\n   * The interpolation factor n is x-x3 in units of the tabular x interval.\r\n   * (See Meeus p. 28.)\r\n   */\r\n  interpolateN (n) {\r\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(n, ...this.interpCoeff)\r\n  }\r\n\r\n  /**\r\n   * InterpolateNStrict interpolates for (a given interpolating factor n.\r\n   *\r\n   * N is restricted to the range [-1..1].  This is only half the range given\r\n   * to the constructor NewLen5, but is the recommendation given on p. 31.0\r\n   */\r\n  interpolateNStrict (n) {\r\n    if (n < -1 || n > 1) {\r\n      throw errorNOutOfRange\r\n    }\r\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(n, ...this.interpCoeff)\r\n  }\r\n\r\n  /**\r\n   * Extremum returns the x and y values at the extremum.\r\n   *\r\n   * Results are restricted to the range of the table given to the constructor\r\n   * NewLen5.  (Meeus actually recommends restricting the range to one unit of\r\n   * the tabular interval, but that seems a little harsh.)\r\n   */\r\n  extremum () {\r\n    // (3.9) p. 29\r\n    const nCoeff = [\r\n      6 * (this.b + this.c) - this.h - this.j,\r\n      0,\r\n      3 * (this.h + this.j),\r\n      2 * this.k\r\n    ]\r\n    const den = this.k - 12 * this.f\r\n    if (den === 0) {\r\n      throw errorExtremumOutside\r\n    }\r\n    const [n0, ok] = iterate(0, function (n0) {\r\n      return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(n0, ...nCoeff) / den\r\n    })\r\n    if (!ok) {\r\n      throw errorNoConverge\r\n    }\r\n    if (n0 < -2 || n0 > 2) {\r\n      throw errorExtremumOutside\r\n    }\r\n    const x = 0.5 * this.xSum + 0.25 * this.xDiff * n0\r\n    const y = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(n0, ...this.interpCoeff)\r\n    return [x, y]\r\n  }\r\n\r\n  /**\r\n   * Len5Zero finds a zero of the quartic function represented by the table.\r\n   *\r\n   * That is, it returns an x value that yields y=0.\r\n   *\r\n   * Argument strong switches between two strategies for the estimation step.\r\n   * when iterating to converge on the zero.\r\n   *\r\n   * Strong=false specifies a quick and dirty estimate that works well\r\n   * for gentle curves, but can work poorly or fail on more dramatic curves.\r\n   *\r\n   * Strong=true specifies a more sophisticated and thus somewhat more\r\n   * expensive estimate.  However, if the curve has quick changes, This estimate\r\n   * will converge more reliably and in fewer steps, making it a better choice.\r\n   *\r\n   * Results are restricted to the range of the table given to the constructor\r\n   * NewLen5.\r\n   */\r\n  zero (strong) {\r\n    let f\r\n    if (strong) {\r\n      // (3.11), p. 29\r\n      const M = this.k / 24\r\n      const N = (this.h + this.j) / 12\r\n      const P = this.f / 2 - M\r\n      const Q = (this.b + this.c) / 2 - N\r\n      const numCoeff = [this.y3, Q, P, N, M]\r\n      const denCoeff = [Q, 2 * P, 3 * N, 4 * M]\r\n      f = function (n0) {\r\n        return n0 -\r\n          _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(n0, ...numCoeff) / _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(n0, ...denCoeff)\r\n      }\r\n    } else {\r\n      // (3.10), p. 29\r\n      const numCoeff = [\r\n        -24 * this.y3,\r\n        0,\r\n        this.k - 12 * this.f,\r\n        -2 * (this.h + this.j),\r\n        -this.k\r\n      ]\r\n      const den = 12 * (this.b + this.c) - 2 * (this.h + this.j)\r\n      f = function (n0) {\r\n        return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(n0, ...numCoeff) / den\r\n      }\r\n    }\r\n    const [n0, ok] = iterate(0, f)\r\n    if (!ok) {\r\n      throw errorNoConverge\r\n    }\r\n    if (n0 > 2 || n0 < -2) {\r\n      throw errorZeroOutside\r\n    }\r\n    const x = 0.5 * this.xSum + 0.25 * this.xDiff * n0\r\n    return x\r\n  }\r\n}\r\n\r\n/**\r\n * Lagrange performs interpolation with unequally-spaced abscissae.\r\n *\r\n * Given a table of X and Y values, interpolate a new y value for argument x.\r\n *\r\n * X values in the table do not have to be equally spaced; they do not even\r\n * have to be in order. They must however, be distinct.\r\n *\r\n * @param {Number} x - x-value of interpolation\r\n * @param {Array} table - `[[x0, y0], ... [xN, yN]]` of x, y values\r\n * @returns {Number} interpolation result `y` of `x`\r\n */\r\nfunction lagrange (x, table) {\r\n  // method of BASIC program, p. 33.0\r\n  let sum = 0\r\n  table.forEach((ti, i) => {\r\n    const xi = ti[0]\r\n    let prod = 1.0\r\n    table.forEach((tj, j) => {\r\n      if (i !== j) {\r\n        const xj = tj[0]\r\n        prod *= (x - xj) / (xi - xj)\r\n      }\r\n    })\r\n    sum += ti[1] * prod\r\n  })\r\n  return sum\r\n}\r\n\r\n/**\r\n * LagrangePoly uses the formula of Lagrange to produce an interpolating\r\n * polynomial.\r\n *\r\n * X values in the table do not have to be equally spaced; they do not even\r\n * have to be in order.  They must however, be distinct.\r\n *\r\n * The returned polynomial will be of degree n-1 where n is the number of rows\r\n * in the table.  It can be evaluated for x using base.horner.\r\n *\r\n * @param {Array} table - `[[x0, y0], ... [xN, yN]]`\r\n * @returns {Array} - polynomial array\r\n */\r\nfunction lagrangePoly (table) {\r\n  // Method not fully described by Meeus, but needed for (numerical solution\r\n  // to Example 3.g.\r\n  const sum = new Array(table.length).fill(0)\r\n  const prod = new Array(table.length).fill(0)\r\n  const last = table.length - 1\r\n  for (let i = 0; i < table.length; i++) {\r\n    const xi = table[i][0] || table[i].x || 0\r\n    const yi = table[i][1] || table[i].y || 0\r\n    prod[last] = 1\r\n    let den = 1.0\r\n    let n = last\r\n    for (let j = 0; j < table.length; j++) {\r\n      if (i !== j) {\r\n        const xj = table[j][0] || table[j].x || 0\r\n        prod[n - 1] = prod[n] * -xj\r\n        for (let k = n; k < last; k++) {\r\n          prod[k] -= prod[k + 1] * xj\r\n        }\r\n        n--\r\n        den *= (xi - xj)\r\n      }\r\n    }\r\n    prod.forEach((pj, j) => {\r\n      sum[j] += yi * pj / den\r\n    })\r\n  }\r\n  return sum\r\n}\r\n\r\n/**\r\n * Linear Interpolation of x\r\n */\r\nfunction linear (x, x1, xN, y) {\r\n  const interval = (xN - x1) / (y.length - 1)\r\n  if (interval === 0) {\r\n    throw errorNoXRange\r\n  }\r\n  let nearestX = Math.floor((x - x1) / interval)\r\n  if (nearestX < 0) {\r\n    nearestX = 0\r\n  } else if (nearestX > y.length - 2) {\r\n    nearestX = y.length - 2\r\n  }\r\n  const y2 = y.slice(nearestX, nearestX + 2)\r\n  const x01 = x1 + nearestX * interval\r\n  return y2[0] + (y[1] - y[0]) * (x - x01) / interval\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  errorNot3,\r\n  errorNot4,\r\n  errorNot5,\r\n  errorNoXRange,\r\n  errorNOutOfRange,\r\n  errorNoExtremum,\r\n  errorExtremumOutside,\r\n  errorZeroOutside,\r\n  errorNoConverge,\r\n  Len3,\r\n  len3ForInterpolateX,\r\n  iterate,\r\n  len4Half,\r\n  Len5,\r\n  lagrange,\r\n  lagrangePoly,\r\n  linear\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/interpolation.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/iterate.js":
/*!************************************************!*\
  !*** ./node_modules/astronomia/src/iterate.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   binaryRoot: () => (/* binding */ binaryRoot),\n/* harmony export */   decimalPlaces: () => (/* binding */ decimalPlaces),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fullPrecision: () => (/* binding */ fullPrecision)\n/* harmony export */ });\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module iterate\r\n */\r\n/**\r\n * Iterate: Chapter 5, Iteration.\r\n *\r\n * This package is best considered illustrative.  While the functions are\r\n * usable, they are minimal in showing the points of the chapter text.  More\r\n * robust functions would handle more cases of overflow, loss of precision,\r\n * and divergence.\r\n */\r\n\r\n/**\r\n * decimalPlaces iterates to a fixed number of decimal places.\r\n *\r\n * Inputs are an improvement function, a starting value, the number of\r\n * decimal places desired in the result, and an iteration limit.\r\n *\r\n * @throws Error\r\n * @param {Function} better\r\n * @param {Number} start - (float)\r\n * @param {Number} places - (int)\r\n * @param {Number} maxIterations - (int)\r\n * @returns {Number}\r\n */\r\nfunction decimalPlaces (better, start, places, maxIterations) {\r\n  const d = Math.pow(10, -places)\r\n  for (let i = 0; i < maxIterations; i++) {\r\n    const n = better(start)\r\n    if (Math.abs(n - start) < d) {\r\n      return n\r\n    }\r\n    start = n\r\n  }\r\n  throw new Error('Maximum iterations reached')\r\n}\r\n\r\n/**\r\n * fullPrecison iterates to (nearly) the full precision of a float64.\r\n *\r\n * To allow for a little bit of floating point jitter, FullPrecision iterates\r\n * to 15 significant figures, which is the maximum number of full significant\r\n * figures representable in a float64, but still a couple of bits shy of the\r\n * full representable precision.\r\n *\r\n * @throws Error\r\n * @param {Function} better\r\n * @param {Number} start - (float)\r\n * @param {Number} maxIterations - (int)\r\n * @returns {Number}\r\n */\r\nfunction fullPrecision (better, start, maxIterations) {\r\n  for (let i = 0; i < maxIterations; i++) {\r\n    const n = better(start)\r\n    if (Math.abs((n - start) / n) < 1e-15) {\r\n      return n\r\n    }\r\n    start = n\r\n  }\r\n  throw new Error('Maximum iterations reached')\r\n}\r\n\r\n/**\r\n * binaryRoot finds a root between given bounds by binary search.\r\n *\r\n * Inputs are a function on x and the bounds on x.  A root must exist between\r\n * the given bounds, otherwise the result is not meaningful.\r\n *\r\n * @param {Function} f - root function\r\n * @param {Number} lower - (float)\r\n * @param {Number} upper - (float)\r\n * @returns {Number}\r\n */\r\nfunction binaryRoot (f, lower, upper) {\r\n  let yLower = f(lower)\r\n  let mid = 0\r\n  for (let j = 0; j < 52; j++) {\r\n    mid = (lower + upper) / 2\r\n    const yMid = f(mid)\r\n    if (yMid === 0) {\r\n      break\r\n    }\r\n    if (signbit(yLower) === signbit(yMid)) {\r\n      lower = mid\r\n      yLower = yMid\r\n    } else {\r\n      upper = mid\r\n    }\r\n  }\r\n  return mid\r\n}\r\n\r\nfunction signbit (v) {\r\n  return (v < 0)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  decimalPlaces,\r\n  fullPrecision,\r\n  binaryRoot\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/iterate.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/jm.js":
/*!*******************************************!*\
  !*** ./node_modules/astronomia/src/jm.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JewishCalendar: () => (/* binding */ JewishCalendar),\n/* harmony export */   JulianToMoslem: () => (/* binding */ JulianToMoslem),\n/* harmony export */   MoslemLeapYear: () => (/* binding */ MoslemLeapYear),\n/* harmony export */   MoslemToJD: () => (/* binding */ MoslemToJD),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   moslemMonth: () => (/* binding */ moslemMonth)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _julian_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./julian.js */ \"./node_modules/astronomia/src/julian.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module jm\r\n */\r\n/**\r\n * JM: Chapter 9, Jewish and Moslem Calendars.\r\n *\r\n * The Jewish calendar routines are implemented as a monolithic function,\r\n * because computations of the various results build off of common\r\n * intermediate results.\r\n *\r\n * The Moslem calendar routines break down nicely into some separate functions.\r\n *\r\n * Included in these are two functions that convert between Gregorian and\r\n * Julian calendar days without going through Julian day (JD).  As such,\r\n * I suppose, these or similar routines are not in chapter 7, Julian Day.\r\n * Package base might also be a suitable place for these, but I'm not sure\r\n * they are used anywhere else in the book.  Anyway, they have the quirk\r\n * that they are not direct inverses:  JulianToGregorian returns the day number\r\n * of the day of the Gregorian year, but GregorianToJulian wants the Gregorian\r\n * month and day of month as input.\r\n */\r\n\r\n\r\n\r\n\r\nconst int = Math.trunc\r\n\r\n/**\r\n * JewishCalendar returns interesting dates and facts about a given year.\r\n *\r\n * Input is a Julian or Gregorian year.\r\n *\r\n * Outputs:\r\n *  A:      (int) Year number in the Jewish Calendar\r\n *  mP:     (int) Month number of Pesach.\r\n *  dP:     (int) Day number of Pesach.\r\n *  mNY:    (int) Month number of the Jewish new year.\r\n *  dNY:    (int) Day number of the Jewish new year.\r\n *  months: (int) Number of months in this year.\r\n *  days:   (int) Number of days in this year.\r\n */\r\nfunction JewishCalendar (y) {\r\n  const A = y + 3760\r\n  const D = bigD(y)\r\n  let mP = 3\r\n  let dP = D\r\n  if (dP > 31) {\r\n    mP++\r\n    dP -= 31\r\n  }\r\n  // A simplification of Meeus's rule to add 163 days.  Months of Pesach\r\n  // are either March or April with D based off of March.  Months of New\r\n  // year are either September or August so D+163-(days from March to\r\n  // September == 184) = D-21 must be based off of September.\r\n  let mNY = 9\r\n  let dNY = D - 21\r\n  if (dNY > 30) {\r\n    mNY++\r\n    dNY -= 30\r\n  }\r\n  let months = 12\r\n  switch (A % 19) {\r\n    case 0:\r\n    case 3:\r\n    case 6:\r\n    case 8:\r\n    case 11:\r\n    case 14:\r\n    case 17:\r\n      months++\r\n      break\r\n  }\r\n  // Similarly, A simplification of Meeus's rule to take the difference\r\n  // in calendar days from NY of one year to NY of the next.  NY is based\r\n  // on D, so difference in D is difference in day numbers of year.  Result\r\n  // is sum of this number and the number of days in the Western calandar\r\n  // year.\r\n  const y1 = y + 1\r\n  let lf = _julian_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].LeapYearGregorian\r\n  if (y1 < 1583) {\r\n    lf = _julian_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].LeapYearJulian\r\n  }\r\n  let days = 365\r\n  if (lf(y1)) {\r\n    days++\r\n  }\r\n  days += bigD(y1) - D\r\n  return [A, mP, dP, mNY, dNY, months, days]\r\n}\r\n\r\nconst bigD = function (y) { // (y int)  int\r\n  const C = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(y, 100)\r\n  // const S int\r\n  let S = 0\r\n  if (y >= 1583) {\r\n    S = int(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(3 * C - 5, 4))\r\n  }\r\n  const a = (12 * y + 12) % 19\r\n  const b = y % 4\r\n  const Q = -1.904412361576 + 1.554241796621 * (a) + 0.25 * (b) -\r\n    0.003177794022 * (y) + (S)\r\n  const fq = Math.floor(Q)\r\n  const iq = int(fq)\r\n  const j = (iq + 3 * y + 5 * b + 2 - S) % 7\r\n  const r = Q - fq\r\n  // const D int\r\n  let D\r\n  if (j === 2 || j === 4 || j === 6) {\r\n    D = iq + 23\r\n  } else if (j === 1 && a > 6 && r >= 0.63287037) {\r\n    D = iq + 24\r\n  } else if (j === 0 && a > 11 && r >= 0.897723765) {\r\n    D = iq + 23\r\n  } else {\r\n    D = iq + 22\r\n  }\r\n  return int(D)\r\n}\r\n\r\n/**\r\n * MoslemToJD converts a Moslem calendar date to a Julian Day.\r\n * @param {Number} y - year in moslem calendar\r\n * @param {Number} m - month\r\n * @param {Number} d - day\r\n * @returns {Number} jd - Julian day\r\n */\r\nfunction MoslemToJD (y, m, d) { // (y, m, d int)  (jY, jDN int)\r\n  const N = d + _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(295001 * (m - 1) + 9900, 10000)\r\n  const Q = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(y, 30)\r\n  const R = y % 30\r\n  const A = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(11 * R + 3, 30)\r\n  const W = 404 * Q + 354 * R + 208 + A\r\n  const Q1 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(W, 1461)\r\n  const Q2 = W % 1461\r\n  const G = 621 + 28 * Q + 4 * Q1\r\n  const K = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(Q2 * 10000, 3652422)\r\n  const E = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(3652422 * K, 10000)\r\n  let J = Q2 - E + N - 1\r\n  let X = G + K\r\n  if (J > 366 && X % 4 === 0) {\r\n    J -= 366\r\n    X++\r\n  } else if (J > 365 && X % 4 > 0) {\r\n    J -= 365\r\n    X++\r\n  }\r\n  const jd = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(36525 * (X - 1), 100) + 1721423 + J\r\n  return jd\r\n}\r\n\r\n/**\r\n * MoslemLeapYear returns true if year y of the Moslem calendar is a leap year.\r\n * @param {Number} year\r\n * @returns {Boolean} true if leap year\r\n */\r\nfunction MoslemLeapYear (year) { // (y int)  bool\r\n  const R = year % 30\r\n  return (11 * R + 3) % 30 > 18\r\n}\r\n\r\n/**\r\n * @typedef {object} DateObj\r\n * @property {number} year\r\n * @property {number} month\r\n * @property {number} day\r\n */\r\n\r\n/**\r\n * JulianToMoslem takes a year, month, and day of the Julian calendar and returns the equivalent year, month, and day of the Moslem calendar.\r\n *\r\n * @param {Number} y - julian year\r\n * @param {Number} m - julian month\r\n * @param {Number} d - julian day\r\n * @returns {DateObj}\r\n */\r\nfunction JulianToMoslem (y, m, d) { // (y, m, d int)  (my, mm, md int)\r\n  let W = 2\r\n  if (y % 4 === 0) {\r\n    W = 1\r\n  }\r\n  const N = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(275 * m, 9) - W * _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(m + 9, 12) + d - 30\r\n  const A = int(y - 623)\r\n  const B = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(A, 4)\r\n  const C2 = (function (A) {\r\n    const C = A % 4\r\n    const C1 = 365.25001 * (C)\r\n    const C2 = Math.floor(C1)\r\n    if (C1 - C2 > 0.5) {\r\n      return int(C2) + 1\r\n    }\r\n    return int(C2)\r\n  })(A)\r\n  const Dp = 1461 * B + 170 + C2\r\n  const Q = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(Dp, 10631)\r\n  const R = Dp % 10631\r\n  const J = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(R, 354)\r\n  const K = R % 354\r\n  const O = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(11 * J + 14, 30)\r\n  let my = 30 * Q + J + 1\r\n  let JJ = K - O + N - 1\r\n  let days = 354\r\n  if (MoslemLeapYear(y)) {\r\n    days++\r\n  }\r\n  if (JJ > days) {\r\n    JJ -= days\r\n    my++\r\n  }\r\n  let mm\r\n  let md\r\n  if (JJ === 355) {\r\n    mm = 12\r\n    md = 30\r\n  } else {\r\n    const S = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv((JJ - 1) * 10, 295)\r\n    mm = 1 + S\r\n    md = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(10 * JJ - 295 * S, 10)\r\n  }\r\n  return { year: my, month: mm, day: md }\r\n}\r\n\r\n/**\r\n * An MMonth specifies a month of the Moslum Calendar (Muharram = 1, ...).\r\n *\r\n * Upgraded to Unicode from the spellings given by Meeus.\r\n * Source: http://en.wikipedia.org/wiki/Islamic_calendar.\r\n */\r\nconst mmonths = [\r\n  '',\r\n  'Muḥarram',\r\n  'Ṣafar',\r\n  'Rabīʿ I',\r\n  'Rabīʿ II',\r\n  'Jumādā I',\r\n  'Jumādā II',\r\n  'Rajab',\r\n  'Shaʿbān',\r\n  'Ramaḍān',\r\n  'Shawwāl',\r\n  'Dhū al-Qaʿda',\r\n  'Dhū al-Ḥijja'\r\n]\r\n\r\n/**\r\n * String returns the Romanization of the month (\"Muḥarram\", \"Ṣafar\", ...).\r\n */\r\nfunction moslemMonth (m) {\r\n  return mmonths[m]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  JewishCalendar,\r\n  MoslemToJD,\r\n  MoslemLeapYear,\r\n  JulianToMoslem,\r\n  moslemMonth\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/jm.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/julian.js":
/*!***********************************************!*\
  !*** ./node_modules/astronomia/src/julian.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Calendar: () => (/* binding */ Calendar),\n/* harmony export */   CalendarGregorian: () => (/* binding */ CalendarGregorian),\n/* harmony export */   CalendarGregorianToJD: () => (/* binding */ CalendarGregorianToJD),\n/* harmony export */   CalendarJulian: () => (/* binding */ CalendarJulian),\n/* harmony export */   CalendarJulianToJD: () => (/* binding */ CalendarJulianToJD),\n/* harmony export */   CalendarToJD: () => (/* binding */ CalendarToJD),\n/* harmony export */   DateToJD: () => (/* binding */ DateToJD),\n/* harmony export */   DateToJDE: () => (/* binding */ DateToJDE),\n/* harmony export */   DayOfWeek: () => (/* binding */ DayOfWeek),\n/* harmony export */   DayOfYear: () => (/* binding */ DayOfYear),\n/* harmony export */   DayOfYearGregorian: () => (/* binding */ DayOfYearGregorian),\n/* harmony export */   DayOfYearJulian: () => (/* binding */ DayOfYearJulian),\n/* harmony export */   DayOfYearToCalendar: () => (/* binding */ DayOfYearToCalendar),\n/* harmony export */   DayOfYearToCalendarGregorian: () => (/* binding */ DayOfYearToCalendarGregorian),\n/* harmony export */   DayOfYearToCalendarJulian: () => (/* binding */ DayOfYearToCalendarJulian),\n/* harmony export */   GREGORIAN0JD: () => (/* binding */ GREGORIAN0JD),\n/* harmony export */   JDEToDate: () => (/* binding */ JDEToDate),\n/* harmony export */   JDToCalendar: () => (/* binding */ JDToCalendar),\n/* harmony export */   JDToCalendarGregorian: () => (/* binding */ JDToCalendarGregorian),\n/* harmony export */   JDToCalendarJulian: () => (/* binding */ JDToCalendarJulian),\n/* harmony export */   JDToDate: () => (/* binding */ JDToDate),\n/* harmony export */   JDToMJD: () => (/* binding */ JDToMJD),\n/* harmony export */   LeapYearGregorian: () => (/* binding */ LeapYearGregorian),\n/* harmony export */   LeapYearJulian: () => (/* binding */ LeapYearJulian),\n/* harmony export */   MJDToJD: () => (/* binding */ MJDToJD),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isCalendarGregorian: () => (/* binding */ isCalendarGregorian),\n/* harmony export */   isJDCalendarGregorian: () => (/* binding */ isJDCalendarGregorian)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/* harmony import */ var _deltat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./deltat.js */ \"./node_modules/astronomia/src/deltat.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module julian\r\n */\r\n/**\r\n * Julian: Chapter 7, Julian day.\r\n */\r\n\r\n\r\n\r\n\r\n\r\nconst int = Math.trunc\r\n\r\n/** 1582-10-05 Julian Date is 1st Gregorian Date (1582-10-15) */\r\nconst GREGORIAN0JD = 2299160.5\r\n\r\nconst DAYS_OF_YEAR = [0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]\r\nconst SECS_OF_DAY = 86400 // 24 * 60 * 60\r\n\r\n/**\r\n * Base class for CalendarJulian and CalendarGregorian\r\n * Respects the start of the Gregorian Calendar at `GREGORIAN0JD`\r\n */\r\nclass Calendar {\r\n  /**\r\n   * @param {number|Date} [year] - If `Date` is given then year, month, day is taken from that. Shortcut to `new Calendar().fromDate(date)`\r\n   * @param {number} [month]\r\n   * @param {number} [day]\r\n   */\r\n  constructor (year, month = 1, day = 1) {\r\n    if (year instanceof Date) {\r\n      this.fromDate(year)\r\n    } else {\r\n      this.year = year\r\n      this.month = month\r\n      this.day = day\r\n    }\r\n  }\r\n\r\n  getDate () {\r\n    return {\r\n      year: this.year,\r\n      month: this.month,\r\n      day: Math.floor(this.day)\r\n    }\r\n  }\r\n\r\n  getTime () {\r\n    const t = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Time(this.day * SECS_OF_DAY)\r\n    const [neg, h, m, _s] = t.toHMS() // eslint-disable-line no-unused-vars\r\n    let [s, ms] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(_s)\r\n    ms = Math.trunc(ms * 1000)\r\n    return {\r\n      hour: h % 24,\r\n      minute: m,\r\n      second: s,\r\n      millisecond: ms\r\n    }\r\n  }\r\n\r\n  toISOString () {\r\n    const { year, month, day } = this.getDate()\r\n    const { hour, minute, second, millisecond } = this.getTime()\r\n    return `${pad(year, 4)}-${pad(month)}-${pad(day)}T` +\r\n      `${pad(hour)}:${pad(minute)}:${pad(second)}.${pad(millisecond, 3)}Z`\r\n  }\r\n\r\n  isGregorian () {\r\n    return isCalendarGregorian(this.year, this.month, this.day)\r\n  }\r\n\r\n  /**\r\n   * Note: Take care for dates < GREGORIAN0JD as `date` is always within the\r\n   * proleptic Gregorian Calender\r\n   * @param {Date} date - proleptic Gregorian date\r\n   */\r\n  fromDate (date) {\r\n    this.year = date.getUTCFullYear()\r\n    this.month = date.getUTCMonth() + 1\r\n    const day = date.getUTCDate()\r\n    const hour = date.getUTCHours()\r\n    const minute = date.getUTCMinutes()\r\n    const second = date.getUTCSeconds()\r\n    const ms = date.getMilliseconds()\r\n    this.day = day + (hour + ((minute + ((second + ms / 1000) / 60)) / 60)) / 24\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Note: Take care for dates < GREGORIAN0JD as `date` is always within the\r\n   * proleptic Gregorian Calender\r\n   * @returns {Date} proleptic Gregorian date\r\n   */\r\n  toDate () {\r\n    const [day, fhour] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(this.day)\r\n    const [hour, fminute] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(fhour * 24)\r\n    const [minute, fsecond] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(fminute * 60)\r\n    const [second, fms] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(fsecond * 60)\r\n    const date = new Date(Date.UTC(\r\n      this.year, this.month - 1, day, hour, minute, second, Math.round(fms * 1000)\r\n    ))\r\n    date.setUTCFullYear(this.year)\r\n    return date\r\n  }\r\n\r\n  /**\r\n   * converts a calendar date to decimal year\r\n   * @returns {number} decimal year\r\n   */\r\n  toYear () {\r\n    const [d, f] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(this.day) // eslint-disable-line no-unused-vars\r\n    const n = this.dayOfYear() - 1 + f\r\n    const days = this.isLeapYear() ? 366 : 365\r\n    const decYear = this.year + (n / days)\r\n    return decYear\r\n  }\r\n\r\n  /**\r\n   * converts a decimal year to a calendar date\r\n   * @param {number} year - decimal year\r\n   */\r\n  fromYear (year) {\r\n    const [y, f] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(year)\r\n    this.year = y\r\n    const days = this.isLeapYear() ? 366 : 365\r\n    const dayOfYear = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].round(f * days, 5)\r\n    let m = 12\r\n    while (m > 0 && DAYS_OF_YEAR[m] > dayOfYear) {\r\n      m--\r\n    }\r\n    this.month = m\r\n    this.day = 1 + dayOfYear - DAYS_OF_YEAR[this.month]\r\n    return this\r\n  }\r\n\r\n  isLeapYear () {\r\n    if (this.isGregorian()) {\r\n      return LeapYearGregorian(this.year)\r\n    } else {\r\n      return LeapYearJulian(this.year)\r\n    }\r\n  }\r\n\r\n  toJD () {\r\n    return CalendarToJD(this.year, this.month, this.day, !this.isGregorian())\r\n  }\r\n\r\n  fromJD (jd) {\r\n    const isJulian = !isJDCalendarGregorian(jd)\r\n    const { year, month, day } = JDToCalendar(jd, isJulian)\r\n    this.year = year\r\n    this.month = month\r\n    this.day = day\r\n    return this\r\n  }\r\n\r\n  fromJDE (jde) {\r\n    this.fromJD(jde)\r\n    const dT = _deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].deltaT(this.toYear()) // in seconds\r\n    this.day -= dT / 86400\r\n    return this\r\n  }\r\n\r\n  toJDE () {\r\n    const dT = _deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].deltaT(this.toYear()) // in seconds\r\n    this.day += dT / 86400\r\n    return this.toJD()\r\n  }\r\n\r\n  /**\r\n   * set date to midnight UTC\r\n   */\r\n  midnight () {\r\n    this.day = Math.floor(this.day)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * set date to noon UTC\r\n   */\r\n  noon () {\r\n    this.day = Math.floor(this.day) + 0.5\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * @param {Boolean} td - if `true` calendar instance is in TD; date gets converted to UT\r\n   *   true  - `UT = TD - ΔT`\r\n   *   false - `TD = UT + ΔT`\r\n   */\r\n  deltaT (td) {\r\n    const dT = _deltat_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].deltaT(this.toYear()) // in seconds\r\n    if (td) {\r\n      this.day -= dT / 86400\r\n    } else {\r\n      this.day += dT / 86400\r\n    }\r\n    return this\r\n  }\r\n\r\n  dayOfWeek () {\r\n    return DayOfWeek(this.toJD())\r\n  }\r\n\r\n  dayOfYear () {\r\n    if (this.isGregorian()) {\r\n      return DayOfYearGregorian(this.year, this.month, this.day)\r\n    } else {\r\n      return DayOfYearJulian(this.year, this.month, this.day)\r\n    }\r\n  }\r\n}\r\n\r\nclass CalendarJulian extends Calendar {\r\n  toJD () {\r\n    return CalendarJulianToJD(this.year, this.month, this.day)\r\n  }\r\n\r\n  fromJD (jd) {\r\n    const { year, month, day } = JDToCalendarJulian(jd)\r\n    this.year = year\r\n    this.month = month\r\n    this.day = day\r\n    return this\r\n  }\r\n\r\n  isLeapYear () {\r\n    return LeapYearJulian(this.year)\r\n  }\r\n\r\n  dayOfYear () {\r\n    return DayOfYearJulian(this.year, this.month, this.day)\r\n  }\r\n\r\n  /**\r\n   * toGregorian converts a Julian calendar date to a year, month, and day\r\n   * in the Gregorian calendar.\r\n   * @returns {CalendarGregorian}\r\n   */\r\n  toGregorian () {\r\n    const jd = this.toJD()\r\n    return new CalendarGregorian().fromJD(jd)\r\n  }\r\n}\r\n\r\nclass CalendarGregorian extends Calendar {\r\n  toJD () {\r\n    return CalendarGregorianToJD(this.year, this.month, this.day)\r\n  }\r\n\r\n  fromJD (jd) {\r\n    const { year, month, day } = JDToCalendarGregorian(jd)\r\n    this.year = year\r\n    this.month = month\r\n    this.day = day\r\n    return this\r\n  }\r\n\r\n  isLeapYear () {\r\n    return LeapYearGregorian(this.year)\r\n  }\r\n\r\n  dayOfYear () {\r\n    return DayOfYearGregorian(this.year, this.month, this.day)\r\n  }\r\n\r\n  /*\r\n  * toJulian converts a Gregorian calendar date to a year, month, and day\r\n  * in the Julian calendar.\r\n  * @returns {CalendarJulian}\r\n  */\r\n  toJulian () {\r\n    const jd = this.toJD()\r\n    return new CalendarJulian().fromJD(jd)\r\n  }\r\n}\r\n\r\n// -----------------------------------------------------------------------------\r\n\r\n/**\r\n * base conversion from calendar date to julian day\r\n */\r\nfunction CalendarToJD (y, m, d, isJulian) {\r\n  let b = 0\r\n  if (m < 3) {\r\n    y--\r\n    m += 12\r\n  }\r\n  if (!isJulian) {\r\n    const a = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(y, 100)\r\n    b = 2 - a + _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(a, 4)\r\n  }\r\n  // (7.1) p. 61\r\n  const jd = (_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(36525 * (int(y + 4716)), 100)) +\r\n    (_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(306 * (m + 1), 10) + b) + d - 1524.5\r\n  return jd\r\n}\r\n\r\n/**\r\n * CalendarGregorianToJD converts a Gregorian year, month, and day of month\r\n * to Julian day.\r\n *\r\n * Negative years are valid, back to JD 0.  The result is not valid for\r\n * dates before JD 0.\r\n * @param {number} y - year (int)\r\n * @param {number} m - month (int)\r\n * @param {number} d - day (float)\r\n * @returns {number} jd - Julian day (float)\r\n */\r\nfunction CalendarGregorianToJD (y, m, d) {\r\n  return CalendarToJD(y, m, d, false)\r\n}\r\n\r\n/**\r\n * CalendarJulianToJD converts a Julian year, month, and day of month to Julian day.\r\n *\r\n * Negative years are valid, back to JD 0.  The result is not valid for\r\n * dates before JD 0.\r\n * @param {number} y - year (int)\r\n * @param {number} m - month (int)\r\n * @param {number} d - day (float)\r\n * @returns {number} jd - Julian day (float)\r\n */\r\nfunction CalendarJulianToJD (y, m, d) {\r\n  return CalendarToJD(y, m, d, true)\r\n}\r\n\r\n/**\r\n * LeapYearJulian returns true if year y in the Julian calendar is a leap year.\r\n * @param {number} y - year (int)\r\n * @returns {boolean} true if leap year in Julian Calendar\r\n */\r\nfunction LeapYearJulian (y) {\r\n  return y % 4 === 0\r\n}\r\n\r\n/**\r\n * LeapYearGregorian returns true if year y in the Gregorian calendar is a leap year.\r\n * @param {number} y - year (int)\r\n * @returns {boolean} true if leap year in Gregorian Calendar\r\n */\r\nfunction LeapYearGregorian (y) {\r\n  return (y % 4 === 0 && y % 100 !== 0) || y % 400 === 0\r\n}\r\n\r\n/**\r\n * JDToCalendar returns the calendar date for the given jd.\r\n *\r\n * Note that this function returns a date in either the Julian or Gregorian\r\n * Calendar, as appropriate.\r\n * @param {number} jd - Julian day (float)\r\n * @param {boolean} isJulian - set true for Julian Calendar, otherwise Gregorian is used\r\n * @returns {object} `{ (int) year, (int) month, (float) day }`\r\n */\r\nfunction JDToCalendar (jd, isJulian) {\r\n  const [z, f] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(jd + 0.5)\r\n  let a = z\r\n  if (!isJulian) {\r\n    const α = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(z * 100 - 186721625, 3652425)\r\n    a = z + 1 + α - _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(α, 4)\r\n  }\r\n  const b = a + 1524\r\n  const c = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(b * 100 - 12210, 36525)\r\n  const d = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(36525 * c, 100)\r\n  const e = int(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv((b - d) * 1e4, 306001))\r\n  // compute return values\r\n  let year\r\n  let month\r\n  const day = (int(b - d) - _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].floorDiv(306001 * e, 1e4)) + f\r\n  if (e === 14 || e === 15) {\r\n    month = e - 13\r\n  } else {\r\n    month = e - 1\r\n  }\r\n  if (month < 3) {\r\n    year = int(c) - 4715\r\n  } else {\r\n    year = int(c) - 4716\r\n  }\r\n  return { year, month, day }\r\n}\r\n\r\n/**\r\n * JDToCalendarGregorian returns the calendar date for the given jd in the Gregorian Calendar.\r\n *\r\n * @param {number} jd - Julian day (float)\r\n * @returns {object} `{ (int) year, (int) month, (float) day }`\r\n */\r\nfunction JDToCalendarGregorian (jd) {\r\n  return JDToCalendar(jd, false)\r\n}\r\n\r\n/**\r\n * JDToCalendarJulian returns the calendar date for the given jd in the Julian Calendar.\r\n *\r\n * @param {number} jd - Julian day (float)\r\n * @returns {object} { (int) year, (int) month, (float) day }\r\n */\r\nfunction JDToCalendarJulian (jd) {\r\n  return JDToCalendar(jd, true)\r\n}\r\n\r\n/**\r\n * isJDCalendarGregorian tests if Julian day `jd` falls into the Gregorian calendar\r\n * @param {number} jd - Julian day (float)\r\n * @returns {boolean} true for Gregorian, false for Julian calendar\r\n */\r\nfunction isJDCalendarGregorian (jd) {\r\n  return (jd >= GREGORIAN0JD)\r\n}\r\n\r\n/**\r\n * isCalendarGregorian tests if date falls into the Gregorian calendar\r\n * @param {number} year - julian/gregorian year\r\n * @param {number} [month] - month of julian/gregorian year\r\n * @param {number} [day] - day of julian/gregorian year\r\n * @returns {boolean} true for Gregorian, false for Julian calendar\r\n */\r\nfunction isCalendarGregorian (year, month = 1, day = 1) {\r\n  return (year > 1582 ||\r\n    (year === 1582 && month > 10) ||\r\n    (year === 1582 && month === 10 && day >= 15)\r\n  )\r\n}\r\n\r\n/**\r\n * JDToDate converts a Julian day `jd` to a Date Object (Gregorian Calendar)\r\n *\r\n * Note: Javascript uses the the ISO-8601 calendar, which is a proleptic Gregorian\r\n * calendar, i.e. it acts as if this calendar was always in effect, even before\r\n * its year of introduction in 1582. Therefore dates between 1582-10-05 and\r\n * 1582-10-14 exists.\r\n *\r\n * @param {number} jd - Julian day (float)\r\n * @returns {Date}\r\n */\r\nfunction JDToDate (jd) {\r\n  return new CalendarGregorian().fromJD(jd).toDate()\r\n}\r\n\r\n/**\r\n * DateToJD converts a proleptic Gregorian Date into a Julian day `jd`\r\n * @param {Date} date\r\n * @returns {number} jd - Julian day (float)\r\n */\r\nfunction DateToJD (date) {\r\n  return new CalendarGregorian().fromDate(date).toJD()\r\n}\r\n\r\n/**\r\n * JDEToDate converts a Julian ephemeris day `jde` to a Date Object (Gregorian Calendar)\r\n * To obtain \"Universal Time\" (UT) from \"Dynamical Time\" (TD) the correction ΔT (in seconds) gets applied\r\n * ```\r\n * UT = TD - ΔT\r\n * ```\r\n * If your use case does not require such accuracy converting `jde` using `JDToDate` is fine.\r\n *\r\n * Note: Javascript uses the the ISO-8601 calendar, which is a proleptic Gregorian\r\n * calendar, i.e. it acts as if this calendar was always in effect, even before\r\n * its year of introduction in 1582. Therefore dates between 1582-10-05 and\r\n * 1582-10-14 exists.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @returns {Date} Javascript Date Object\r\n */\r\nfunction JDEToDate (jde) {\r\n  return new CalendarGregorian().fromJDE(jde).toDate()\r\n}\r\n\r\n/**\r\n * DateToJDE converts a Date Object (Gregorian Calendar) to a Julian ephemeris day `jde`\r\n * To obtain \"Dynamical Time\" (TD) from \"Universal Time\" (UT) the correction ΔT (in seconds) gets applied\r\n * ```\r\n * TD = UT + ΔT\r\n * ```\r\n * If your use case does not require such accuracy converting `Date` using `DateToJD` is fine.\r\n *\r\n * @param {Date} date - Javascript Date Object\r\n * @returns {number} jde - Julian ephemeris day (float)\r\n */\r\nfunction DateToJDE (date) {\r\n  return new CalendarGregorian().fromDate(date).toJDE()\r\n}\r\n\r\n/**\r\n * converts Modified Julian Day `mjd` to Julian Day `jd`\r\n * @param {Number} mjd - Modified Julian Day\r\n * @returns {Number} jd - Julian Day\r\n */\r\nfunction MJDToJD (mjd) {\r\n  return mjd + _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JMod\r\n}\r\n\r\n/**\r\n * converts Julian Day `jd` to Modified Julian Day `mjd`\r\n * The MJD sometimes appear when mentioning orbital elements of artificial satellites.\r\n * Contrary to JD the MJD begins at Greenwich mean midnight.\r\n * @param {Number} jd - Julian Day\r\n * @returns {Number} mjd - Modified Julian Day MJD\r\n */\r\nfunction JDToMJD (jd) {\r\n  return jd - _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JMod\r\n}\r\n\r\n/**\r\n * DayOfWeek determines the day of the week for a given JD.\r\n *\r\n * The value returned is an integer in the range 0 to 6, where 0 represents\r\n * Sunday.  This is the same convention followed in the time package of the\r\n * Javascript standard library.\r\n * @param {number} jd - Julian day (float)\r\n * @returns {number} (int) 0 == sunday; ...; 6 == saturday\r\n */\r\nfunction DayOfWeek (jd) {\r\n  return int(jd + 1.5) % 7\r\n}\r\n\r\n/**\r\n * DayOfYearGregorian computes the day number within the year of the Gregorian\r\n * calendar.\r\n * @param {number} y - year (int)\r\n * @param {number} m - month (int)\r\n * @param {number} d - day (float)\r\n * @returns {number} day of year\r\n */\r\nfunction DayOfYearGregorian (y, m, d) {\r\n  return DayOfYear(y, m, int(d), LeapYearGregorian(y))\r\n}\r\n\r\n/**\r\n * DayOfYearJulian computes the day number within the year of the Julian\r\n * calendar.\r\n * @param {number} y - year (int)\r\n * @param {number} m - month (int)\r\n * @param {number} d - day (float)\r\n * @returns {number} day of year\r\n */\r\nfunction DayOfYearJulian (y, m, d) {\r\n  return DayOfYear(y, m, int(d), LeapYearJulian(y))\r\n}\r\n\r\n/**\r\n * DayOfYear computes the day number within the year.\r\n *\r\n * This form of the function is not specific to the Julian or Gregorian\r\n * calendar, but you must tell it whether the year is a leap year.\r\n * @param {number} y - year (int)\r\n * @param {number} m - month (int)\r\n * @param {number} d - day (float)\r\n * @param {boolean} leap - set `true` if `y` is leap year\r\n * @returns {number} day of year\r\n */\r\nfunction DayOfYear (y, m, d, leap) {\r\n  let k = 0\r\n  if (leap && m > 1) {\r\n    k = 1\r\n  }\r\n  return k + DAYS_OF_YEAR[m] + int(d)\r\n}\r\n\r\n/**\r\n * DayOfYearToCalendar returns the calendar month and day for a given\r\n * day of year and leap year status.\r\n * @param {number} n - day of year (int)\r\n * @param {boolean} leap - set `true` if `y` is leap year\r\n * @returns {object} `{ (int) month, (float) day }`\r\n */\r\nfunction DayOfYearToCalendar (n, leap) {\r\n  let month\r\n  let k = 0\r\n  if (leap) {\r\n    k = 1\r\n  }\r\n  for (month = 1; month <= 12; month++) {\r\n    if (k + DAYS_OF_YEAR[month] > n) {\r\n      month = month - 1\r\n      break\r\n    }\r\n  }\r\n  const day = n - k - DAYS_OF_YEAR[month]\r\n  return { month, day }\r\n}\r\n\r\n/**\r\n * DayOfYearToCalendarGregorian returns the calendar month and day for a given\r\n * day of year.\r\n * @param {number} year\r\n * @param {number} n - day of year (int)\r\n * @returns {CalendarGregorian} { (int) year, (int) month, (float) day }\r\n */\r\nfunction DayOfYearToCalendarGregorian (year, n) {\r\n  const { month, day } = DayOfYearToCalendar(n, LeapYearGregorian(year))\r\n  return new CalendarGregorian(year, month, day)\r\n}\r\n\r\n/**\r\n * DayOfYearToCalendarJulian returns the calendar month and day for a given\r\n * day of year.\r\n * @param {number} year\r\n * @param {number} n - day of year (int)\r\n * @returns {CalendarJulian} { (int) year, (int) month, (float) day }\r\n */\r\nfunction DayOfYearToCalendarJulian (year, n) {\r\n  const { month, day } = DayOfYearToCalendar(n, LeapYearJulian(year))\r\n  return new CalendarJulian(year, month, day)\r\n}\r\n\r\nfunction pad (num, len) {\r\n  len = len || 2\r\n  const neg = num < 0 ? '-' : ''\r\n  num = Math.abs(num)\r\n  const padded = ('0000' + num)\r\n  return neg + padded.substr(padded.length - len, len)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  GREGORIAN0JD,\r\n  Calendar,\r\n  CalendarJulian,\r\n  CalendarGregorian,\r\n  CalendarToJD,\r\n  CalendarGregorianToJD,\r\n  CalendarJulianToJD,\r\n  LeapYearJulian,\r\n  LeapYearGregorian,\r\n  JDToCalendar,\r\n  JDToCalendarGregorian,\r\n  JDToCalendarJulian,\r\n  isJDCalendarGregorian,\r\n  isCalendarGregorian,\r\n  JDToDate,\r\n  DateToJD,\r\n  JDEToDate,\r\n  DateToJDE,\r\n  MJDToJD,\r\n  JDToMJD,\r\n  DayOfWeek,\r\n  DayOfYearGregorian,\r\n  DayOfYearJulian,\r\n  DayOfYear,\r\n  DayOfYearToCalendar,\r\n  DayOfYearToCalendarGregorian,\r\n  DayOfYearToCalendarJulian\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/julian.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/jupiter.js":
/*!************************************************!*\
  !*** ./node_modules/astronomia/src/jupiter.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   physical: () => (/* binding */ physical),\n/* harmony export */   physical2: () => (/* binding */ physical2)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module jupiter\r\n */\r\n/**\r\n * Jupiter: Chapter 42, Ephemeris for Physical Observations of Jupiter.\r\n */\r\n\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n/**\r\n * Physical computes quantities for physical observations of Jupiter.\r\n *\r\n * All angular results in radians.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @param {Planet} earth\r\n * @param {Planet} jupiter\r\n * @return {Array}\r\n *    {number} DS - Planetocentric declination of the Sun.\r\n *    {number} DE - Planetocentric declination of the Earth.\r\n *    {number} ω1 - Longitude of the System I central meridian of the illuminated disk,\r\n *                  as seen from Earth.\r\n *    {number} ω2 - Longitude of the System II central meridian of the illuminated disk,\r\n *                  as seen from Earth.\r\n *    {number} P -  Geocentric position angle of Jupiter's northern rotation pole.\r\n */\r\nfunction physical (jde, earth, jupiter) { // (jde float64, earth, jupiter *pp.V87Planet)  (DS, DE, ω1, ω2, P float64)\r\n  // Step 1.0\r\n  const d = jde - 2433282.5\r\n  const T1 = d / _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JulianCentury\r\n  const p = Math.PI / 180\r\n  const α0 = 268 * p + 0.1061 * p * T1\r\n  const δ0 = 64.5 * p - 0.0164 * p * T1\r\n  // Step 2.0\r\n  const W1 = 17.71 * p + 877.90003539 * p * d\r\n  const W2 = 16.838 * p + 870.27003539 * p * d\r\n  // Step 3.0\r\n  const pos = earth.position(jde)\r\n  let [l0, b0, R] = [pos.lon, pos.lat, pos.range]\r\n  const fk5 = _planetposition_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].toFK5(l0, b0, jde)\r\n  l0 = fk5.lon\r\n  b0 = fk5.lat\r\n  // Steps 4-7.\r\n  const [sl0, cl0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l0)\r\n  const sb0 = Math.sin(b0)\r\n  let Δ = 4.0 // surely better than 0.0\r\n\r\n  let l = 0\r\n  let b = 0\r\n  let r = 0\r\n  let x = 0\r\n  let y = 0\r\n  let z = 0\r\n\r\n  const f = function () {\r\n    const τ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lightTime(Δ)\r\n    const pos = jupiter.position(jde - τ)\r\n    l = pos.lon\r\n    b = pos.lat\r\n    r = pos.range\r\n    const fk5 = _planetposition_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].toFK5(l, b, jde)\r\n    l = fk5.lon\r\n    b = fk5.lat\r\n    const [sb, cb] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(b)\r\n    const [sl, cl] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l)\r\n    // (42.2) p. 289\r\n    x = r * cb * cl - R * cl0\r\n    y = r * cb * sl - R * sl0\r\n    z = r * sb - R * sb0\r\n    // (42.3) p. 289\r\n    Δ = Math.sqrt(x * x + y * y + z * z)\r\n  }\r\n  f()\r\n  f()\r\n\r\n  // Step 8.0\r\n  const ε0 = _nutation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].meanObliquity(jde)\r\n  // Step 9.0\r\n  const [sε0, cε0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε0)\r\n  const [sl, cl] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l)\r\n  const [sb, cb] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(b)\r\n  const αs = Math.atan2(cε0 * sl - sε0 * sb / cb, cl)\r\n  const δs = Math.asin(cε0 * sb + sε0 * cb * sl)\r\n  // Step 10.0\r\n  const [sδs, cδs] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δs)\r\n  const [sδ0, cδ0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ0)\r\n  const DS = Math.asin(-sδ0 * sδs - cδ0 * cδs * Math.cos(α0 - αs))\r\n  // Step 11.0\r\n  const u = y * cε0 - z * sε0\r\n  const v = y * sε0 + z * cε0\r\n  let α = Math.atan2(u, x)\r\n  let δ = Math.atan(v / Math.hypot(x, u))\r\n  const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n  const [sα0α, cα0α] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α0 - α)\r\n  const ζ = Math.atan2(sδ0 * cδ * cα0α - sδ * cδ0, cδ * sα0α)\r\n  // Step 12.0\r\n  const DE = Math.asin(-sδ0 * sδ - cδ0 * cδ * Math.cos(α0 - α))\r\n  // Step 13.0\r\n  let ω1 = W1 - ζ - 5.07033 * p * Δ\r\n  let ω2 = W2 - ζ - 5.02626 * p * Δ\r\n  // Step 14.0\r\n  let C = (2 * r * Δ + R * R - r * r - Δ * Δ) / (4 * r * Δ)\r\n  if (Math.sin(l - l0) < 0) {\r\n    C = -C\r\n  }\r\n  ω1 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(ω1 + C, 2 * Math.PI)\r\n  ω2 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(ω2 + C, 2 * Math.PI)\r\n  // Step 15.0\r\n  const [Δψ, Δε] = _nutation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].nutation(jde)\r\n  const ε = ε0 + Δε\r\n  // Step 16.0\r\n  const [sε, cε] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε)\r\n  const [sα, cα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α)\r\n  α += 0.005693 * p * (cα * cl0 * cε + sα * sl0) / cδ\r\n  δ += 0.005693 * p * (cl0 * cε * (sε / cε * cδ - sα * sδ) + cα * sδ * sl0)\r\n  // Step 17.0\r\n  const tδ = sδ / cδ\r\n  const Δα = (cε + sε * sα * tδ) * Δψ - cα * tδ * Δε\r\n  const Δδ = sε * cα * Δψ + sα * Δε\r\n  const αʹ = α + Δα\r\n  const δʹ = δ + Δδ\r\n  const [sα0, cα0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α0)\r\n  const tδ0 = sδ0 / cδ0\r\n  const Δα0 = (cε + sε * sα0 * tδ0) * Δψ - cα0 * tδ0 * Δε\r\n  const Δδ0 = sε * cα0 * Δψ + sα0 * Δε\r\n  const α0ʹ = α0 + Δα0\r\n  const δ0ʹ = δ0 + Δδ0\r\n  // Step 18.0\r\n  const [sδʹ, cδʹ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δʹ)\r\n  const [sδ0ʹ, cδ0ʹ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ0ʹ)\r\n  const [sα0ʹαʹ, cα0ʹαʹ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α0ʹ - αʹ)\r\n  // (42.4) p. 290\r\n  let P = Math.atan2(cδ0ʹ * sα0ʹαʹ, sδ0ʹ * cδʹ - cδ0ʹ * sδʹ * cα0ʹαʹ)\r\n  if (P < 0) {\r\n    P += 2 * Math.PI\r\n  }\r\n  return [DS, DE, ω1, ω2, P]\r\n}\r\n\r\n/**\r\n * Physical2 computes quantities for physical observations of Jupiter.\r\n *\r\n * Results are less accurate than with Physical().\r\n * All angular results in radians.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @return {Array}\r\n *    {number} DS - Planetocentric declination of the Sun.\r\n *    {number} DE - Planetocentric declination of the Earth.\r\n *    {number} ω1 - Longitude of the System I central meridian of the illuminated disk,\r\n *                  as seen from Earth.\r\n *    {number} ω2 - Longitude of the System II central meridian of the illuminated disk,\r\n *                  as seen from Earth.\r\n */\r\nfunction physical2 (jde) { // (jde float64)  (DS, DE, ω1, ω2 float64)\r\n  const d = jde - _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000\r\n  const p = Math.PI / 180\r\n  const V = 172.74 * p + 0.00111588 * p * d\r\n  const M = 357.529 * p + 0.9856003 * p * d\r\n  const sV = Math.sin(V)\r\n  const N = 20.02 * p + 0.0830853 * p * d + 0.329 * p * sV\r\n  const J = 66.115 * p + 0.9025179 * p * d - 0.329 * p * sV\r\n  const [sM, cM] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(M)\r\n  const [sN, cN] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(N)\r\n  const [s2M, c2M] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * M)\r\n  const [s2N, c2N] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * N)\r\n  const A = 1.915 * p * sM + 0.02 * p * s2M\r\n  const B = 5.555 * p * sN + 0.168 * p * s2N\r\n  const K = J + A - B\r\n  const R = 1.00014 - 0.01671 * cM - 0.00014 * c2M\r\n  const r = 5.20872 - 0.25208 * cN - 0.00611 * c2N\r\n  const [sK, cK] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(K)\r\n  const Δ = Math.sqrt(r * r + R * R - 2 * r * R * cK)\r\n  const ψ = Math.asin(R / Δ * sK)\r\n  const dd = d - Δ / 173\r\n  let ω1 = 210.98 * p + 877.8169088 * p * dd + ψ - B\r\n  let ω2 = 187.23 * p + 870.1869088 * p * dd + ψ - B\r\n  let C = Math.sin(ψ / 2)\r\n  C *= C\r\n  if (sK > 0) {\r\n    C = -C\r\n  }\r\n  ω1 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(ω1 + C, 2 * Math.PI)\r\n  ω2 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(ω2 + C, 2 * Math.PI)\r\n  const λ = 34.35 * p + 0.083091 * p * d + 0.329 * p * sV + B\r\n  const DS = 3.12 * p * Math.sin(λ + 42.8 * p)\r\n  const DE = DS - 2.22 * p * Math.sin(ψ) * Math.cos(λ + 22 * p) -\r\n    1.3 * p * (r - Δ) / Δ * Math.sin(λ - 100.5 * p)\r\n  return [DS, DE, ω1, ω2]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  physical,\r\n  physical2\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/jupiter.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/jupitermoons.js":
/*!*****************************************************!*\
  !*** ./node_modules/astronomia/src/jupitermoons.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callisto: () => (/* binding */ callisto),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   e5: () => (/* binding */ e5),\n/* harmony export */   europa: () => (/* binding */ europa),\n/* harmony export */   ganymede: () => (/* binding */ ganymede),\n/* harmony export */   io: () => (/* binding */ io),\n/* harmony export */   positions: () => (/* binding */ positions)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _planetelements_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./planetelements.js */ \"./node_modules/astronomia/src/planetelements.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module jupitermoons\r\n */\r\n/**\r\n * Jupitermoons: Chapter 44, Positions of the Satellites of Jupiter.\r\n */\r\n\r\n\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n// Moon names in order of position in Array\r\nconst io = 0\r\nconst europa = 1\r\nconst ganymede = 2\r\nconst callisto = 3\r\n\r\nconst k = [17295, 21819, 27558, 36548]\r\n\r\n/**\r\n * XY used for returning coordinates of moons.\r\n * @param {number} x - in units of Jupiter radii\r\n * @param {number} y - in units of Jupiter radii\r\n */\r\nfunction XY (x, y) {\r\n  this.x = x\r\n  this.y = y\r\n}\r\n\r\n/**\r\n * Positions computes positions of moons of Jupiter.\r\n *\r\n * Returned coordinates are in units of Jupiter radii.\r\n *\r\n * @param {Number} jde - Julian ephemeris day\r\n * @return {Array} x, y - coordinates of the 4 Satellites of jupiter\r\n */\r\nfunction positions (jde) {\r\n  const d = jde - _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000\r\n  const p = Math.PI / 180\r\n  const V = 172.74 * p + 0.00111588 * p * d\r\n  const M = 357.529 * p + 0.9856003 * p * d\r\n  const sV = Math.sin(V)\r\n  const N = 20.02 * p + 0.0830853 * p * d + 0.329 * p * sV\r\n  const J = 66.115 * p + 0.9025179 * p * d - 0.329 * p * sV\r\n  const [sM, cM] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(M)\r\n  const [sN, cN] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(N)\r\n  const [s2M, c2M] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * M)\r\n  const [s2N, c2N] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * N)\r\n  const A = 1.915 * p * sM + 0.02 * p * s2M\r\n  const B = 5.555 * p * sN + 0.168 * p * s2N\r\n  const K = J + A - B\r\n  const R = 1.00014 - 0.01671 * cM - 0.00014 * c2M\r\n  const r = 5.20872 - 0.25208 * cN - 0.00611 * c2N\r\n  const [sK, cK] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(K)\r\n  const Δ = Math.sqrt(r * r + R * R - 2 * r * R * cK)\r\n  const ψ = Math.asin(R / Δ * sK)\r\n  const λ = 34.35 * p + 0.083091 * p * d + 0.329 * p * sV + B\r\n  const DS = 3.12 * p * Math.sin(λ + 42.8 * p)\r\n  const DE = DS - 2.22 * p * Math.sin(ψ) * Math.cos(λ + 22 * p) -\r\n    1.3 * p * (r - Δ) / Δ * Math.sin(λ - 100.5 * p)\r\n  const dd = d - Δ / 173\r\n  const u1 = 163.8069 * p + 203.4058646 * p * dd + ψ - B\r\n  const u2 = 358.414 * p + 101.2916335 * p * dd + ψ - B\r\n  const u3 = 5.7176 * p + 50.234518 * p * dd + ψ - B\r\n  const u4 = 224.8092 * p + 21.48798 * p * dd + ψ - B\r\n  const G = 331.18 * p + 50.310482 * p * dd\r\n  const H = 87.45 * p + 21.569231 * p * dd\r\n  const [s212, c212] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * (u1 - u2))\r\n  const [s223, c223] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * (u2 - u3))\r\n  const [sG, cG] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(G)\r\n  const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n  const c1 = 0.473 * p * s212\r\n  const c2 = 1.065 * p * s223\r\n  const c3 = 0.165 * p * sG\r\n  const c4 = 0.843 * p * sH\r\n  const r1 = 5.9057 - 0.0244 * c212\r\n  const r2 = 9.3966 - 0.0882 * c223\r\n  const r3 = 14.9883 - 0.0216 * cG\r\n  const r4 = 26.3627 - 0.1939 * cH\r\n  const sDE = Math.sin(DE)\r\n  const xy = function (u, r) {\r\n    const [su, cu] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u)\r\n    return new XY(r * su, -r * cu * sDE)\r\n  }\r\n  return [xy(u1 + c1, r1), xy(u2 + c2, r2), xy(u3 + c3, r3), xy(u4 + c4, r4)]\r\n}\r\n\r\n/**\r\n * Positions computes positions of moons of Jupiter.\r\n *\r\n * High accuracy method based on theory \"E5\"  Results returned in\r\n * argument pos, which must not be undefined.  Returned coordinates in units\r\n * of Jupiter radii.\r\n *\r\n * @param {Number} jde - Julian ephemeris day\r\n * @param {Planet} earth - VSOP87 Planet earth\r\n * @param {Planet} jupiter - VSOP87 Planet jupiter\r\n * @param {Array} [pos] - reference to array of positions (same as return value)\r\n * @return {Array} x, y - coordinates of the 4 Satellites of jupiter\r\n */\r\nfunction e5 (jde, earth, jupiter, pos) {\r\n  pos = pos || new Array(4)\r\n\r\n  // variables assigned in following block\r\n  let λ0, β0, t\r\n  let Δ = 5.0\r\n\r\n  ;(function () {\r\n    const { lon, lat, range } = _solar_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].trueVSOP87(earth, jde)\r\n    const [s, β, R] = [lon, lat, range]\r\n    const [ss, cs] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(s)\r\n    const sβ = Math.sin(β)\r\n    let τ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lightTime(Δ)\r\n    let x = 0\r\n    let y = 0\r\n    let z = 0\r\n\r\n    function f () {\r\n      const { lon, lat, range } = jupiter.position(jde - τ)\r\n      const [sl, cl] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(lon)\r\n      const [sb, cb] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(lat)\r\n      x = range * cb * cl + R * cs\r\n      y = range * cb * sl + R * ss\r\n      z = range * sb + R * sβ\r\n      Δ = Math.sqrt(x * x + y * y + z * z)\r\n      τ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lightTime(Δ)\r\n    }\r\n\r\n    f()\r\n    f()\r\n\r\n    λ0 = Math.atan2(y, x)\r\n    β0 = Math.atan(z / Math.hypot(x, y))\r\n    t = jde - 2443000.5 - τ\r\n  })()\r\n\r\n  const p = Math.PI / 180\r\n  const l1 = 106.07719 * p + 203.48895579 * p * t\r\n  const l2 = 175.73161 * p + 101.374724735 * p * t\r\n  const l3 = 120.55883 * p + 50.317609207 * p * t\r\n  const l4 = 84.44459 * p + 21.571071177 * p * t\r\n  const π1 = 97.0881 * p + 0.16138586 * p * t\r\n  const π2 = 154.8663 * p + 0.04726307 * p * t\r\n  const π3 = 188.184 * p + 0.00712734 * p * t\r\n  const π4 = 335.2868 * p + 0.00184 * p * t\r\n  const ω1 = 312.3346 * p - 0.13279386 * p * t\r\n  const ω2 = 100.4411 * p - 0.03263064 * p * t\r\n  const ω3 = 119.1942 * p - 0.00717703 * p * t\r\n  const ω4 = 322.6186 * p - 0.00175934 * p * t\r\n  const Γ = 0.33033 * p * Math.sin(163.679 * p + 0.0010512 * p * t) +\r\n    0.03439 * p * Math.sin(34.486 * p - 0.0161731 * p * t)\r\n  const Φλ = 199.6766 * p + 0.1737919 * p * t\r\n  let ψ = 316.5182 * p - 0.00000208 * p * t\r\n  const G = 30.23756 * p + 0.0830925701 * p * t + Γ\r\n  const Gʹ = 31.97853 * p + 0.0334597339 * p * t\r\n  const Π = 13.469942 * p\r\n\r\n  const Σ1 = 0.47259 * p * Math.sin(2 * (l1 - l2)) +\r\n    -0.03478 * p * Math.sin(π3 - π4) +\r\n    0.01081 * p * Math.sin(l2 - 2 * l3 + π3) +\r\n    0.00738 * p * Math.sin(Φλ) +\r\n    0.00713 * p * Math.sin(l2 - 2 * l3 + π2) +\r\n    -0.00674 * p * Math.sin(π1 + π3 - 2 * Π - 2 * G) +\r\n    0.00666 * p * Math.sin(l2 - 2 * l3 + π4) +\r\n    0.00445 * p * Math.sin(l1 - π3) +\r\n    -0.00354 * p * Math.sin(l1 - l2) +\r\n    -0.00317 * p * Math.sin(2 * ψ - 2 * Π) +\r\n    0.00265 * p * Math.sin(l1 - π4) +\r\n    -0.00186 * p * Math.sin(G) +\r\n    0.00162 * p * Math.sin(π2 - π3) +\r\n    0.00158 * p * Math.sin(4 * (l1 - l2)) +\r\n    -0.00155 * p * Math.sin(l1 - l3) +\r\n    -0.00138 * p * Math.sin(ψ + ω3 - 2 * Π - 2 * G) +\r\n    -0.00115 * p * Math.sin(2 * (l1 - 2 * l2 + ω2)) +\r\n    0.00089 * p * Math.sin(π2 - π4) +\r\n    0.00085 * p * Math.sin(l1 + π3 - 2 * Π - 2 * G) +\r\n    0.00083 * p * Math.sin(ω2 - ω3) +\r\n    0.00053 * p * Math.sin(ψ - ω2)\r\n  const Σ2 = 1.06476 * p * Math.sin(2 * (l2 - l3)) +\r\n    0.04256 * p * Math.sin(l1 - 2 * l2 + π3) +\r\n    0.03581 * p * Math.sin(l2 - π3) +\r\n    0.02395 * p * Math.sin(l1 - 2 * l2 + π4) +\r\n    0.01984 * p * Math.sin(l2 - π4) +\r\n    -0.01778 * p * Math.sin(Φλ) +\r\n    0.01654 * p * Math.sin(l2 - π2) +\r\n    0.01334 * p * Math.sin(l2 - 2 * l3 + π2) +\r\n    0.01294 * p * Math.sin(π3 - π4) +\r\n    -0.01142 * p * Math.sin(l2 - l3) +\r\n    -0.01057 * p * Math.sin(G) +\r\n    -0.00775 * p * Math.sin(2 * (ψ - Π)) +\r\n    0.00524 * p * Math.sin(2 * (l1 - l2)) +\r\n    -0.0046 * p * Math.sin(l1 - l3) +\r\n    0.00316 * p * Math.sin(ψ - 2 * G + ω3 - 2 * Π) +\r\n    -0.00203 * p * Math.sin(π1 + π3 - 2 * Π - 2 * G) +\r\n    0.00146 * p * Math.sin(ψ - ω3) +\r\n    -0.00145 * p * Math.sin(2 * G) +\r\n    0.00125 * p * Math.sin(ψ - ω4) +\r\n    -0.00115 * p * Math.sin(l1 - 2 * l3 + π3) +\r\n    -0.00094 * p * Math.sin(2 * (l2 - ω2)) +\r\n    0.00086 * p * Math.sin(2 * (l1 - 2 * l2 + ω2)) +\r\n    -0.00086 * p * Math.sin(5 * Gʹ - 2 * G + 52.225 * p) +\r\n    -0.00078 * p * Math.sin(l2 - l4) +\r\n    -0.00064 * p * Math.sin(3 * l3 - 7 * l4 + 4 * π4) +\r\n    0.00064 * p * Math.sin(π1 - π4) +\r\n    -0.00063 * p * Math.sin(l1 - 2 * l3 + π4) +\r\n    0.00058 * p * Math.sin(ω3 - ω4) +\r\n    0.00056 * p * Math.sin(2 * (ψ - Π - G)) +\r\n    0.00056 * p * Math.sin(2 * (l2 - l4)) +\r\n    0.00055 * p * Math.sin(2 * (l1 - l3)) +\r\n    0.00052 * p * Math.sin(3 * l3 - 7 * l4 + π3 + 3 * π4) +\r\n    -0.00043 * p * Math.sin(l1 - π3) +\r\n    0.00041 * p * Math.sin(5 * (l2 - l3)) +\r\n    0.00041 * p * Math.sin(π4 - Π) +\r\n    0.00032 * p * Math.sin(ω2 - ω3) +\r\n    0.00032 * p * Math.sin(2 * (l3 - G - Π))\r\n  const Σ3 = 0.1649 * p * Math.sin(l3 - π3) +\r\n    0.09081 * p * Math.sin(l3 - π4) +\r\n    -0.06907 * p * Math.sin(l2 - l3) +\r\n    0.03784 * p * Math.sin(π3 - π4) +\r\n    0.01846 * p * Math.sin(2 * (l3 - l4)) +\r\n    -0.0134 * p * Math.sin(G) +\r\n    -0.01014 * p * Math.sin(2 * (ψ - Π)) +\r\n    0.00704 * p * Math.sin(l2 - 2 * l3 + π3) +\r\n    -0.0062 * p * Math.sin(l2 - 2 * l3 + π2) +\r\n    -0.00541 * p * Math.sin(l3 - l4) +\r\n    0.00381 * p * Math.sin(l2 - 2 * l3 + π4) +\r\n    0.00235 * p * Math.sin(ψ - ω3) +\r\n    0.00198 * p * Math.sin(ψ - ω4) +\r\n    0.00176 * p * Math.sin(Φλ) +\r\n    0.0013 * p * Math.sin(3 * (l3 - l4)) +\r\n    0.00125 * p * Math.sin(l1 - l3) +\r\n    -0.00119 * p * Math.sin(5 * Gʹ - 2 * G + 52.225 * p) +\r\n    0.00109 * p * Math.sin(l1 - l2) +\r\n    -0.001 * p * Math.sin(3 * l3 - 7 * l4 + 4 * π4) +\r\n    0.00091 * p * Math.sin(ω3 - ω4) +\r\n    0.0008 * p * Math.sin(3 * l3 - 7 * l4 + π3 + 3 * π4) +\r\n    -0.00075 * p * Math.sin(2 * l2 - 3 * l3 + π3) +\r\n    0.00072 * p * Math.sin(π1 + π3 - 2 * Π - 2 * G) +\r\n    0.00069 * p * Math.sin(π4 - Π) +\r\n    -0.00058 * p * Math.sin(2 * l3 - 3 * l4 + π4) +\r\n    -0.00057 * p * Math.sin(l3 - 2 * l4 + π4) +\r\n    0.00056 * p * Math.sin(l3 + π3 - 2 * Π - 2 * G) +\r\n    -0.00052 * p * Math.sin(l2 - 2 * l3 + π1) +\r\n    -0.00050 * p * Math.sin(π2 - π3) +\r\n    0.00048 * p * Math.sin(l3 - 2 * l4 + π3) +\r\n    -0.00045 * p * Math.sin(2 * l2 - 3 * l3 + π4) +\r\n    -0.00041 * p * Math.sin(π2 - π4) +\r\n    -0.00038 * p * Math.sin(2 * G) +\r\n    -0.00037 * p * Math.sin(π3 - π4 + ω3 - ω4) +\r\n    -0.00032 * p * Math.sin(3 * l3 - 7 * l4 + 2 * π3 + 2 * π4) +\r\n    0.0003 * p * Math.sin(4 * (l3 - l4)) +\r\n    0.00029 * p * Math.sin(l3 + π4 - 2 * Π - 2 * G) +\r\n    -0.00028 * p * Math.sin(ω3 + ψ - 2 * Π - 2 * G) +\r\n    0.00026 * p * Math.sin(l3 - Π - G) +\r\n    0.00024 * p * Math.sin(l2 - 3 * l3 + 2 * l4) +\r\n    0.00021 * p * Math.sin(2 * (l3 - Π - G)) +\r\n    -0.00021 * p * Math.sin(l3 - π2) +\r\n    0.00017 * p * Math.sin(2 * (l3 - π3))\r\n  const Σ4 = 0.84287 * p * Math.sin(l4 - π4) +\r\n    0.03431 * p * Math.sin(π4 - π3) +\r\n    -0.03305 * p * Math.sin(2 * (ψ - Π)) +\r\n    -0.03211 * p * Math.sin(G) +\r\n    -0.01862 * p * Math.sin(l4 - π3) +\r\n    0.01186 * p * Math.sin(ψ - ω4) +\r\n    0.00623 * p * Math.sin(l4 + π4 - 2 * G - 2 * Π) +\r\n    0.00387 * p * Math.sin(2 * (l4 - π4)) +\r\n    -0.00284 * p * Math.sin(5 * Gʹ - 2 * G + 52.225 * p) +\r\n    -0.00234 * p * Math.sin(2 * (ψ - π4)) +\r\n    -0.00223 * p * Math.sin(l3 - l4) +\r\n    -0.00208 * p * Math.sin(l4 - Π) +\r\n    0.00178 * p * Math.sin(ψ + ω4 - 2 * π4) +\r\n    0.00134 * p * Math.sin(π4 - Π) +\r\n    0.00125 * p * Math.sin(2 * (l4 - G - Π)) +\r\n    -0.00117 * p * Math.sin(2 * G) +\r\n    -0.00112 * p * Math.sin(2 * (l3 - l4)) +\r\n    0.00107 * p * Math.sin(3 * l3 - 7 * l4 + 4 * π4) +\r\n    0.00102 * p * Math.sin(l4 - G - Π) +\r\n    0.00096 * p * Math.sin(2 * l4 - ψ - ω4) +\r\n    0.00087 * p * Math.sin(2 * (ψ - ω4)) +\r\n    -0.00085 * p * Math.sin(3 * l3 - 7 * l4 + π3 + 3 * π4) +\r\n    0.00085 * p * Math.sin(l3 - 2 * l4 + π4) +\r\n    -0.00081 * p * Math.sin(2 * (l4 - ψ)) +\r\n    0.00071 * p * Math.sin(l4 + π4 - 2 * Π - 3 * G) +\r\n    0.00061 * p * Math.sin(l1 - l4) +\r\n    -0.00056 * p * Math.sin(ψ - ω3) +\r\n    -0.00054 * p * Math.sin(l3 - 2 * l4 + π3) +\r\n    0.00051 * p * Math.sin(l2 - l4) +\r\n    0.00042 * p * Math.sin(2 * (ψ - G - Π)) +\r\n    0.00039 * p * Math.sin(2 * (π4 - ω4)) +\r\n    0.00036 * p * Math.sin(ψ + Π - π4 - ω4) +\r\n    0.00035 * p * Math.sin(2 * Gʹ - G + 188.37 * p) +\r\n    -0.00035 * p * Math.sin(l4 - π4 + 2 * Π - 2 * ψ) +\r\n    -0.00032 * p * Math.sin(l4 + π4 - 2 * Π - G) +\r\n    0.0003 * p * Math.sin(2 * Gʹ - 2 * G + 149.15 * p) +\r\n    0.00029 * p * Math.sin(3 * l3 - 7 * l4 + 2 * π3 + 2 * π4) +\r\n    0.00028 * p * Math.sin(l4 - π4 + 2 * ψ - 2 * Π) +\r\n    -0.00028 * p * Math.sin(2 * (l4 - ω4)) +\r\n    -0.00027 * p * Math.sin(π3 - π4 + ω3 - ω4) +\r\n    -0.00026 * p * Math.sin(5 * Gʹ - 3 * G + 188.37 * p) +\r\n    0.00025 * p * Math.sin(ω4 - ω3) +\r\n    -0.00025 * p * Math.sin(l2 - 3 * l3 + 2 * l4) +\r\n    -0.00023 * p * Math.sin(3 * (l3 - l4)) +\r\n    0.00021 * p * Math.sin(2 * l4 - 2 * Π - 3 * G) +\r\n    -0.00021 * p * Math.sin(2 * l3 - 3 * l4 + π4) +\r\n    0.00019 * p * Math.sin(l4 - π4 - G) +\r\n    -0.00019 * p * Math.sin(2 * l4 - π3 - π4) +\r\n    -0.00018 * p * Math.sin(l4 - π4 + G) +\r\n    -0.00016 * p * Math.sin(l4 + π3 - 2 * Π - 2 * G)\r\n  const L1 = l1 + Σ1\r\n  const L2 = l2 + Σ2\r\n  const L3 = l3 + Σ3\r\n  const L4 = l4 + Σ4\r\n\r\n  // variables assigned in following block\r\n  let I\r\n  const X = new Array(5).fill(0)\r\n  const Y = new Array(5).fill(0)\r\n  const Z = new Array(5).fill(0)\r\n  let R\r\n\r\n  ;(function () {\r\n    const L = [L1, L2, L3, L4]\r\n    const B = [\r\n      Math.atan(0.0006393 * Math.sin(L1 - ω1) +\r\n        0.0001825 * Math.sin(L1 - ω2) +\r\n        0.0000329 * Math.sin(L1 - ω3) +\r\n        -0.0000311 * Math.sin(L1 - ψ) +\r\n        0.0000093 * Math.sin(L1 - ω4) +\r\n        0.0000075 * Math.sin(3 * L1 - 4 * l2 - 1.9927 * Σ1 + ω2) +\r\n        0.0000046 * Math.sin(L1 + ψ - 2 * Π - 2 * G)),\r\n      Math.atan(0.0081004 * Math.sin(L2 - ω2) +\r\n        0.0004512 * Math.sin(L2 - ω3) +\r\n        -0.0003284 * Math.sin(L2 - ψ) +\r\n        0.0001160 * Math.sin(L2 - ω4) +\r\n        0.0000272 * Math.sin(l1 - 2 * l3 + 1.0146 * Σ2 + ω2) +\r\n        -0.0000144 * Math.sin(L2 - ω1) +\r\n        0.0000143 * Math.sin(L2 + ψ - 2 * Π - 2 * G) +\r\n        0.0000035 * Math.sin(L2 - ψ + G) +\r\n        -0.0000028 * Math.sin(l1 - 2 * l3 + 1.0146 * Σ2 + ω3)),\r\n      Math.atan(0.0032402 * Math.sin(L3 - ω3) +\r\n        -0.0016911 * Math.sin(L3 - ψ) +\r\n        0.0006847 * Math.sin(L3 - ω4) +\r\n        -0.0002797 * Math.sin(L3 - ω2) +\r\n        0.0000321 * Math.sin(L3 + ψ - 2 * Π - 2 * G) +\r\n        0.0000051 * Math.sin(L3 - ψ + G) +\r\n        -0.0000045 * Math.sin(L3 - ψ - G) +\r\n        -0.0000045 * Math.sin(L3 + ψ - 2 * Π) +\r\n        0.0000037 * Math.sin(L3 + ψ - 2 * Π - 3 * G) +\r\n        0.000003 * Math.sin(2 * l2 - 3 * L3 + 4.03 * Σ3 + ω2) +\r\n        -0.0000021 * Math.sin(2 * l2 - 3 * L3 + 4.03 * Σ3 + ω3)),\r\n      Math.atan(-0.0076579 * Math.sin(L4 - ψ) +\r\n        0.0044134 * Math.sin(L4 - ω4) +\r\n        -0.0005112 * Math.sin(L4 - ω3) +\r\n        0.0000773 * Math.sin(L4 + ψ - 2 * Π - 2 * G) +\r\n        0.0000104 * Math.sin(L4 - ψ + G) +\r\n        -0.0000102 * Math.sin(L4 - ψ - G) +\r\n        0.0000088 * Math.sin(L4 + ψ - 2 * Π - 3 * G) +\r\n        -0.0000038 * Math.sin(L4 + ψ - 2 * Π - G))\r\n    ]\r\n    R = [\r\n      5.90569 * (1 +\r\n        -0.0041339 * Math.cos(2 * (l1 - l2)) +\r\n        -0.0000387 * Math.cos(l1 - π3) +\r\n        -0.0000214 * Math.cos(l1 - π4) +\r\n        0.000017 * Math.cos(l1 - l2) +\r\n        -0.0000131 * Math.cos(4 * (l1 - l2)) +\r\n        0.0000106 * Math.cos(l1 - l3) +\r\n        -0.0000066 * Math.cos(l1 + π3 - 2 * Π - 2 * G)),\r\n      9.39657 * (1 +\r\n        0.0093848 * Math.cos(l1 - l2) +\r\n        -0.0003116 * Math.cos(l2 - π3) +\r\n        -0.0001744 * Math.cos(l2 - π4) +\r\n        -0.0001442 * Math.cos(l2 - π2) +\r\n        0.0000553 * Math.cos(l2 - l3) +\r\n        0.0000523 * Math.cos(l1 - l3) +\r\n        -0.0000290 * Math.cos(2 * (l1 - l2)) +\r\n        0.0000164 * Math.cos(2 * (l2 - ω2)) +\r\n        0.0000107 * Math.cos(l1 - 2 * l3 + π3) +\r\n        -0.0000102 * Math.cos(l2 - π1) +\r\n        -0.0000091 * Math.cos(2 * (l1 - l3))),\r\n      14.98832 * (1 +\r\n        -0.0014388 * Math.cos(l3 - π3) +\r\n        -0.0007917 * Math.cos(l3 - π4) +\r\n        0.0006342 * Math.cos(l2 - l3) +\r\n        -0.0001761 * Math.cos(2 * (l3 - l4)) +\r\n        0.0000294 * Math.cos(l3 - l4) +\r\n        -0.0000156 * Math.cos(3 * (l3 - l4)) +\r\n        0.0000156 * Math.cos(l1 - l3) +\r\n        -0.0000153 * Math.cos(l1 - l2) +\r\n        0.000007 * Math.cos(2 * l2 - 3 * l3 + π3) +\r\n        -0.0000051 * Math.cos(l3 + π3 - 2 * Π - 2 * G)),\r\n      26.36273 * (1 +\r\n        -0.0073546 * Math.cos(l4 - π4) +\r\n        0.0001621 * Math.cos(l4 - π3) +\r\n        0.0000974 * Math.cos(l3 - l4) +\r\n        -0.0000543 * Math.cos(l4 + π4 - 2 * Π - 2 * G) +\r\n        -0.0000271 * Math.cos(2 * (l4 - π4)) +\r\n        0.0000182 * Math.cos(l4 - Π) +\r\n        0.0000177 * Math.cos(2 * (l3 - l4)) +\r\n        -0.0000167 * Math.cos(2 * l4 - ψ - ω4) +\r\n        0.0000167 * Math.cos(ψ - ω4) +\r\n        -0.0000155 * Math.cos(2 * (l4 - Π - G)) +\r\n        0.0000142 * Math.cos(2 * (l4 - ψ)) +\r\n        0.0000105 * Math.cos(l1 - l4) +\r\n        0.0000092 * Math.cos(l2 - l4) +\r\n        -0.0000089 * Math.cos(l4 - Π - G) +\r\n        -0.0000062 * Math.cos(l4 + π4 - 2 * Π - 3 * G) +\r\n        0.0000048 * Math.cos(2 * (l4 - ω4)))\r\n    ]\r\n    // p. 311\r\n    const T0 = (jde - 2433282.423) / _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JulianCentury\r\n    const P = (1.3966626 * p + 0.0003088 * p * T0) * T0\r\n    for (const i in L) {\r\n      L[i] += P\r\n    }\r\n    ψ += P\r\n    const T = (jde - _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J1900) / _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JulianCentury\r\n    I = 3.120262 * p + 0.0006 * p * T\r\n    for (const i in L) {\r\n      const [sLψ, cLψ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(L[i] - ψ)\r\n      const [sB, cB] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(B[i])\r\n      X[i] = R[i] * cLψ * cB\r\n      Y[i] = R[i] * sLψ * cB\r\n      Z[i] = R[i] * sB\r\n    }\r\n  })()\r\n\r\n  Z[4] = 1\r\n  // p. 312\r\n  const A = new Array(5).fill(0)\r\n  const B = new Array(5).fill(0)\r\n  const C = new Array(5).fill(0)\r\n  const [sI, cI] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(I)\r\n  const Ω = _planetelements_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].node(_planetelements_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].jupiter, jde)\r\n  const [sΩ, cΩ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(Ω)\r\n  const [sΦ, cΦ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ψ - Ω)\r\n  const [si, ci] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(_planetelements_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].inc(_planetelements_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].jupiter, jde))\r\n  const [sλ0, cλ0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(λ0)\r\n  const [sβ0, cβ0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(β0)\r\n\r\n  for (const i in A) {\r\n    let a0\r\n    // step 1\r\n    let a = X[i]\r\n    let b = Y[i] * cI - Z[i] * sI\r\n    let c = Y[i] * sI + Z[i] * cI\r\n    // step 2\r\n    a0 = a * cΦ - b * sΦ\r\n    b = a * sΦ + b * cΦ\r\n    a = a0\r\n    // step 3\r\n    const b0 = b * ci - c * si\r\n    c = b * si + c * ci\r\n    b = b0\r\n    // step 4\r\n    a0 = a * cΩ - b * sΩ\r\n    b = a * sΩ + b * cΩ\r\n    a = a0\r\n    // step 5\r\n    a0 = a * sλ0 - b * cλ0\r\n    b = a * cλ0 + b * sλ0\r\n    a = a0\r\n    // step 6\r\n    A[i] = a\r\n    B[i] = c * sβ0 + b * cβ0\r\n    C[i] = c * cβ0 - b * sβ0\r\n  }\r\n  const [sD, cD] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(Math.atan2(A[4], C[4]))\r\n  // p. 313\r\n  for (let i = 0; i < 4; i++) {\r\n    let x = A[i] * cD - C[i] * sD\r\n    const y = A[i] * sD + C[i] * cD\r\n    const z = B[i]\r\n    // differential light time\r\n    const d = x / R[i]\r\n    x += Math.abs(z) / k[i] * Math.sqrt(1 - d * d)\r\n    // perspective effect\r\n    const W = Δ / (Δ + z / 2095)\r\n    pos[i] = new XY(x * W, y * W)\r\n  }\r\n  return pos\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  io,\r\n  europa,\r\n  ganymede,\r\n  callisto,\r\n  positions,\r\n  e5\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/jupitermoons.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/kepler.js":
/*!***********************************************!*\
  !*** ./node_modules/astronomia/src/kepler.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   kepler1: () => (/* binding */ kepler1),\n/* harmony export */   kepler2: () => (/* binding */ kepler2),\n/* harmony export */   kepler2a: () => (/* binding */ kepler2a),\n/* harmony export */   kepler2b: () => (/* binding */ kepler2b),\n/* harmony export */   kepler3: () => (/* binding */ kepler3),\n/* harmony export */   kepler4: () => (/* binding */ kepler4),\n/* harmony export */   radius: () => (/* binding */ radius),\n/* harmony export */   trueAnomaly: () => (/* binding */ trueAnomaly)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _iterate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterate.js */ \"./node_modules/astronomia/src/iterate.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module kepler\r\n */\r\n/**\r\n * Kepler: Chapter 30, Equation of Kepler.\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * True returns true anomaly ν for given eccentric anomaly E.\r\n *\r\n * @param {number} e - eccentricity\r\n * @param {number} E - eccentric anomaly in radians.\r\n * @return true anomaly ν in radians.\r\n */\r\nfunction trueAnomaly (E, e) {\r\n  // (30.1) p. 195\r\n  return 2 * Math.atan(Math.sqrt((1 + e) / (1 - e)) * Math.tan(E * 0.5))\r\n}\r\n\r\n/**\r\n * Radius returns radius distance r for given eccentric anomaly E.\r\n *\r\n * Result unit is the unit of semimajor axis a (typically AU.)\r\n *\r\n * @param {number} e - eccentricity\r\n * @param {number} E - eccentric anomaly in radians\r\n * @param {number} a - semimajor axis\r\n * @return {number} radius distance in unit of `a`\r\n */\r\nfunction radius (E, e, a) { // (E, e, a float64)  float64\r\n  // (30.2) p. 195\r\n  return a * (1 - e * Math.cos(E))\r\n}\r\n\r\n/**\r\n * Kepler1 solves Kepler's equation by iteration.\r\n *\r\n * The iterated formula is\r\n *\r\n *  E1 = m + e * sin(E0)\r\n *\r\n * For some vaues of e and M it will fail to converge and the\r\n * function will return an error.\r\n *\r\n * @throws Error\r\n * @param {number} e - eccentricity\r\n * @param {number} m - mean anomaly in radians\r\n * @param {number} places - (int) desired number of decimal places in the result\r\n * @return {number} eccentric anomaly `E` in radians.\r\n */\r\nfunction kepler1 (e, m, places) {\r\n  const f = function (E0) {\r\n    return m + e * Math.sin(E0) // (30.5) p. 195\r\n  }\r\n  return _iterate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].decimalPlaces(f, m, places, places * 5)\r\n}\r\n\r\n/**\r\n * Kepler2 solves Kepler's equation by iteration.\r\n *\r\n * The iterated formula is\r\n *\r\n *  E1 = E0 + (m + e * sin(E0) - E0) / (1 - e * cos(E0))\r\n *\r\n * The function converges over a wider range of inputs than does Kepler1\r\n * but it also fails to converge for some values of e and M.\r\n *\r\n * @throws Error\r\n * @param {number} e - eccentricity\r\n * @param {number} m - mean anomaly in radians\r\n * @param {number} places - (int) desired number of decimal places in the result\r\n * @return {number} eccentric anomaly `E` in radians.\r\n */\r\nfunction kepler2 (e, m, places) { // (e, M float64, places int)  (E float64, err error)\r\n  const f = function (E0) {\r\n    const [se, ce] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(E0)\r\n    return E0 + (m + e * se - E0) / (1 - e * ce) // (30.7) p. 199\r\n  }\r\n  return _iterate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].decimalPlaces(f, m, places, places)\r\n}\r\n\r\n/**\r\n * Kepler2a solves Kepler's equation by iteration.\r\n *\r\n * The iterated formula is the same as in Kepler2 but a limiting function\r\n * avoids divergence.\r\n *\r\n * @throws Error\r\n * @param {number} e - eccentricity\r\n * @param {number} m - mean anomaly in radians\r\n * @param {number} places - (int) desired number of decimal places in the result\r\n * @return {number} eccentric anomaly `E` in radians.\r\n */\r\nfunction kepler2a (e, m, places) { // (e, M float64, places int)  (E float64, err error)\r\n  const f = function (E0) {\r\n    const [se, ce] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(E0)\r\n    // method of Leingärtner, p. 205\r\n    return E0 + Math.asin(Math.sin((m + e * se - E0) / (1 - e * ce)))\r\n  }\r\n  return _iterate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].decimalPlaces(f, m, places, places * 5)\r\n}\r\n\r\n/**\r\n * Kepler2b solves Kepler's equation by iteration.\r\n *\r\n * The iterated formula is the same as in Kepler2 but a (different) limiting\r\n * function avoids divergence.\r\n *\r\n * @throws Error\r\n * @param {number} e - eccentricity\r\n * @param {number} m - mean anomaly in radians\r\n * @param {number} places - (int) desired number of decimal places in the result\r\n * @return {number} eccentric anomaly `E` in radians.\r\n */\r\nfunction kepler2b (e, m, places) { // (e, M float64, places int)  (E float64, err error)\r\n  const f = function (E0) {\r\n    const [se, ce] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(E0)\r\n    let d = (m + e * se - E0) / (1 - e * ce)\r\n    // method of Steele, p. 205\r\n    if (d > 0.5) {\r\n      d = 0.5\r\n    } else if (d < -0.5) {\r\n      d = -0.5\r\n    }\r\n    return E0 + d\r\n  }\r\n  return _iterate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].decimalPlaces(f, m, places, places)\r\n}\r\n\r\n/**\r\n * Kepler3 solves Kepler's equation by binary search.\r\n *\r\n * @throws Error\r\n * @param {number} e - eccentricity\r\n * @param {number} m - mean anomaly in radians\r\n * @return {number} eccentric anomaly `E` in radians.\r\n */\r\nfunction kepler3 (e, m) { // (e, m float64)  (E float64)\r\n  // adapted from BASIC, p. 206\r\n  m = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(m, 2 * Math.PI)\r\n  let f = 1\r\n  if (m > Math.PI) {\r\n    f = -1\r\n    m = 2 * Math.PI - m\r\n  }\r\n  let E0 = Math.PI * 0.5\r\n  let d = Math.PI * 0.25\r\n  for (let i = 0; i < 53; i++) {\r\n    const M1 = E0 - e * Math.sin(E0)\r\n    if (m - M1 < 0) {\r\n      E0 -= d\r\n    } else {\r\n      E0 += d\r\n    }\r\n    d *= 0.5\r\n  }\r\n  if (f < 0) {\r\n    return -E0\r\n  }\r\n  return E0\r\n}\r\n\r\n/**\r\n * Kepler4 returns an approximate solution to Kepler's equation.\r\n *\r\n * It is valid only for small values of e.\r\n *\r\n * @param {number} e - eccentricity\r\n * @param {number} m - mean anomaly in radians\r\n * @return {number} eccentric anomaly `E` in radians.\r\n */\r\nfunction kepler4 (e, m) { // (e, m float64)  (E float64)\r\n  const [sm, cm] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(m)\r\n  return Math.atan2(sm, cm - e) // (30.8) p. 206\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  trueAnomaly,\r\n  true: trueAnomaly, // BACKWARDS-COMPATIBILITY\r\n  radius,\r\n  kepler1,\r\n  kepler2,\r\n  kepler2a,\r\n  kepler2b,\r\n  kepler3,\r\n  kepler4\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/kepler.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/line.js":
/*!*********************************************!*\
  !*** ./node_modules/astronomia/src/line.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   angleError: () => (/* binding */ angleError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   time: () => (/* binding */ time)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _interpolation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interpolation.js */ \"./node_modules/astronomia/src/interpolation.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module line\r\n */\r\n/**\r\n * Line: Chapter 19, Bodies in Straight Line\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * Time computes the time at which a moving body is on a straight line (great\r\n * circle) between two fixed points, such as stars.\r\n *\r\n * Coordinates may be right ascensions and declinations or longitudes and\r\n * latitudes.  Fixed points are r1, d1, r2, d2.  Moving body is an ephemeris\r\n * of 5 rows, r3, d3, starting at time t1 and ending at time t5.  Time scale\r\n * is arbitrary.\r\n *\r\n * @throws Error\r\n * @param {Number} r1 - right ascension Coordinate 1\r\n * @param {Number} d1 - declination Coordinate 1\r\n * @param {Number} r2 - right ascension Coordinate 2\r\n * @param {Number} d2 - declination Coordinate 2\r\n * @param {Number[]} r3 - right ascension Coordinate 3\r\n * @param {Number[]} d3 - declination Coordinate 3\r\n * @param {Number} t1 - time in Julian Days\r\n * @param {Number} t5 - time in Julian Days\r\n * @returns {Number} time of alignment in Julian Days\r\n */\r\nfunction time (r1, d1, r2, d2, r3, d3, t1, t5) { // (r1, d1, r2, d2 float64, r3, d3 []float64, t1, t5 float64)  (float64, error)\r\n  if (r3.length !== 5 || d3.length !== 5) {\r\n    throw new Error('r3, d3 must be length 5')\r\n  }\r\n  const gc = new Array(5)\r\n  r3.forEach((r3i, i) => {\r\n    // (19.1) p. 121\r\n    gc[i] = Math.tan(d1) * Math.sin(r2 - r3i) +\r\n      Math.tan(d2) * Math.sin(r3i - r1) +\r\n      Math.tan(d3[i]) * Math.sin(r1 - r2)\r\n  })\r\n  const l5 = new _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Len5(t1, t5, gc)\r\n  return l5.zero(false)\r\n}\r\n\r\n/**\r\n * Angle returns the angle between great circles defined by three points.\r\n *\r\n * Coordinates may be right ascensions and declinations or longitudes and\r\n * latitudes.  If r1, d1, r2, d2 defines one line and r2, d2, r3, d3 defines\r\n * another, the result is the angle between the two lines.\r\n *\r\n * Algorithm by Meeus.\r\n */\r\nfunction angle (r1, d1, r2, d2, r3, d3) { // (r1, d1, r2, d2, r3, d3 float64)  float64\r\n  const [sd2, cd2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(d2)\r\n  const [sr21, cr21] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r2 - r1)\r\n  const [sr32, cr32] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r3 - r2)\r\n  const C1 = Math.atan2(sr21, cd2 * Math.tan(d1) - sd2 * cr21)\r\n  const C2 = Math.atan2(sr32, cd2 * Math.tan(d3) - sd2 * cr32)\r\n  return C1 + C2\r\n}\r\n\r\n/**\r\n * Error returns an error angle of three nearly co-linear points.\r\n *\r\n * For the line defined by r1, d1, r2, d2, the result is the anglular distance\r\n * between that line and r0, d0.\r\n *\r\n * Algorithm by Meeus.\r\n */\r\nfunction error (r1, d1, r2, d2, r0, d0) { // (r1, d1, r2, d2, r0, d0 float64)  float64\r\n  const [sr1, cr1] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r1)\r\n  const [sd1, cd1] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(d1)\r\n  const [sr2, cr2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r2)\r\n  const [sd2, cd2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(d2)\r\n  const X1 = cd1 * cr1\r\n  const X2 = cd2 * cr2\r\n  const Y1 = cd1 * sr1\r\n  const Y2 = cd2 * sr2\r\n  const Z1 = sd1\r\n  const Z2 = sd2\r\n  const A = Y1 * Z2 - Z1 * Y2\r\n  const B = Z1 * X2 - X1 * Z2\r\n  const C = X1 * Y2 - Y1 * X2\r\n  const m = Math.tan(r0)\r\n  const n = Math.tan(d0) / Math.cos(r0)\r\n  return Math.asin((A + B * m + C * n) /\r\n    (Math.sqrt(A * A + B * B + C * C) * Math.sqrt(1 + m * m + n * n)))\r\n}\r\n\r\n/**\r\n * AngleError returns both an angle as in the function Angle, and an error\r\n * as in the function Error.\r\n *\r\n * The algorithm is by B. Pessens.\r\n *\r\n * @returns {Number[]} [ψ, ω]\r\n *  {Number} ψ - angle between great circles defined by three points.\r\n *  {Number} ω - error angle of three nearly co-linear points\r\n */\r\nfunction angleError (r1, d1, r2, d2, r3, d3) {\r\n  const [sr1, cr1] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r1)\r\n  const [c1, cd1] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(d1)\r\n  const [sr2, cr2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r2)\r\n  const [c2, cd2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(d2)\r\n  const [sr3, cr3] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(r3)\r\n  const [c3, cd3] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(d3)\r\n  const a1 = cd1 * cr1\r\n  const a2 = cd2 * cr2\r\n  const a3 = cd3 * cr3\r\n  const b1 = cd1 * sr1\r\n  const b2 = cd2 * sr2\r\n  const b3 = cd3 * sr3\r\n  const l1 = b1 * c2 - b2 * c1\r\n  const l2 = b2 * c3 - b3 * c2\r\n  const l3 = b1 * c3 - b3 * c1\r\n  const m1 = c1 * a2 - c2 * a1\r\n  const m2 = c2 * a3 - c3 * a2\r\n  const m3 = c1 * a3 - c3 * a1\r\n  const n1 = a1 * b2 - a2 * b1\r\n  const n2 = a2 * b3 - a3 * b2\r\n  const n3 = a1 * b3 - a3 * b1\r\n  const ψ = Math.acos((l1 * l2 + m1 * m2 + n1 * n2) /\r\n    (Math.sqrt(l1 * l1 + m1 * m1 + n1 * n1) * Math.sqrt(l2 * l2 + m2 * m2 + n2 * n2)))\r\n  const ω = Math.asin((a2 * l3 + b2 * m3 + c2 * n3) /\r\n    (Math.sqrt(a2 * a2 + b2 * b2 + c2 * c2) * Math.sqrt(l3 * l3 + m3 * m3 + n3 * n3)))\r\n  return [ψ, ω]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  time,\r\n  angle,\r\n  error,\r\n  angleError\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/line.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/mars.js":
/*!*********************************************!*\
  !*** ./node_modules/astronomia/src/mars.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   physical: () => (/* binding */ physical)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _illum_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./illum.js */ \"./node_modules/astronomia/src/illum.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module mars\r\n */\r\n/**\r\n * Mars: Chapter 42, Ephemeris for Physical Observations of Mars.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n/**\r\n * Physical computes quantities for physical observations of Mars.\r\n *\r\n * Results:\r\n *  DE  planetocentric declination of the Earth.\r\n *  DS  planetocentric declination of the Sun.\r\n *  ω   Areographic longitude of the central meridian, as seen from Earth.\r\n *  P   Geocentric position angle of Mars' northern rotation pole.\r\n *  Q   Position angle of greatest defect of illumination.\r\n *  d   Apparent diameter of Mars.\r\n *  k   Illuminated fraction of the disk.\r\n *  q   Greatest defect of illumination.\r\n *\r\n * All angular results (all results except k) are in radians.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @param {Planet} earth\r\n * @param {Planet} mars\r\n */\r\nfunction physical (jde, earth, mars) { // (jde float64, earth, mars *pp.V87Planet)  (DE, DS, ω, P, Q, d, k, q float64)\r\n  // Step 1.0\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  const p = Math.PI / 180\r\n  // (42.1) p. 288\r\n  let λ0 = 352.9065 * p + 1.1733 * p * T\r\n  const β0 = 63.2818 * p - 0.00394 * p * T\r\n  // Step 2.0\r\n  const earthPos = earth.position(jde)\r\n  const R = earthPos.range\r\n  const fk5 = _planetposition_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].toFK5(earthPos.lon, earthPos.lat, jde)\r\n  const [l0, b0] = [fk5.lon, fk5.lat]\r\n  // Steps 3, 4.0\r\n  const [sl0, cl0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l0)\r\n  const sb0 = Math.sin(b0)\r\n  let Δ = 0.5 // surely better than 0.0\r\n  let τ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lightTime(Δ)\r\n  let l = 0\r\n  let b = 0\r\n  let r = 0\r\n  let x = 0\r\n  let y = 0\r\n  let z = 0\r\n\r\n  function f () {\r\n    const marsPos = mars.position(jde - τ)\r\n    r = marsPos.range\r\n    const fk5 = _planetposition_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].toFK5(marsPos.lon, marsPos.lat, jde)\r\n    l = fk5.lon\r\n    b = fk5.lat\r\n    const [sb, cb] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(b)\r\n    const [sl, cl] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l)\r\n    // (42.2) p. 289\r\n    x = r * cb * cl - R * cl0\r\n    y = r * cb * sl - R * sl0\r\n    z = r * sb - R * sb0\r\n    // (42.3) p. 289\r\n    Δ = Math.sqrt(x * x + y * y + z * z)\r\n    τ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lightTime(Δ)\r\n  }\r\n\r\n  f()\r\n  f()\r\n  // Step 5.0\r\n  let λ = Math.atan2(y, x)\r\n  let β = Math.atan(z / Math.hypot(x, y))\r\n  // Step 6.0\r\n  const [sβ0, cβ0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(β0)\r\n  const [sβ, cβ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(β)\r\n  const DE = Math.asin(-sβ0 * sβ - cβ0 * cβ * Math.cos(λ0 - λ))\r\n  // Step 7.0\r\n  const N = 49.5581 * p + 0.7721 * p * T\r\n  const lʹ = l - 0.00697 * p / r\r\n  const bʹ = b - 0.000225 * p * Math.cos(l - N) / r\r\n  // Step 8.0\r\n  const [sbʹ, cbʹ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(bʹ)\r\n  const DS = Math.asin(-sβ0 * sbʹ - cβ0 * cbʹ * Math.cos(λ0 - lʹ))\r\n  // Step 9.0\r\n  const W = 11.504 * p + 350.89200025 * p * (jde - τ - 2433282.5)\r\n  // Step 10.0\r\n  const ε0 = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].meanObliquity(jde)\r\n  const [sε0, cε0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε0)\r\n  let eq = new _coord_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Ecliptic(λ0, β0).toEquatorial(ε0)\r\n  const [α0, δ0] = [eq.ra, eq.dec]\r\n  // Step 11.0\r\n  const u = y * cε0 - z * sε0\r\n  const v = y * sε0 + z * cε0\r\n  const α = Math.atan2(u, x)\r\n  const δ = Math.atan(v / Math.hypot(x, u))\r\n  const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n  const [sδ0, cδ0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ0)\r\n  const [sα0α, cα0α] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α0 - α)\r\n  const ζ = Math.atan2(sδ0 * cδ * cα0α - sδ * cδ0, cδ * sα0α)\r\n  // Step 12.0\r\n  const ω = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(W - ζ, 2 * Math.PI)\r\n  // Step 13.0\r\n  const [Δψ, Δε] = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].nutation(jde)\r\n  // Step 14.0\r\n  const [sl0λ, cl0λ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l0 - λ)\r\n  λ += 0.005693 * p * cl0λ / cβ\r\n  β += 0.005693 * p * sl0λ * sβ\r\n  // Step 15.0\r\n  λ0 += Δψ\r\n  λ += Δψ\r\n  const ε = ε0 + Δε\r\n  // Step 16.0\r\n  const [sε, cε] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε)\r\n  eq = new _coord_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Ecliptic(λ0, β0).toEquatorial(ε)\r\n  const [α0ʹ, δ0ʹ] = [eq.ra, eq.dec]\r\n  eq = new _coord_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Ecliptic(λ, β).toEquatorial(ε)\r\n  const [αʹ, δʹ] = [eq.ra, eq.dec]\r\n  // Step 17.0\r\n  const [sδ0ʹ, cδ0ʹ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ0ʹ)\r\n  const [sδʹ, cδʹ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δʹ)\r\n  const [sα0ʹαʹ, cα0ʹαʹ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α0ʹ - αʹ)\r\n  // (42.4) p. 290\r\n  let P = Math.atan2(cδ0ʹ * sα0ʹαʹ, sδ0ʹ * cδʹ - cδ0ʹ * sδʹ * cα0ʹαʹ)\r\n  if (P < 0) {\r\n    P += 2 * Math.PI\r\n  }\r\n  // Step 18.0\r\n  const s = l0 + Math.PI\r\n  const [ss, cs] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(s)\r\n  const αs = Math.atan2(cε * ss, cs)\r\n  const δs = Math.asin(sε * ss)\r\n  const [sδs, cδs] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δs)\r\n  const [sαsα, cαsα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(αs - α)\r\n  const χ = Math.atan2(cδs * sαsα, sδs * cδ - cδs * sδ * cαsα)\r\n  const Q = χ + Math.PI\r\n  // Step 19.0\r\n  const d = 9.36 / 60 / 60 * Math.PI / 180 / Δ\r\n  const k = _illum_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].fraction(r, Δ, R)\r\n  const q = (1 - k) * d\r\n  return [DE, DS, ω, P, Q, d, k, q]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  physical\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/mars.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/moon.js":
/*!*********************************************!*\
  !*** ./node_modules/astronomia/src/moon.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Moon: () => (/* binding */ Moon),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   physical: () => (/* binding */ physical),\n/* harmony export */   selenographic: () => (/* binding */ selenographic),\n/* harmony export */   sunAltitude: () => (/* binding */ sunAltitude),\n/* harmony export */   sunrise: () => (/* binding */ sunrise),\n/* harmony export */   sunset: () => (/* binding */ sunset)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _moonposition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./moonposition.js */ \"./node_modules/astronomia/src/moonposition.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module moon\r\n */\r\n/**\r\n * Moon: Chapter 53, Ephemeris for Physical Observations of the Moon.\r\n *\r\n * Incomplete.  Topocentric functions are commented out for lack of test data.\r\n */\r\n\r\n// eslint-disable-line no-unused-vars\r\n\r\n\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\nconst { sin, cos, asin, atan2 } = Math\r\nconst D2R = Math.PI / 180\r\nconst _I = 1.54242 * D2R // IAU value of inclination of mean lunar equator\r\n\r\nconst [sI, cI] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(_I)\r\n\r\n/**\r\n * Physical returns quantities useful for physical observation of the Moon.\r\n *\r\n * Returned l, b are librations in selenographic longitude and latitude.\r\n * They represent combined optical and physical librations.  Topocentric\r\n * librations are not considered.\r\n *\r\n * Returned P is the the position angle of the Moon's axis of rotation.\r\n *\r\n * Returned l0, b0 are the selenographic coordinates of the Sun.\r\n *\r\n * Returned values all in radians.\r\n\r\n * @param {number} jde - Julian ephemeris day\r\n * @param {Planet} earth - VSOP87 Planet Earth\r\n * @return {Array}\r\n *    {base.Coord} cMoon - selenographic longitude, latitude of the Moon\r\n *    {number} P - position angle of the Moon's axis of rotation\r\n *    {base.Coord} cSun - selenographic longitude, latitude of the Sun.\r\n */\r\nfunction physical (jde, earth) {\r\n  const { lon, lat, range } = _moonposition_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].position(jde) // (λ without nutation)\r\n  // [λ, β, Δ]\r\n  const m = new Moon(jde)\r\n  const [l, b] = m.lib(lon, lat)\r\n  const P = m.pa(lon, lat, b)\r\n  const [l0, b0] = m.sun(lon, lat, range, earth)\r\n  const cMoon = new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(l, b)\r\n  const cSun = new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(l0, b0)\r\n  return [cMoon, P, cSun]\r\n}\r\n\r\n/**\r\n * Quantities computed for a jde and used in computing return values of\r\n * physical().  Computations are broken into several methods to organize\r\n * the code.\r\n */\r\nclass Moon {\r\n  constructor (jde) {\r\n    this.jde = jde\r\n    // Δψ, F, Ω, p. 372.0\r\n    const [Δψ, Δε] = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].nutation(jde)\r\n    this.Δψ = Δψ\r\n    const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n    const F = this.F = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 93.272095 * D2R, 483202.0175233 * D2R, -0.0036539 * D2R, -D2R / 3526000, D2R / 863310000)\r\n    this.Ω = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 125.0445479 * D2R, -1934.1362891 * D2R, 0.0020754 * D2R,\r\n      D2R / 467441, -D2R / 60616000)\r\n    // true ecliptic\r\n    this.ε = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].meanObliquity(jde) + Δε\r\n    this.sε = sin(this.ε)\r\n    this.cε = cos(this.ε)\r\n    // ρ, σ, τ, p. 372,373\r\n    const D = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 297.8501921 * D2R, 445267.1114034 * D2R, -0.0018819 * D2R, D2R / 545868, -D2R / 113065000)\r\n    const M = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 357.5291092 * D2R, 35999.0502909 * D2R, -0.0001536 * D2R, D2R / 24490000)\r\n    const M_ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 134.9633964 * D2R, 477198.8675055 * D2R,\r\n      0.0087414 * D2R, D2R / 69699, -D2R / 14712000)\r\n    const E = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 1, -0.002516, -0.0000074)\r\n    const K1 = 119.75 * D2R + 131.849 * D2R * T\r\n    const K2 = 72.56 * D2R + 20.186 * D2R * T\r\n    this.ρ = -0.02752 * D2R * cos(M_) +\r\n      -0.02245 * D2R * sin(F) +\r\n      0.00684 * D2R * cos(M_ - 2 * F) +\r\n      -0.00293 * D2R * cos(2 * F) +\r\n      -0.00085 * D2R * cos(2 * (F - D)) +\r\n      -0.00054 * D2R * cos(M_ - 2 * D) +\r\n      -0.0002 * D2R * sin(M_ + F) +\r\n      -0.0002 * D2R * cos(M_ + 2 * F) +\r\n      -0.0002 * D2R * cos(M_ - F) +\r\n      0.00014 * D2R * cos(M_ + 2 * (F - D))\r\n    this.σ = -0.02816 * D2R * sin(M_) +\r\n      0.02244 * D2R * cos(F) +\r\n      -0.00682 * D2R * sin(M_ - 2 * F) +\r\n      -0.00279 * D2R * sin(2 * F) +\r\n      -0.00083 * D2R * sin(2 * (F - D)) +\r\n      0.00069 * D2R * sin(M_ - 2 * D) +\r\n      0.0004 * D2R * cos(M_ + F) +\r\n      -0.00025 * D2R * sin(2 * M_) +\r\n      -0.00023 * D2R * sin(M_ + 2 * F) +\r\n      0.0002 * D2R * cos(M_ - F) +\r\n      0.00019 * D2R * sin(M_ - F) +\r\n      0.00013 * D2R * sin(M_ + 2 * (F - D)) +\r\n      -0.0001 * D2R * cos(M_ - 3 * F)\r\n    this.τ = 0.0252 * D2R * sin(M) * E +\r\n      0.00473 * D2R * sin(2 * (M_ - F)) +\r\n      -0.00467 * D2R * sin(M_) +\r\n      0.00396 * D2R * sin(K1) +\r\n      0.00276 * D2R * sin(2 * (M_ - D)) +\r\n      0.00196 * D2R * sin(this.Ω) +\r\n      -0.00183 * D2R * cos(M_ - F) +\r\n      0.00115 * D2R * sin(M_ - 2 * D) +\r\n      -0.00096 * D2R * sin(M_ - D) +\r\n      0.00046 * D2R * sin(2 * (F - D)) +\r\n      -0.00039 * D2R * sin(M_ - F) +\r\n      -0.00032 * D2R * sin(M_ - M - D) +\r\n      0.00027 * D2R * sin(2 * (M_ - D) - M) +\r\n      0.00023 * D2R * sin(K2) +\r\n      -0.00014 * D2R * sin(2 * D) +\r\n      0.00014 * D2R * cos(2 * (M_ - F)) +\r\n      -0.00012 * D2R * sin(M_ - 2 * F) +\r\n      -0.00012 * D2R * sin(2 * M_) +\r\n      0.00011 * D2R * sin(2 * (M_ - M - D))\r\n  }\r\n\r\n  /**\r\n   * lib() curiously serves for computing both librations and solar coordinates,\r\n   * depending on the coordinates λ, β passed in.  Quantity A not described in\r\n   * the book, but clearly depends on the λ, β of the current context and so\r\n   * does not belong in the moon struct.  Instead just return it from optical\r\n   * and pass it along to physical.\r\n   */\r\n  lib (λ, β) {\r\n    const [l_, b_, A] = this.optical(λ, β)\r\n    const [l$, b$] = this.physical(A, b_)\r\n    let l = l_ + l$\r\n    if (l > Math.PI) {\r\n      l -= 2 * Math.PI\r\n    }\r\n    const b = b_ + b$\r\n    return [l, b]\r\n  }\r\n\r\n  optical (λ, β) {\r\n    // (53.1) p. 372\r\n    const W = λ - this.Ω // (λ without nutation)\r\n    const [sW, cW] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(W)\r\n    const [sβ, cβ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(β)\r\n    const A = atan2(sW * cβ * cI - sβ * sI, cW * cβ)\r\n    const l_ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(A - this.F, 2 * Math.PI)\r\n    const b_ = asin(-sW * cβ * sI - sβ * cI)\r\n    return [l_, b_, A]\r\n  }\r\n\r\n  physical (A, b_) {\r\n    // (53.2) p. 373\r\n    const [sA, cA] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(A)\r\n    const l$ = -this.τ + (this.ρ * cA + this.σ * sA) * Math.tan(b_)\r\n    const b$ = this.σ * cA - this.ρ * sA\r\n    return [l$, b$]\r\n  }\r\n\r\n  pa (λ, β, b) {\r\n    const V = this.Ω + this.Δψ + this.σ / sI\r\n    const [sV, cV] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(V)\r\n    const [sIρ, cIρ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(_I + this.ρ)\r\n    const X = sIρ * sV\r\n    const Y = sIρ * cV * this.cε - cIρ * this.sε\r\n    const ω = Math.atan2(X, Y)\r\n    const ecl = new _coord_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Ecliptic(λ + this.Δψ, β).toEquatorial(this.ε) // eslint-disable-line no-unused-vars\r\n    let P = asin(Math.hypot(X, Y) * cos(ecl.ra - ω) / cos(b))\r\n    if (P < 0) {\r\n      P += 2 * Math.PI\r\n    }\r\n    return P\r\n  }\r\n\r\n  sun (λ, β, Δ, earth) {\r\n    const { lon, lat, range } = _solar_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].apparentVSOP87(earth, this.jde) // eslint-disable-line no-unused-vars\r\n    const ΔR = Δ / (range * _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AU)\r\n    const λH = lon + Math.PI + 57.296 * D2R * ΔR * cos(β) * sin(lon - λ)\r\n    const βH = ΔR * β\r\n    return this.lib(λH, βH)\r\n  }\r\n}\r\n\r\n/* commented out for lack of test data\r\nexport function Topocentric (jde, ρsφ_, ρcφ_, L) { // (jde, ρsφ_, ρcφ_, L float64)  (l, b, P float64)\r\n  λ, β, Δ := moonposition.Position(jde) // (λ without nutation)\r\n  Δψ, Δε := nutation.Nutation(jde)\r\n  sε, cε := base.sincos(nutation.MeanObliquity(jde) + Δε)\r\n  α, δ := coord.EclToEq(λ+Δψ, β, sε, cε)\r\n  α, δ = parallax.Topocentric(α, δ, Δ/base.AU, ρsφ_, ρcφ_, L, jde)\r\n  λ, β = coord.EqToEcl(α, δ, sε, cε)\r\n  const m = newMoon(jde)\r\n  l, b = m.lib(λ, β)\r\n  P = m.pa(λ, β, b)\r\n  return\r\n}\r\n\r\nexport function TopocentricCorrections (jde, b, P, φ, δ, H, π) { // (jde, b, P, φ, δ, H, π float64)  (Δl, Δb, ΔP float64)\r\n  sφ, cφ := base.sincos(φ)\r\n  sH, cH := base.sincos(H)\r\n  sδ, cδ := base.sincos(δ)\r\n  const Q = Math.atan(cφ * sH / (cδ*sφ - sδ*cφ*cH))\r\n  const z = Math.acos(sδ*sφ + cδ*cφ*cH)\r\n  const π_ = π * (sin(z) + 0.0084*sin(2*z))\r\n  sQP, cQP := base.sincos(Q - P)\r\n  Δl = -π_ * sQP / cos(b)\r\n  Δb = π_ * cQP\r\n  ΔP = Δl*sin(b+Δb) - π_*sin(Q)*Math.tan(δ)\r\n  return\r\n}\r\n*/\r\n\r\n/**\r\n * SunAltitude returns altitude of the Sun above the lunar horizon.\r\n *\r\n * @param {Coord} cOnMoon - selenographic longitude and latitude of a site on the Moon\r\n * @param {Coord} cSun - selenographic coordinates of the Sun (as returned by physical(), for example.)\r\n * @return altitude in radians.\r\n */\r\nfunction sunAltitude (cOnMoon, cSun) { // (η, θ, l0, b0 float64)  float64\r\n  const c0 = Math.PI / 2 - cSun.lon\r\n  const [sb0, cb0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(cSun.lat)\r\n  const [sθ, cθ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(cOnMoon.lat)\r\n  return asin(sb0 * sθ + cb0 * cθ * sin(c0 + cOnMoon.lon))\r\n}\r\n\r\n/**\r\n * Sunrise returns time of sunrise for a point on the Moon near the given date.\r\n *\r\n * @param {Coord} cOnMoon - selenographic longitude and latitude of a site on the Moon\r\n * @param {Number} jde - Julian ephemeris day\r\n * @param {Planet} earth - VSOP87 Planet Earth\r\n * @return time of sunrise as a jde nearest the given jde.\r\n */\r\nfunction sunrise (cOnMoon, jde, earth) { // (η, θ, jde float64, earth *pp.V87Planet)  float64\r\n  jde -= srCorr(cOnMoon, jde, earth)\r\n  return jde - srCorr(cOnMoon, jde, earth)\r\n}\r\n\r\n/**\r\n * Sunset returns time of sunset for a point on the Moon near the given date.\r\n *\r\n * @param {Coord} cOnMoon - selenographic longitude and latitude of a site on the Moon\r\n * @param {Number} jde - Julian ephemeris day\r\n * @param {Planet} earth - VSOP87 Planet Earth\r\n * @return time of sunset as a jde nearest the given jde.\r\n */\r\nfunction sunset (cOnMoon, jde, earth) { // (η, θ, jde float64, earth *pp.V87Planet)  float64\r\n  jde += srCorr(cOnMoon, jde, earth)\r\n  return jde + srCorr(cOnMoon, jde, earth)\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction srCorr (cOnMoon, jde, earth) {\r\n  const phy = physical(jde, earth)\r\n  const h = sunAltitude(cOnMoon, phy[2])\r\n  return h / (12.19075 * D2R * cos(cOnMoon.lat))\r\n}\r\n\r\nconst lunarCoord = (η, θ) => new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(η * D2R, θ * D2R)\r\n/**\r\n * selenographic coordinates of some lunar features\r\n * Table 53.A\r\n */\r\nconst selenographic = {\r\n  archimedes: lunarCoord(-3.9, 29.7),\r\n  aristarchus: lunarCoord(-47.5, 23.7),\r\n  aristillus: lunarCoord(1.2, 33.9),\r\n  aristoteles: lunarCoord(17.3, 50.1),\r\n  arzachel: lunarCoord(-1.9, -17.7),\r\n  autolycus: lunarCoord(1.5, 30.7),\r\n  billy: lunarCoord(-50, -13.8),\r\n  birt: lunarCoord(-8.5, -22.3),\r\n  campanus: lunarCoord(-27.7, -28),\r\n  censorinus: lunarCoord(32.7, -0.4),\r\n  clavius: lunarCoord(-14, -58),\r\n  copernicus: lunarCoord(-20, 9.7),\r\n  delambre: lunarCoord(17.5, -1.9),\r\n  dionysius: lunarCoord(17.3, 2.8),\r\n  endymion: lunarCoord(56.4, 53.6),\r\n  eratosthenes: lunarCoord(-11.3, 14.5),\r\n  eudoxus: lunarCoord(16.3, 44.3),\r\n  fracastorius: lunarCoord(33.2, -21),\r\n  fraMauro: lunarCoord(-17, -6),\r\n  gassendi: lunarCoord(-39.9, -17.5),\r\n  goclenius: lunarCoord(45, -10.1),\r\n  grimaldi: lunarCoord(-68.5, -5.8),\r\n  harpalus: lunarCoord(-43.4, 52.6),\r\n  horrocks: lunarCoord(5.9, -4),\r\n  kepler: lunarCoord(-38, 8.1),\r\n  langrenus: lunarCoord(60.9, -8.9),\r\n  lansberg: lunarCoord(-26.6, -0.3),\r\n  letronne: lunarCoord(-43, -10),\r\n  macrobius: lunarCoord(46, 21.2),\r\n  manilius: lunarCoord(9.1, 14.5),\r\n  menelaus: lunarCoord(16, 16.3),\r\n  messier: lunarCoord(47.6, -1.9),\r\n  petavius: lunarCoord(61, -25),\r\n  pico: lunarCoord(-8.8, 45.8),\r\n  pitatus: lunarCoord(-13.5, -29.8),\r\n  piton: lunarCoord(-0.8, 40.8),\r\n  plato: lunarCoord(-9.2, 51.4),\r\n  plinius: lunarCoord(23.6, 15.3),\r\n  posidonius: lunarCoord(30, 31.9),\r\n  proclus: lunarCoord(46.9, 16.1),\r\n  ptolemeusA: lunarCoord(-0.8, -8.5),\r\n  pytheas: lunarCoord(-20.6, 20.5),\r\n  reinhold: lunarCoord(-22.8, 3.2),\r\n  riccioli: lunarCoord(-74.3, -3.2),\r\n  schickard: lunarCoord(-54.5, -44),\r\n  schiller: lunarCoord(-39, -52),\r\n  tauruntius: lunarCoord(46.5, 5.6),\r\n  theophilus: lunarCoord(26.5, -11.4),\r\n  timocharis: lunarCoord(-13.1, 26.7),\r\n  tycho: lunarCoord(-11, -43.2),\r\n  vitruvius: lunarCoord(31.3, 17.6),\r\n  walter: lunarCoord(1, -33)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  physical,\r\n  Moon,\r\n  // Topocentric,\r\n  // TopocentricCorrections,\r\n  sunAltitude,\r\n  sunrise,\r\n  sunset,\r\n  selenographic\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/moon.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/moonillum.js":
/*!**************************************************!*\
  !*** ./node_modules/astronomia/src/moonillum.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   phaseAngle3: () => (/* binding */ phaseAngle3),\n/* harmony export */   phaseAngleEcliptic: () => (/* binding */ phaseAngleEcliptic),\n/* harmony export */   phaseAngleEcliptic2: () => (/* binding */ phaseAngleEcliptic2),\n/* harmony export */   phaseAngleEquatorial: () => (/* binding */ phaseAngleEquatorial),\n/* harmony export */   phaseAngleEquatorial2: () => (/* binding */ phaseAngleEquatorial2)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module moonillum\r\n */\r\n/**\r\n * Moonillum: Chapter 48, Illuminated Fraction of the Moon's Disk\r\n *\r\n * Also see functions `illuminated` and `limb` in package base.  The function\r\n * for computing illuminated fraction given a phase angle (48.1) is\r\n * base.illuminated.  Formula (48.3) is implemented as base.limb.\r\n */\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\nconst D2R = Math.PI / 180\r\n\r\n/**\r\n * phaseAngleEquatorial computes the phase angle of the Moon given equatorial coordinates.\r\n *\r\n * @param {Coord} cMoon - geocentric right ascension,  declination and distance to the Moon\r\n * @param {Coord} cSun - coordinates and distance of the Sun\r\n * @returns {number} phase angle of the Moon in radians\r\n */\r\nfunction phaseAngleEquatorial (cMoon, cSun) {\r\n  return pa(cMoon.range, cSun.range, cosEq(cMoon.ra, cMoon.dec, cSun.ra, cSun.dec))\r\n}\r\n\r\n/**\r\n * cos elongation from equatorial coordinates\r\n * @private\r\n */\r\nfunction cosEq (α, δ, α0, δ0) {\r\n  const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n  const [sδ0, cδ0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ0)\r\n  return sδ0 * sδ + cδ0 * cδ * Math.cos(α0 - α)\r\n}\r\n\r\n/**\r\n * phase angle from cos elongation and distances\r\n * @private\r\n * @param {number} Δ\r\n * @param {number} R\r\n * @param {number} cψ\r\n * @returns {number}\r\n */\r\nfunction pa (Δ, R, cψ) {\r\n  const sψ = Math.sin(Math.acos(cψ))\r\n  let i = Math.atan(R * sψ / (Δ - R * cψ))\r\n  if (i < 0) {\r\n    i += Math.PI\r\n  }\r\n  return i\r\n}\r\n\r\n/**\r\n * phaseAngleEquatorial2 computes the phase angle of the Moon given equatorial coordinates.\r\n *\r\n * Less accurate than phaseAngleEquatorial.\r\n *\r\n * Arguments α, δ are geocentric right ascension and declination of the Moon;\r\n * α0, δ0  are coordinates of the Sun.  Angles must be in radians.\r\n *\r\n * @param {Coord} cMoon - eocentric right ascension and declination of the Moon\r\n * @param {Coord} cSun - coordinates of the Sun\r\n * @returns {number} phase angle of the Moon in radians\r\n */\r\nfunction phaseAngleEquatorial2 (cMoon, cSun) {\r\n  return Math.acos(-cosEq(cMoon.ra, cMoon.dec, cSun.ra, cSun.dec))\r\n}\r\n\r\n/**\r\n * phaseAngleEcliptic computes the phase angle of the Moon given ecliptic coordinates.\r\n *\r\n * Distances must be in the same units as each other.\r\n *\r\n * @param {Coord} cMoon - geocentric longitude, latitude and distance to the Moon\r\n * @param {Coord} cSun -  longitude and distance to the Sun\r\n * @returns {number} phase angle of the Moon in radians\r\n */\r\nfunction phaseAngleEcliptic (cMoon, cSun) {\r\n  return pa(cMoon.range, cSun.range, cosEcl(cMoon.lon, cMoon.lat, cSun.lon))\r\n}\r\n\r\n/**\r\n * cos elongation from ecliptic coordinates\r\n * @private\r\n */\r\nfunction cosEcl (λ, β, λ0) { // (λ, β, λ0 float64)  float64\r\n  return Math.cos(β) * Math.cos(λ - λ0)\r\n}\r\n\r\n/**\r\n * phaseAngleEcliptic2 computes the phase angle of the Moon given ecliptic coordinates.\r\n *\r\n * Less accurate than phaseAngleEcliptic.\r\n *\r\n * Angles must be in radians.\r\n *\r\n * @param {Coord} cMoon - geocentric longitude, latitude of the Moon\r\n * @param {Coord} cSun -  longitude of the Sun\r\n * @returns {number} phase angle of the Moon in radians\r\n */\r\nfunction phaseAngleEcliptic2 (cMoon, cSun) {\r\n  return Math.acos(-cosEcl(cMoon.lon, cMoon.lat, cSun.lon))\r\n}\r\n\r\n/**\r\n * phaseAngle3 computes the phase angle of the Moon given a julian day.\r\n *\r\n * Less accurate than phaseAngle functions taking coordinates.\r\n *\r\n * Result in radians.\r\n */\r\nfunction phaseAngle3 (jde) { // (jde float64)  float64\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  const D = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 297.8501921 * D2R, 445267.1114034 * D2R,\r\n    -0.0018819 * D2R, D2R / 545868, -D2R / 113065000)\r\n  const m = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 357.5291092 * D2R, 35999.0502909 * D2R,\r\n    -0.0001536 * D2R, D2R / 24490000)\r\n  const m_ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 134.9633964 * D2R, 477198.8675055 * D2R,\r\n    0.0087414 * D2R, D2R / 69699, -D2R / 14712000)\r\n  return Math.PI - _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(D, 2 * Math.PI) +\r\n    -6.289 * D2R * Math.sin(m_) +\r\n    2.1 * D2R * Math.sin(m) +\r\n    -1.274 * D2R * Math.sin(2 * D - m_) +\r\n    -0.658 * D2R * Math.sin(2 * D) +\r\n    -0.214 * D2R * Math.sin(2 * m_) +\r\n    -0.11 * D2R * Math.sin(D)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  phaseAngleEquatorial,\r\n  phaseAngleEquatorial2,\r\n  phaseAngleEcliptic,\r\n  phaseAngleEcliptic2,\r\n  phaseAngle3\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/moonillum.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/moonmaxdec.js":
/*!***************************************************!*\
  !*** ./node_modules/astronomia/src/moonmaxdec.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   north: () => (/* binding */ north),\n/* harmony export */   south: () => (/* binding */ south)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module moonmaxdec\r\n */\r\n/**\r\n * Moonmaxdec: Chapter 52, Maximum Declinations of the Moon\r\n */\r\n\r\n\r\n\r\n/**\r\n * North computes the maximum northern declination of the Moon near a given date.\r\n *\r\n * Argument year is a decimal year specifying a date near the event.\r\n *\r\n * Returned is the jde of the event nearest the given date and the declination\r\n * of the Moon at that time.\r\n */\r\nfunction north (y) { // (y float64)  (jde, δ float64)\r\n  return max(y, nc)\r\n}\r\n\r\n/**\r\n * South computes the maximum southern declination of the Moon near a given date.\r\n *\r\n * Argument year is a decimal year specifying a date near the event.\r\n *\r\n * Returned is the jde of the event nearest the given date and the declination\r\n * of the Moon at that time.\r\n */\r\nfunction south (y) { // (y float64)  (jde, δ float64)\r\n  return max(y, sc)\r\n}\r\n\r\nconst p = Math.PI / 180\r\nconst ck = 1 / 1336.86\r\n\r\n/**\r\n * @private\r\n */\r\nfunction max (y, c) { // (y float64, c *mc)  (jde, δ float64)\r\n  let k = (y - 2000.03) * 13.3686 // (52.1) p. 367\r\n  k = Math.floor(k + 0.5)\r\n  const T = k * ck\r\n  const D = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.D, 333.0705546 * p / ck, -0.0004214 * p, 0.00000011 * p)\r\n  const m = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.m, 26.9281592 * p / ck, -0.0000355 * p, -0.0000001 * p)\r\n  const m_ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.m_, 356.9562794 * p / ck, 0.0103066 * p, 0.00001251 * p)\r\n  const f = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.f, 1.4467807 * p / ck, -0.002069 * p, -0.00000215 * p)\r\n  const E = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 1, -0.002516, -0.0000074)\r\n  const jde = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.JDE, 27.321582247 / ck, 0.000119804, -0.000000141) +\r\n    c.tc[0] * Math.cos(f) +\r\n    c.tc[1] * Math.sin(m_) +\r\n    c.tc[2] * Math.sin(2 * f) +\r\n    c.tc[3] * Math.sin(2 * D - m_) +\r\n    c.tc[4] * Math.cos(m_ - f) +\r\n    c.tc[5] * Math.cos(m_ + f) +\r\n    c.tc[6] * Math.sin(2 * D) +\r\n    c.tc[7] * Math.sin(m) * E +\r\n    c.tc[8] * Math.cos(3 * f) +\r\n    c.tc[9] * Math.sin(m_ + 2 * f) +\r\n    c.tc[10] * Math.cos(2 * D - f) +\r\n    c.tc[11] * Math.cos(2 * D - m_ - f) +\r\n    c.tc[12] * Math.cos(2 * D - m_ + f) +\r\n    c.tc[13] * Math.cos(2 * D + f) +\r\n    c.tc[14] * Math.sin(2 * m_) +\r\n    c.tc[15] * Math.sin(m_ - 2 * f) +\r\n    c.tc[16] * Math.cos(2 * m_ - f) +\r\n    c.tc[17] * Math.sin(m_ + 3 * f) +\r\n    c.tc[18] * Math.sin(2 * D - m - m_) * E +\r\n    c.tc[19] * Math.cos(m_ - 2 * f) +\r\n    c.tc[20] * Math.sin(2 * (D - m_)) +\r\n    c.tc[21] * Math.sin(f) +\r\n    c.tc[22] * Math.sin(2 * D + m_) +\r\n    c.tc[23] * Math.cos(m_ + 2 * f) +\r\n    c.tc[24] * Math.sin(2 * D - m) * E +\r\n    c.tc[25] * Math.sin(m_ + f) +\r\n    c.tc[26] * Math.sin(m - m_) * E +\r\n    c.tc[27] * Math.sin(m_ - 3 * f) +\r\n    c.tc[28] * Math.sin(2 * m_ + f) +\r\n    c.tc[29] * Math.cos(2 * (D - m_) - f) +\r\n    c.tc[30] * Math.sin(3 * f) +\r\n    c.tc[31] * Math.cos(m_ + 3 * f) +\r\n    c.tc[32] * Math.cos(2 * m_) +\r\n    c.tc[33] * Math.cos(2 * D - m_) +\r\n    c.tc[34] * Math.cos(2 * D + m_ + f) +\r\n    c.tc[35] * Math.cos(m_) +\r\n    c.tc[36] * Math.sin(3 * m_ + f) +\r\n    c.tc[37] * Math.sin(2 * D - m_ + f) +\r\n    c.tc[38] * Math.cos(2 * (D - m_)) +\r\n    c.tc[39] * Math.cos(D + f) +\r\n    c.tc[40] * Math.sin(m + m_) * E +\r\n    c.tc[41] * Math.sin(2 * (D - f)) +\r\n    c.tc[42] * Math.cos(2 * m_ + f) +\r\n    c.tc[43] * Math.cos(3 * m_ + f)\r\n  const δ = 23.6961 * p - 0.013004 * p * T +\r\n    c.dc[0] * Math.sin(f) +\r\n    c.dc[1] * Math.cos(2 * f) +\r\n    c.dc[2] * Math.sin(2 * D - f) +\r\n    c.dc[3] * Math.sin(3 * f) +\r\n    c.dc[4] * Math.cos(2 * (D - f)) +\r\n    c.dc[5] * Math.cos(2 * D) +\r\n    c.dc[6] * Math.sin(m_ - f) +\r\n    c.dc[7] * Math.sin(m_ + 2 * f) +\r\n    c.dc[8] * Math.cos(f) +\r\n    c.dc[9] * Math.sin(2 * D + m - f) * E +\r\n    c.dc[10] * Math.sin(m_ + 3 * f) +\r\n    c.dc[11] * Math.sin(D + f) +\r\n    c.dc[12] * Math.sin(m_ - 2 * f) +\r\n    c.dc[13] * Math.sin(2 * D - m - f) * E +\r\n    c.dc[14] * Math.sin(2 * D - m_ - f) +\r\n    c.dc[15] * Math.cos(m_ + f) +\r\n    c.dc[16] * Math.cos(m_ + 2 * f) +\r\n    c.dc[17] * Math.cos(2 * m_ + f) +\r\n    c.dc[18] * Math.cos(m_ - 3 * f) +\r\n    c.dc[19] * Math.cos(2 * m_ - f) +\r\n    c.dc[20] * Math.cos(m_ - 2 * f) +\r\n    c.dc[21] * Math.sin(2 * m_) +\r\n    c.dc[22] * Math.sin(3 * m_ + f) +\r\n    c.dc[23] * Math.cos(2 * D + m - f) * E +\r\n    c.dc[24] * Math.cos(m_ - f) +\r\n    c.dc[25] * Math.cos(3 * f) +\r\n    c.dc[26] * Math.sin(2 * D + f) +\r\n    c.dc[27] * Math.cos(m_ + 3 * f) +\r\n    c.dc[28] * Math.cos(D + f) +\r\n    c.dc[29] * Math.sin(2 * m_ - f) +\r\n    c.dc[30] * Math.cos(3 * m_ + f) +\r\n    c.dc[31] * Math.cos(2 * (D + m_) + f) +\r\n    c.dc[32] * Math.sin(2 * (D - m_) - f) +\r\n    c.dc[33] * Math.cos(2 * m_) +\r\n    c.dc[34] * Math.cos(m_) +\r\n    c.dc[35] * Math.sin(2 * f) +\r\n    c.dc[36] * Math.sin(m_ + f)\r\n  return { jde, dec: c.s * δ }\r\n}\r\n\r\n/**\r\n * north coefficients\r\n */\r\nconst nc = {\r\n  D: 152.2029 * p,\r\n  m: 14.8591 * p,\r\n  m_: 4.6881 * p,\r\n  f: 325.8867 * p,\r\n  JDE: 2451562.5897,\r\n  s: 1,\r\n  tc: [\r\n    0.8975,\r\n    -0.4726,\r\n    -0.1030,\r\n    -0.0976,\r\n    -0.0462,\r\n    -0.0461,\r\n    -0.0438,\r\n    0.0162,\r\n    -0.0157,\r\n    0.0145,\r\n    0.0136,\r\n    -0.0095,\r\n    -0.0091,\r\n    -0.0089,\r\n    0.0075,\r\n    -0.0068,\r\n    0.0061,\r\n    -0.0047,\r\n    -0.0043,\r\n    -0.004,\r\n    -0.0037,\r\n    0.0031,\r\n    0.0030,\r\n    -0.0029,\r\n    -0.0029,\r\n    -0.0027,\r\n    0.0024,\r\n    -0.0021,\r\n    0.0019,\r\n    0.0018,\r\n    0.0018,\r\n    0.0017,\r\n    0.0017,\r\n    -0.0014,\r\n    0.0013,\r\n    0.0013,\r\n    0.0012,\r\n    0.0011,\r\n    -0.0011,\r\n    0.001,\r\n    0.001,\r\n    -0.0009,\r\n    0.0007,\r\n    -0.0007\r\n  ],\r\n  dc: [\r\n    5.1093 * p,\r\n    0.2658 * p,\r\n    0.1448 * p,\r\n    -0.0322 * p,\r\n    0.0133 * p,\r\n    0.0125 * p,\r\n    -0.0124 * p,\r\n    -0.0101 * p,\r\n    0.0097 * p,\r\n    -0.0087 * p,\r\n    0.0074 * p,\r\n    0.0067 * p,\r\n    0.0063 * p,\r\n    0.0060 * p,\r\n    -0.0057 * p,\r\n    -0.0056 * p,\r\n    0.0052 * p,\r\n    0.0041 * p,\r\n    -0.004 * p,\r\n    0.0038 * p,\r\n    -0.0034 * p,\r\n    -0.0029 * p,\r\n    0.0029 * p,\r\n    -0.0028 * p,\r\n    -0.0028 * p,\r\n    -0.0023 * p,\r\n    -0.0021 * p,\r\n    0.0019 * p,\r\n    0.0018 * p,\r\n    0.0017 * p,\r\n    0.0015 * p,\r\n    0.0014 * p,\r\n    -0.0012 * p,\r\n    -0.0012 * p,\r\n    -0.001 * p,\r\n    -0.001 * p,\r\n    0.0006 * p\r\n  ]\r\n}\r\n\r\n/**\r\n * south coefficients\r\n */\r\nconst sc = {\r\n  D: 345.6676 * p,\r\n  m: 1.3951 * p,\r\n  m_: 186.21 * p,\r\n  f: 145.1633 * p,\r\n  JDE: 2451548.9289,\r\n  s: -1,\r\n  tc: [\r\n    -0.8975,\r\n    -0.4726,\r\n    -0.1030,\r\n    -0.0976,\r\n    0.0541,\r\n    0.0516,\r\n    -0.0438,\r\n    0.0112,\r\n    0.0157,\r\n    0.0023,\r\n    -0.0136,\r\n    0.011,\r\n    0.0091,\r\n    0.0089,\r\n    0.0075,\r\n    -0.003,\r\n    -0.0061,\r\n    -0.0047,\r\n    -0.0043,\r\n    0.004,\r\n    -0.0037,\r\n    -0.0031,\r\n    0.0030,\r\n    0.0029,\r\n    -0.0029,\r\n    -0.0027,\r\n    0.0024,\r\n    -0.0021,\r\n    -0.0019,\r\n    -0.0006,\r\n    -0.0018,\r\n    -0.0017,\r\n    0.0017,\r\n    0.0014,\r\n    -0.0013,\r\n    -0.0013,\r\n    0.0012,\r\n    0.0011,\r\n    0.0011,\r\n    0.001,\r\n    0.001,\r\n    -0.0009,\r\n    -0.0007,\r\n    -0.0007\r\n  ],\r\n  dc: [\r\n    -5.1093 * p,\r\n    0.2658 * p,\r\n    -0.1448 * p,\r\n    0.0322 * p,\r\n    0.0133 * p,\r\n    0.0125 * p,\r\n    -0.0015 * p,\r\n    0.0101 * p,\r\n    -0.0097 * p,\r\n    0.0087 * p,\r\n    0.0074 * p,\r\n    0.0067 * p,\r\n    -0.0063 * p,\r\n    -0.0060 * p,\r\n    0.0057 * p,\r\n    -0.0056 * p,\r\n    -0.0052 * p,\r\n    -0.0041 * p,\r\n    -0.004 * p,\r\n    -0.0038 * p,\r\n    0.0034 * p,\r\n    -0.0029 * p,\r\n    0.0029 * p,\r\n    0.0028 * p,\r\n    -0.0028 * p,\r\n    0.0023 * p,\r\n    0.0021 * p,\r\n    0.0019 * p,\r\n    0.0018 * p,\r\n    -0.0017 * p,\r\n    0.0015 * p,\r\n    0.0014 * p,\r\n    0.0012 * p,\r\n    -0.0012 * p,\r\n    0.001 * p,\r\n    -0.001 * p,\r\n    0.0037 * p\r\n  ]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  north,\r\n  south\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/moonmaxdec.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/moonnode.js":
/*!*************************************************!*\
  !*** ./node_modules/astronomia/src/moonnode.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ascending: () => (/* binding */ ascending),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   descending: () => (/* binding */ descending)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module moonnode\r\n */\r\n/**\r\n * Moonnode: Chapter 51, Passages of the Moon through the Nodes.\r\n */\r\n\r\n\r\n\r\n/**\r\n * Ascending returns the date of passage of the Moon through an ascending node.\r\n *\r\n * @param {Number} year - decimal year specifying a date near the event.\r\n * @returns {Number} jde of the event nearest the given date.\r\n */\r\nfunction ascending (year) { // (year float64)  float64\r\n  return node(year, 0)\r\n}\r\n\r\n/**\r\n * Descending returns the date of passage of the Moon through a descending node.\r\n *\r\n * @param {Number} year - decimal year specifying a date near the event.\r\n * @returns {Number} jde of the event nearest the given date.\r\n */\r\nfunction descending (year) { // (year float64)  float64\r\n  return node(year, 0.5)\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction node (y, h) { // (y, h float64)  float64\r\n  let k = (y - 2000.05) * 13.4223 // (50.1) p. 355\r\n  k = Math.floor(k - h + 0.5) + h // snap to half orbit\r\n  const p = Math.PI / 180\r\n  const ck = 1 / 1342.23\r\n  const T = k * ck\r\n  const D = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 183.638 * p, 331.73735682 * p / ck,\r\n    0.0014852 * p, 0.00000209 * p, -0.00000001 * p)\r\n  const M = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 17.4006 * p, 26.8203725 * p / ck,\r\n    0.0001186 * p, 0.00000006 * p)\r\n  const m_ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 38.3776 * p, 355.52747313 * p / ck,\r\n    0.0123499 * p, 0.000014627 * p, -0.000000069 * p)\r\n  const Ω = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 123.9767 * p, -1.44098956 * p / ck,\r\n    0.0020608 * p, 0.00000214 * p, -0.000000016 * p)\r\n  const V = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 299.75 * p, 132.85 * p, -0.009173 * p)\r\n  const P = Ω + 272.75 * p - 2.3 * p * T\r\n  const E = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 1, -0.002516, -0.0000074)\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 2451565.1619, 27.212220817 / ck,\r\n    0.0002762, 0.000000021, -0.000000000088) +\r\n    -0.4721 * Math.sin(m_) +\r\n    -0.1649 * Math.sin(2 * D) +\r\n    -0.0868 * Math.sin(2 * D - m_) +\r\n    0.0084 * Math.sin(2 * D + m_) +\r\n    -0.0083 * Math.sin(2 * D - M) * E +\r\n    -0.0039 * Math.sin(2 * D - M - m_) * E +\r\n    0.0034 * Math.sin(2 * m_) +\r\n    -0.0031 * Math.sin(2 * (D - m_)) +\r\n    0.003 * Math.sin(2 * D + M) * E +\r\n    0.0028 * Math.sin(M - m_) * E +\r\n    0.0026 * Math.sin(M) * E +\r\n    0.0025 * Math.sin(4 * D) +\r\n    0.0024 * Math.sin(D) +\r\n    0.0022 * Math.sin(M + m_) * E +\r\n    0.0017 * Math.sin(Ω) +\r\n    0.0014 * Math.sin(4 * D - m_) +\r\n    0.0005 * Math.sin(2 * D + M - m_) * E +\r\n    0.0004 * Math.sin(2 * D - M + m_) * E +\r\n    -0.0003 * Math.sin(2 * (D - M)) * E +\r\n    0.0003 * Math.sin(4 * D - M) * E +\r\n    0.0003 * Math.sin(V) +\r\n    0.0003 * Math.sin(P)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  ascending,\r\n  descending\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/moonnode.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/moonphase.js":
/*!**************************************************!*\
  !*** ./node_modules/astronomia/src/moonphase.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   first: () => (/* binding */ first),\n/* harmony export */   full: () => (/* binding */ full),\n/* harmony export */   last: () => (/* binding */ last),\n/* harmony export */   meanFirst: () => (/* binding */ meanFirst),\n/* harmony export */   meanFull: () => (/* binding */ meanFull),\n/* harmony export */   meanLast: () => (/* binding */ meanLast),\n/* harmony export */   meanLunarMonth: () => (/* binding */ meanLunarMonth),\n/* harmony export */   meanNew: () => (/* binding */ meanNew),\n/* harmony export */   newMoon: () => (/* binding */ newMoon)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module moonphase\r\n */\r\n/**\r\n * Moonphase: Chapter 49, Phases of the Moon\r\n */\r\n\r\n\r\n\r\nconst { sin, cos } = Math\r\nconst ck = 1 / 1236.85\r\nconst D2R = Math.PI / 180\r\n\r\n/**\r\n * mean synodial lunar month\r\n */\r\nconst meanLunarMonth = 29.530588861\r\n\r\n// (49.1) p. 349\r\nfunction mean (T) {\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 2451550.09766, 29.530588861 / ck,\r\n    0.00015437, -0.00000015, 0.00000000073)\r\n}\r\n\r\n/** snap returns k at specified quarter q nearest year y. */\r\nfunction snap (y, q) {\r\n  const k = (y - 2000) * 12.3685 // (49.2) p. 350\r\n  return Math.floor(k - q + 0.5) + q\r\n}\r\n\r\n/**\r\n * MeanNew returns the jde of the mean New Moon nearest the given datthis.\r\n * The mean date is within 0.5 day of the true date of New Moon.\r\n *\r\n * @param {Number} year - decimal year\r\n * @returns {Number} jde\r\n */\r\nfunction meanNew (year) {\r\n  return mean(snap(year, 0) * ck)\r\n}\r\n\r\n/**\r\n * MeanFirst returns the jde of the mean First Quarter Moon nearest the given datthis.\r\n * The mean date is within 0.5 day of the true date of First Quarter Moon.\r\n *\r\n * @param {Number} year - decimal year\r\n * @returns {Number} jde\r\n */\r\nfunction meanFirst (year) {\r\n  return mean(snap(year, 0.25) * ck)\r\n}\r\n\r\n/**\r\n * MeanFull returns the jde of the mean Full Moon nearest the given datthis.\r\n * The mean date is within 0.5 day of the true date of Full Moon.\r\n *\r\n * @param {Number} year - decimal year\r\n * @returns {Number} jde\r\n */\r\nfunction meanFull (year) {\r\n  return mean(snap(year, 0.5) * ck)\r\n}\r\n\r\n/**\r\n * MeanLast returns the jde of the mean Last Quarter Moon nearest the given datthis.\r\n * The mean date is within 0.5 day of the true date of Last Quarter Moon.\r\n *\r\n * @param {Number} year - decimal year\r\n * @returns {Number} jde\r\n */\r\nfunction meanLast (year) {\r\n  return mean(snap(year, 0.75) * ck)\r\n}\r\n\r\n/**\r\n * New returns the jde of New Moon nearest the given date.\r\n *\r\n * @param {Number} year - decimal year\r\n * @returns {Number} jde\r\n */\r\nfunction newMoon (year) {\r\n  const m = new Mp(year, 0)\r\n  return mean(m.T) + m.nfc(nc) + m.a()\r\n}\r\n\r\n/**\r\n * First returns the jde of First Quarter Moon nearest the given datthis.\r\n *\r\n * @param {Number} year - decimal year\r\n * @returns {Number} jde\r\n */\r\nfunction first (year) {\r\n  const m = new Mp(year, 0.25)\r\n  return mean(m.T) + m.flc() + m.w() + m.a()\r\n}\r\n\r\n/**\r\n * Full returns the jde of Full Moon nearest the given datthis.\r\n *\r\n * @param {Number} year - decimal year\r\n * @returns {Number} jde\r\n */\r\nfunction full (year) {\r\n  const m = new Mp(year, 0.5)\r\n  return mean(m.T) + m.nfc(fc) + m.a()\r\n}\r\n\r\n/**\r\n * Last returns the jde of Last Quarter Moon nearest the given datthis.\r\n *\r\n * @param {Number} year - decimal year\r\n * @returns {Number} jde\r\n */\r\nfunction last (year) {\r\n  const m = new Mp(year, 0.75)\r\n  return mean(m.T) + m.flc() - m.w() + m.a()\r\n}\r\n\r\nclass Mp {\r\n  constructor (y, q) {\r\n    this.A = new Array(14)\r\n    const k = this.k = snap(y, q)\r\n    const T = this.T = this.k * ck // (49.3) p. 350\r\n    this.E = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 1, -0.002516, -0.0000074)\r\n    this.M = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 2.5534 * D2R, 29.1053567 * D2R / ck,\r\n      -0.0000014 * D2R, -0.00000011 * D2R)\r\n    this.M_ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 201.5643 * D2R, 385.81693528 * D2R / ck,\r\n      0.0107582 * D2R, 0.00001238 * D2R, -0.000000058 * D2R)\r\n    this.F = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 160.7108 * D2R, 390.67050284 * D2R / ck,\r\n      -0.0016118 * D2R, -0.00000227 * D2R, 0.000000011 * D2R)\r\n    this.Ω = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 124.7746 * D2R, -1.56375588 * D2R / ck,\r\n      0.0020672 * D2R, 0.00000215 * D2R)\r\n    this.A[0] = 299.7 * D2R + 0.107408 * D2R * k - 0.009173 * T * T\r\n    this.A[1] = 251.88 * D2R + 0.016321 * D2R * k\r\n    this.A[2] = 251.83 * D2R + 26.651886 * D2R * k\r\n    this.A[3] = 349.42 * D2R + 36.412478 * D2R * k\r\n    this.A[4] = 84.66 * D2R + 18.206239 * D2R * k\r\n    this.A[5] = 141.74 * D2R + 53.303771 * D2R * k\r\n    this.A[6] = 207.17 * D2R + 2.453732 * D2R * k\r\n    this.A[7] = 154.84 * D2R + 7.30686 * D2R * k\r\n    this.A[8] = 34.52 * D2R + 27.261239 * D2R * k\r\n    this.A[9] = 207.19 * D2R + 0.121824 * D2R * k\r\n    this.A[10] = 291.34 * D2R + 1.844379 * D2R * k\r\n    this.A[11] = 161.72 * D2R + 24.198154 * D2R * k\r\n    this.A[12] = 239.56 * D2R + 25.513099 * D2R * k\r\n    this.A[13] = 331.55 * D2R + 3.592518 * D2R * k\r\n  }\r\n\r\n  // new or full corrections\r\n  nfc (c) {\r\n    const { M, M_, E, F, Ω } = this\r\n    return c[0] * sin(M_) +\r\n      c[1] * sin(M) * E +\r\n      c[2] * sin(2 * M_) +\r\n      c[3] * sin(2 * F) +\r\n      c[4] * sin(M_ - M) * E +\r\n      c[5] * sin(M_ + M) * E +\r\n      c[6] * sin(2 * M) * E * E +\r\n      c[7] * sin(M_ - 2 * F) +\r\n      c[8] * sin(M_ + 2 * F) +\r\n      c[9] * sin(2 * M_ + M) * E +\r\n      c[10] * sin(3 * M_) +\r\n      c[11] * sin(M + 2 * F) * E +\r\n      c[12] * sin(M - 2 * F) * E +\r\n      c[13] * sin(2 * M_ - M) * E +\r\n      c[14] * sin(Ω) +\r\n      c[15] * sin(M_ + 2 * M) +\r\n      c[16] * sin(2 * (M_ - F)) +\r\n      c[17] * sin(3 * M) +\r\n      c[18] * sin(M_ + M - 2 * F) +\r\n      c[19] * sin(2 * (M_ + F)) +\r\n      c[20] * sin(M_ + M + 2 * F) +\r\n      c[21] * sin(M_ - M + 2 * F) +\r\n      c[22] * sin(M_ - M - 2 * F) +\r\n      c[23] * sin(3 * M_ + M) +\r\n      c[24] * sin(4 * M_)\r\n  }\r\n\r\n  // first or last corrections\r\n  flc () {\r\n    const { M, M_, E, F, Ω } = this\r\n    return -0.62801 * sin(M_) +\r\n      0.17172 * sin(M) * E +\r\n      -0.01183 * sin(M_ + M) * E +\r\n      0.00862 * sin(2 * M_) +\r\n      0.00804 * sin(2 * F) +\r\n      0.00454 * sin(M_ - M) * E +\r\n      0.00204 * sin(2 * M) * E * E +\r\n      -0.0018 * sin(M_ - 2 * F) +\r\n      -0.0007 * sin(M_ + 2 * F) +\r\n      -0.0004 * sin(3 * M_) +\r\n      -0.00034 * sin(2 * M_ - M) * E +\r\n      0.00032 * sin(M + 2 * F) * E +\r\n      0.00032 * sin(M - 2 * F) * E +\r\n      -0.00028 * sin(M_ + 2 * M) * E * E +\r\n      0.00027 * sin(2 * M_ + M) * E +\r\n      -0.00017 * sin(Ω) +\r\n      -0.00005 * sin(M_ - M - 2 * F) +\r\n      0.00004 * sin(2 * M_ + 2 * F) +\r\n      -0.00004 * sin(M_ + M + 2 * F) +\r\n      0.00004 * sin(M_ - 2 * M) +\r\n      0.00003 * sin(M_ + M - 2 * F) +\r\n      0.00003 * sin(3 * M) +\r\n      0.00002 * sin(2 * M_ - 2 * F) +\r\n      0.00002 * sin(M_ - M + 2 * F) +\r\n      -0.00002 * sin(3 * M_ + M)\r\n  }\r\n\r\n  w () {\r\n    const { M, M_, E, F } = this\r\n    return 0.00306 -\r\n      0.00038 * E * cos(M) +\r\n      0.00026 * cos(M_) -\r\n      0.00002 * (cos(M_ - M) -\r\n        cos(M_ + M) -\r\n        cos(2 * F)\r\n      )\r\n  }\r\n\r\n  // additional corrections\r\n  a () {\r\n    let a = 0\r\n    ac.forEach((c, i) => {\r\n      a += c * sin(this.A[i])\r\n    })\r\n    return a\r\n  }\r\n}\r\n\r\n// new coefficients\r\nconst nc = [\r\n  -0.4072, 0.17241, 0.01608, 0.01039, 0.00739,\r\n  -0.00514, 0.00208, -0.00111, -0.00057, 0.00056,\r\n  -0.00042, 0.00042, 0.00038, -0.00024, -0.00017,\r\n  -0.00007, 0.00004, 0.00004, 0.00003, 0.00003,\r\n  -0.00003, 0.00003, -0.00002, -0.00002, 0.00002\r\n]\r\n\r\n// full coefficients\r\nconst fc = [\r\n  -0.40614, 0.17302, 0.01614, 0.01043, 0.00734,\r\n  -0.00515, 0.00209, -0.00111, -0.00057, 0.00056,\r\n  -0.00042, 0.00042, 0.00038, -0.00024, -0.00017,\r\n  -0.00007, 0.00004, 0.00004, 0.00003, 0.00003,\r\n  -0.00003, 0.00003, -0.00002, -0.00002, 0.00002\r\n]\r\n\r\n// additional corrections\r\nconst ac = [\r\n  0.000325, 0.000165, 0.000164, 0.000126, 0.00011,\r\n  0.000062, 0.00006, 0.000056, 0.000047, 0.000042,\r\n  0.000040, 0.000037, 0.000035, 0.000023\r\n]\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  meanLunarMonth,\r\n  meanNew,\r\n  meanFirst,\r\n  meanFull,\r\n  meanLast,\r\n  newMoon,\r\n  new: newMoon, // BACKWARDS-COMPATIBILITY\r\n  first,\r\n  full,\r\n  last\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/moonphase.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/moonposition.js":
/*!*****************************************************!*\
  !*** ./node_modules/astronomia/src/moonposition.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   node: () => (/* binding */ node),\n/* harmony export */   parallax: () => (/* binding */ parallax),\n/* harmony export */   perigee: () => (/* binding */ perigee),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   trueNode: () => (/* binding */ trueNode)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module moonposition\r\n */\r\n/**\r\n * Moonposition: Chapter 47, Position of the Moon.\r\n */\r\n\r\n // eslint-disable-line no-unused-vars\r\nconst { asin, sin } = Math\r\nconst D2R = Math.PI / 180\r\n\r\nconst EARTH_RADIUS = 6378.137 // km\r\n\r\n/**\r\n * parallax returns equatorial horizontal parallax of the Moon.\r\n *\r\n * @param {Number} distance - distance between centers of the Earth and Moon, in km.\r\n * @returns {Number} Result in radians.\r\n */\r\nfunction parallax (distance) {\r\n  // p. 337\r\n  return asin(EARTH_RADIUS / distance)\r\n}\r\n\r\nfunction dmf (T) {\r\n  const d = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 297.8501921 * D2R, 445267.1114034 * D2R, -0.0018819 * D2R, D2R / 545868, -D2R / 113065000)\r\n  const m = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 357.5291092 * D2R, 35999.0502909 * D2R, -0.0001536 * D2R, D2R / 24490000)\r\n  const m_ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 134.9633964 * D2R, 477198.8675055 * D2R,\r\n    0.0087414 * D2R, D2R / 69699, -D2R / 14712000)\r\n  const f = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 93.272095 * D2R, 483202.0175233 * D2R, -0.0036539 * D2R, -D2R / 3526000, D2R / 863310000)\r\n  return [d, m, m_, f]\r\n}\r\n\r\n/**\r\n * position returns geocentric location of the Moon.\r\n *\r\n * Results are referenced to mean equinox of date and do not include\r\n * the effect of nutation.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @returns {Coord}\r\n *  {number} lon - Geocentric longitude λ, in radians.\r\n *  {number} lat - Geocentric latitude β, in radians.\r\n *  {number} range - Distance Δ between centers of the Earth and Moon, in km.\r\n */\r\nfunction position (jde) {\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  const l_ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 218.3164477 * D2R, 481267.88123421 * D2R, -0.0015786 * D2R, D2R / 538841, -D2R / 65194000)\r\n  const [d, m, m_, f] = dmf(T)\r\n  const a1 = 119.75 * D2R + 131.849 * D2R * T\r\n  const a2 = 53.09 * D2R + 479264.29 * D2R * T\r\n  const a3 = 313.45 * D2R + 481266.484 * D2R * T\r\n  const e = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 1, -0.002516, -0.0000074)\r\n  const e2 = e * e\r\n  let Σl = 3958 * sin(a1) + 1962 * sin(l_ - f) + 318 * sin(a2)\r\n  let Σr = 0.0\r\n  let Σb = -2235 * sin(l_) + 382 * sin(a3) + 175 * sin(a1 - f) +\r\n    175 * sin(a1 + f) + 127 * sin(l_ - m_) - 115 * sin(l_ + m_)\r\n  ta.forEach((r) => {\r\n    const [sina, cosa] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(d * r.d + m * r.m + m_ * r.m_ + f * r.f)\r\n    switch (r.m) {\r\n      case 0:\r\n        Σl += r.Σl * sina\r\n        Σr += r.Σr * cosa\r\n        break\r\n      case -1:\r\n      case 1:\r\n        Σl += r.Σl * sina * e\r\n        Σr += r.Σr * cosa * e\r\n        break\r\n      case -2:\r\n      case 2:\r\n        Σl += r.Σl * sina * e2\r\n        Σr += r.Σr * cosa * e2\r\n        break\r\n    }\r\n  })\r\n\r\n  tb.forEach((r) => {\r\n    const sb = sin(d * r.d + m * r.m + m_ * r.m_ + f * r.f)\r\n    switch (r.m) {\r\n      case 0:\r\n        Σb += r.Σb * sb\r\n        break\r\n      case -1:\r\n      case 1:\r\n        Σb += r.Σb * sb * e\r\n        break\r\n      case -2:\r\n      case 2:\r\n        Σb += r.Σb * sb * e2\r\n        break\r\n    }\r\n  })\r\n  const lon = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(l_, 2 * Math.PI) + Σl * 1e-6 * D2R\r\n  const lat = Σb * 1e-6 * D2R\r\n  const range = 385000.56 + Σr * 1e-3\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(lon, lat, range)\r\n}\r\n\r\nconst ta = (function () {\r\n  const ta = [\r\n    [0, 0, 1, 0, 6288774, -20905355],\r\n    [2, 0, -1, 0, 1274027, -3699111],\r\n    [2, 0, 0, 0, 658314, -2955968],\r\n    [0, 0, 2, 0, 213618, -569925],\r\n\r\n    [0, 1, 0, 0, -185116, 48888],\r\n    [0, 0, 0, 2, -114332, -3149],\r\n    [2, 0, -2, 0, 58793, 246158],\r\n    [2, -1, -1, 0, 57066, -152138],\r\n\r\n    [2, 0, 1, 0, 53322, -170733],\r\n    [2, -1, 0, 0, 45758, -204586],\r\n    [0, 1, -1, 0, -40923, -129620],\r\n    [1, 0, 0, 0, -34720, 108743],\r\n\r\n    [0, 1, 1, 0, -30383, 104755],\r\n    [2, 0, 0, -2, 15327, 10321],\r\n    [0, 0, 1, 2, -12528, 0],\r\n    [0, 0, 1, -2, 10980, 79661],\r\n\r\n    [4, 0, -1, 0, 10675, -34782],\r\n    [0, 0, 3, 0, 10034, -23210],\r\n    [4, 0, -2, 0, 8548, -21636],\r\n    [2, 1, -1, 0, -7888, 24208],\r\n\r\n    [2, 1, 0, 0, -6766, 30824],\r\n    [1, 0, -1, 0, -5163, -8379],\r\n    [1, 1, 0, 0, 4987, -16675],\r\n    [2, -1, 1, 0, 4036, -12831],\r\n\r\n    [2, 0, 2, 0, 3994, -10445],\r\n    [4, 0, 0, 0, 3861, -11650],\r\n    [2, 0, -3, 0, 3665, 14403],\r\n    [0, 1, -2, 0, -2689, -7003],\r\n\r\n    [2, 0, -1, 2, -2602, 0],\r\n    [2, -1, -2, 0, 2390, 10056],\r\n    [1, 0, 1, 0, -2348, 6322],\r\n    [2, -2, 0, 0, 2236, -9884],\r\n\r\n    [0, 1, 2, 0, -2120, 5751],\r\n    [0, 2, 0, 0, -2069, 0],\r\n    [2, -2, -1, 0, 2048, -4950],\r\n    [2, 0, 1, -2, -1773, 4130],\r\n\r\n    [2, 0, 0, 2, -1595, 0],\r\n    [4, -1, -1, 0, 1215, -3958],\r\n    [0, 0, 2, 2, -1110, 0],\r\n    [3, 0, -1, 0, -892, 3258],\r\n\r\n    [2, 1, 1, 0, -810, 2616],\r\n    [4, -1, -2, 0, 759, -1897],\r\n    [0, 2, -1, 0, -713, -2117],\r\n    [2, 2, -1, 0, -700, 2354],\r\n\r\n    [2, 1, -2, 0, 691, 0],\r\n    [2, -1, 0, -2, 596, 0],\r\n    [4, 0, 1, 0, 549, -1423],\r\n    [0, 0, 4, 0, 537, -1117],\r\n\r\n    [4, -1, 0, 0, 520, -1571],\r\n    [1, 0, -2, 0, -487, -1739],\r\n    [2, 1, 0, -2, -399, 0],\r\n    [0, 0, 2, -2, -381, -4421],\r\n\r\n    [1, 1, 1, 0, 351, 0],\r\n    [3, 0, -2, 0, -340, 0],\r\n    [4, 0, -3, 0, 330, 0],\r\n    [2, -1, 2, 0, 327, 0],\r\n\r\n    [0, 2, 1, 0, -323, 1165],\r\n    [1, 1, -1, 0, 299, 0],\r\n    [2, 0, 3, 0, 294, 0],\r\n    [2, 0, -1, -2, 0, 8752]\r\n  ]\r\n  return ta.map((row) => {\r\n    const o = {}\r\n    const vals = ['d', 'm', 'm_', 'f', 'Σl', 'Σr']\r\n    vals.forEach((D2R, i) => {\r\n      o[D2R] = row[i]\r\n    })\r\n    return o\r\n  })\r\n})()\r\n\r\nconst tb = (function () {\r\n  const tb = [\r\n    [0, 0, 0, 1, 5128122],\r\n    [0, 0, 1, 1, 280602],\r\n    [0, 0, 1, -1, 277693],\r\n    [2, 0, 0, -1, 173237],\r\n\r\n    [2, 0, -1, 1, 55413],\r\n    [2, 0, -1, -1, 46271],\r\n    [2, 0, 0, 1, 32573],\r\n    [0, 0, 2, 1, 17198],\r\n\r\n    [2, 0, 1, -1, 9266],\r\n    [0, 0, 2, -1, 8822],\r\n    [2, -1, 0, -1, 8216],\r\n    [2, 0, -2, -1, 4324],\r\n\r\n    [2, 0, 1, 1, 4200],\r\n    [2, 1, 0, -1, -3359],\r\n    [2, -1, -1, 1, 2463],\r\n    [2, -1, 0, 1, 2211],\r\n\r\n    [2, -1, -1, -1, 2065],\r\n    [0, 1, -1, -1, -1870],\r\n    [4, 0, -1, -1, 1828],\r\n    [0, 1, 0, 1, -1794],\r\n\r\n    [0, 0, 0, 3, -1749],\r\n    [0, 1, -1, 1, -1565],\r\n    [1, 0, 0, 1, -1491],\r\n    [0, 1, 1, 1, -1475],\r\n\r\n    [0, 1, 1, -1, -1410],\r\n    [0, 1, 0, -1, -1344],\r\n    [1, 0, 0, -1, -1335],\r\n    [0, 0, 3, 1, 1107],\r\n\r\n    [4, 0, 0, -1, 1021],\r\n    [4, 0, -1, 1, 833],\r\n\r\n    [0, 0, 1, -3, 777],\r\n    [4, 0, -2, 1, 671],\r\n    [2, 0, 0, -3, 607],\r\n    [2, 0, 2, -1, 596],\r\n\r\n    [2, -1, 1, -1, 491],\r\n    [2, 0, -2, 1, -451],\r\n    [0, 0, 3, -1, 439],\r\n    [2, 0, 2, 1, 422],\r\n\r\n    [2, 0, -3, -1, 421],\r\n    [2, 1, -1, 1, -366],\r\n    [2, 1, 0, 1, -351],\r\n    [4, 0, 0, 1, 331],\r\n\r\n    [2, -1, 1, 1, 315],\r\n    [2, -2, 0, -1, 302],\r\n    [0, 0, 1, 3, -283],\r\n    [2, 1, 1, -1, -229],\r\n\r\n    [1, 1, 0, -1, 223],\r\n    [1, 1, 0, 1, 223],\r\n    [0, 1, -2, -1, -220],\r\n    [2, 1, -1, -1, -220],\r\n\r\n    [1, 0, 1, 1, -185],\r\n    [2, -1, -2, -1, 181],\r\n    [0, 1, 2, 1, -177],\r\n    [4, 0, -2, -1, 176],\r\n\r\n    [4, -1, -1, -1, 166],\r\n    [1, 0, 1, -1, -164],\r\n    [4, 0, 1, -1, 132],\r\n    [1, 0, -1, -1, -119],\r\n\r\n    [4, -1, 0, -1, 115],\r\n    [2, -2, 0, 1, 107]\r\n  ]\r\n  return tb.map((row) => {\r\n    const o = {}\r\n    const vals = ['d', 'm', 'm_', 'f', 'Σb']\r\n    vals.forEach((D2R, i) => {\r\n      o[D2R] = row[i]\r\n    })\r\n    return o\r\n  })\r\n})()\r\n\r\n/**\r\n * Node returns longitude of the mean ascending node of the lunar orbit.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @returns result in radians.\r\n */\r\nfunction node (jde) {\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(\r\n    _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(\r\n      _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde),\r\n      125.0445479 * D2R,\r\n      -1934.1362891 * D2R,\r\n      0.0020754 * D2R,\r\n      D2R / 467441,\r\n      -D2R / 60616000\r\n    ), 2 * Math.PI\r\n  )\r\n}\r\n\r\n/**\r\n * perigee returns longitude of perigee of the lunar orbit.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @returns result in radians.\r\n */\r\nfunction perigee (jde) {\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(\r\n    _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(\r\n      _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde),\r\n      83.3532465 * D2R,\r\n      4069.0137287 * D2R,\r\n      -0.01032 * D2R,\r\n      -D2R / 80053,\r\n      D2R / 18999000\r\n    ), 2 * Math.PI\r\n  )\r\n}\r\n\r\n/**\r\n * trueNode returns longitude of the true ascending node.\r\n *\r\n * That is, the node of the instantaneous lunar orbit.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @returns result in radians.\r\n */\r\nfunction trueNode (jde) {\r\n  const [d, m, m_, f] = dmf(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde))\r\n  return node(jde) +\r\n    -1.4979 * D2R * sin(2 * (d - f)) +\r\n    -0.15 * D2R * sin(m) +\r\n    -0.1226 * D2R * sin(2 * d) +\r\n    0.1176 * D2R * sin(2 * f) +\r\n    -0.0801 * D2R * sin(2 * (m_ - f))\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  parallax,\r\n  position,\r\n  node,\r\n  perigee,\r\n  trueNode\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/moonposition.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/nearparabolic.js":
/*!******************************************************!*\
  !*** ./node_modules/astronomia/src/nearparabolic.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Elements: () => (/* binding */ Elements),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module nearparabolic\r\n */\r\n/**\r\n * Nearparabolic: Chapter 35, Near-parabolic Motion.\r\n */\r\n\r\n\r\n/**\r\n * Elements holds orbital elements for near-parabolic orbits.\r\n */\r\nclass Elements {\r\n  /**\r\n   * @param {Number} timeP - time of Perihelion, T\r\n   * @param {Number} pDis - Perihelion distance, q\r\n   * @param {Number} ecc - eccentricity, e\r\n   */\r\n  constructor (timeP, pDis, ecc) {\r\n    this.timeP = timeP\r\n    this.pDis = pDis\r\n    this.ecc = ecc\r\n  }\r\n\r\n  /**\r\n   * AnomalyDistance returns true anomaly and distance for near-parabolic orbits.\r\n   *\r\n   * True anomaly ν returned in radians. Distance r returned in AU.\r\n   * An error is returned if the algorithm fails to converge.\r\n   */\r\n  anomalyDistance (jde) {\r\n    // fairly literal translation of code on p. 246\r\n    const q1 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].K * Math.sqrt((1 + this.ecc) / this.pDis) / (2 * this.pDis) // line 20\r\n    const g = (1 - this.ecc) / (1 + this.ecc) // line 20\r\n\r\n    const t = jde - this.timeP // line 22\r\n    if (t === 0) { // line 24\r\n      return { ano: 0, dist: this.pDis, err: null }\r\n    }\r\n    const d1 = 1e4\r\n    const d = 1e-9 // line 14\r\n    const q2 = q1 * t // line 28\r\n    let s = 2.0 / (3 * Math.abs(q2)) // line 30\r\n    s = 2 / Math.tan(2 * Math.atan(Math.cbrt(Math.tan(Math.atan(s) / 2))))\r\n    if (t < 0) { // line 34\r\n      s = -s\r\n    }\r\n    if (this.ecc !== 1) { // line 36\r\n      let l = 0 // line 38\r\n      for (;;) {\r\n        const s0 = s // line 40\r\n        let z = 1.0\r\n        const y = s * s\r\n        let g1 = -y * s\r\n        let q3 = q2 + 2 * g * s * y / 3 // line 42\r\n        for (;;) {\r\n          z += 1 // line 44\r\n          g1 = -g1 * g * y // line 46\r\n          const z1 = (z - (z + 1) * g) / (2 * z + 1) // line 48\r\n          const f = z1 * g1 // line 50\r\n          q3 += f // line 52\r\n          if (z > 50 || Math.abs(f) > d1) { // line 54\r\n            return {\r\n              err: new Error('No convergence')\r\n            }\r\n          }\r\n          if (Math.abs(f) <= d) { // line 56\r\n            break\r\n          }\r\n        }\r\n        l++ // line 58\r\n        if (l > 50) {\r\n          return {\r\n            err: new Error('No convergence')\r\n          }\r\n        }\r\n        for (;;) {\r\n          const s1 = s // line 60\r\n          s = (2 * s * s * s / 3 + q3) / (s * s + 1)\r\n          if (Math.abs(s - s1) <= d) { // line 62\r\n            break\r\n          }\r\n        }\r\n        if (Math.abs(s - s0) <= d) { // line 64\r\n          break\r\n        }\r\n      }\r\n    }\r\n    let ν = 2 * Math.atan(s) // line 66\r\n    const r = this.pDis * (1 + this.ecc) / (1 + this.ecc * Math.cos(ν)) // line 68\r\n    if (ν < 0) { // line 70\r\n      ν += 2 * Math.PI\r\n    }\r\n    return {\r\n      ano: ν,\r\n      dist: r,\r\n      err: null\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  Elements\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/nearparabolic.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/node.js":
/*!*********************************************!*\
  !*** ./node_modules/astronomia/src/node.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   el: () => (/* binding */ el),\n/* harmony export */   ellipticAscending: () => (/* binding */ ellipticAscending),\n/* harmony export */   ellipticDescending: () => (/* binding */ ellipticDescending),\n/* harmony export */   pa: () => (/* binding */ pa),\n/* harmony export */   parabolicAscending: () => (/* binding */ parabolicAscending),\n/* harmony export */   parabolicDescending: () => (/* binding */ parabolicDescending)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module node\r\n */\r\n/**\r\n * Node: Chapter 39, Passages through the Nodes.\r\n */\r\n\r\n\r\n\r\n/**\r\n * EllipticAscending computes time and distance of passage through the ascending node of a body in an elliptical orbit.\r\n *\r\n * Argument axis is semimajor axis in AU, ecc is eccentricity, argP is argument\r\n * of perihelion in radians, timeP is time of perihelion as a jd.\r\n *\r\n * Result is jde of the event and distance from the sun in AU.\r\n */\r\nfunction ellipticAscending (axis, ecc, argP, timeP) { // (axis, ecc, argP, timeP float64)  (jde, r float64)\r\n  return el(-argP, axis, ecc, timeP)\r\n}\r\n\r\n/**\r\n * EllipticAscending computes time and distance of passage through the descending node of a body in an elliptical orbit.\r\n *\r\n * Argument axis is semimajor axis in AU, ecc is eccentricity, argP is argument\r\n * of perihelion in radians, timeP is time of perihelion as a jd.\r\n *\r\n * Result is jde of the event and distance from the sun in AU.\r\n */\r\nfunction ellipticDescending (axis, ecc, argP, timeP) { // (axis, ecc, argP, timeP float64)  (jde, r float64)\r\n  return el(Math.PI - argP, axis, ecc, timeP)\r\n}\r\n\r\nfunction el (ν, axis, ecc, timeP) { // (ν, axis, ecc, timeP float64)  (jde, r float64)\r\n  const E = 2 * Math.atan(Math.sqrt((1 - ecc) / (1 + ecc)) * Math.tan(ν * 0.5))\r\n  const [sE, cE] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(E)\r\n  const M = E - ecc * sE\r\n  const n = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].K / axis / Math.sqrt(axis)\r\n  const jde = timeP + M / n\r\n  const r = axis * (1 - ecc * cE)\r\n  return [jde, r]\r\n}\r\n\r\n/**\r\n * ParabolicAscending computes time and distance of passage through the ascending node of a body in a parabolic orbit.\r\n *\r\n * Argument q is perihelion distance in AU, argP is argument of perihelion\r\n * in radians, timeP is time of perihelion as a jd.\r\n *\r\n * Result is jde of the event and distance from the sun in AU.\r\n */\r\nfunction parabolicAscending (q, argP, timeP) { // (q, argP, timeP float64)  (jde, r float64)\r\n  return pa(-argP, q, timeP)\r\n}\r\n\r\n/**\r\n * ParabolicDescending computes time and distance of passage through the descending node of a body in a parabolic orbit.\r\n *\r\n * Argument q is perihelion distance in AU, argP is argument of perihelion\r\n * in radians, timeP is time of perihelion as a jd.\r\n *\r\n * Result is jde of the event and distance from the sun in AU.\r\n */\r\nfunction parabolicDescending (q, argP, timeP) { // (q, argP, timeP float64)  (jde, r float64)\r\n  return pa(Math.PI - argP, q, timeP)\r\n}\r\n\r\nfunction pa (ν, q, timeP) { // (ν, q, timeP float64)  (jde, r float64)\r\n  const s = Math.tan(ν * 0.5)\r\n  const jde = timeP + 27.403895 * s * (s * s + 3) * q * Math.sqrt(q)\r\n  const r = q * (1 + s * s)\r\n  return [jde, r]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  ellipticAscending,\r\n  ellipticDescending,\r\n  el,\r\n  parabolicAscending,\r\n  parabolicDescending,\r\n  pa\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/node.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/nutation.js":
/*!*************************************************!*\
  !*** ./node_modules/astronomia/src/nutation.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approxNutation: () => (/* binding */ approxNutation),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   meanObliquity: () => (/* binding */ meanObliquity),\n/* harmony export */   meanObliquityLaskar: () => (/* binding */ meanObliquityLaskar),\n/* harmony export */   nutation: () => (/* binding */ nutation),\n/* harmony export */   nutationInRA: () => (/* binding */ nutationInRA)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module nutation\r\n */\r\n/**\r\n * Nutation: Chapter 22, Nutation and the Obliquity of the Ecliptic.\r\n */\r\n\r\n\r\n\r\n\r\n// Nutation: Chapter 22, Nutation and the Obliquity of the Ecliptic.\r\n\r\n/**\r\n * Nutation returns nutation in longitude (Δψ) and nutation in obliquity (Δε)\r\n * for a given JDE.\r\n *\r\n * JDE = UT + ΔT, see package.\r\n *\r\n * Computation is by 1980 IAU theory, with terms < .0003″ neglected.\r\n *\r\n * Result units are radians.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @return {number[]} [Δψ, Δε] - [longitude, obliquity] in radians\r\n */\r\nfunction nutation (jde) {\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  // Mean elongation of the Moon from the sun\r\n  const D = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T,\r\n    297.85036, 445267.11148, -0.0019142, 1.0 / 189474) * Math.PI / 180\r\n  // Mean anomaly of the Sun (Earth)\r\n  const M = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T,\r\n    357.52772, 35999.050340, -0.0001603, -1.0 / 300000) * Math.PI / 180\r\n  // Mean anomaly of the Moon\r\n  const N = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T,\r\n    134.96298, 477198.867398, 0.0086972, 1.0 / 56250) * Math.PI / 180\r\n  // Moon's argument of latitude\r\n  const F = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T,\r\n    93.27191, 483202.017538, -0.0036825, 1.0 / 327270) * Math.PI / 180\r\n  // Longitude of the ascending node of the Moon's mean orbit on the ecliptic, measured from mean equinox of date\r\n  const Ω = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T,\r\n    125.04452, -1934.136261, 0.0020708, 1.0 / 450000) * Math.PI / 180\r\n  let Δψ = 0\r\n  let Δε = 0\r\n  // sum in reverse order to accumulate smaller terms first\r\n  for (let i = table22A.length - 1; i >= 0; i--) {\r\n    const row = table22A[i]\r\n    const arg = row.d * D + row.m * M + row.n * N + row.f * F + row.ω * Ω\r\n    const [s, c] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(arg)\r\n    Δψ += s * (row.s0 + row.s1 * T)\r\n    Δε += c * (row.c0 + row.c1 * T)\r\n  }\r\n  Δψ *= 0.0001 / 3600 * (Math.PI / 180)\r\n  Δε *= 0.0001 / 3600 * (Math.PI / 180)\r\n  return [Δψ, Δε] // (Δψ, Δε float)\r\n}\r\n/**\r\n * ApproxNutation returns a fast approximation of nutation in longitude (Δψ)\r\n * and nutation in obliquity (Δε) for a given JDE.\r\n *\r\n * Accuracy is 0.5″ in Δψ, 0.1″ in Δε.\r\n *\r\n * Result units are radians.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @return {number[]} [Δψ, Δε] - [longitude, obliquity] in radians\r\n */\r\nfunction approxNutation (jde) {\r\n  const T = (jde - _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000) / 36525\r\n  const Ω = (125.04452 - 1934.136261 * T) * Math.PI / 180\r\n  const L = (280.4665 + 36000.7698 * T) * Math.PI / 180\r\n  const N = (218.3165 + 481267.8813 * T) * Math.PI / 180\r\n  const [sΩ, cΩ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(Ω)\r\n  const [s2L, c2L] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * L)\r\n  const [s2N, c2N] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * N)\r\n  const [s2Ω, c2Ω] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * Ω)\r\n  const Δψ = (-17.2 * sΩ - 1.32 * s2L - 0.23 * s2N + 0.21 * s2Ω) / 3600 * (Math.PI / 180)\r\n  const Δε = (9.2 * cΩ + 0.57 * c2L + 0.1 * c2N - 0.09 * c2Ω) / 3600 * (Math.PI / 180)\r\n  return [Δψ, Δε] // (Δψ, Δε float)\r\n}\r\n\r\n/**\r\n * MeanObliquity returns mean obliquity (ε₀) following the IAU 1980\r\n * polynomial.\r\n *\r\n * Accuracy is 1″ over the range 1000 to 3000 years and 10″ over the range\r\n * 0 to 4000 years.\r\n *\r\n * Result unit is radians.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @return {number} mean obliquity (ε₀)\r\n */\r\nfunction meanObliquity (jde) {\r\n  // (22.2) p. 147\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(\r\n    _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde),\r\n    new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Angle(false, 23, 26, 21.448).rad(),\r\n    -46.815 / 3600 * (Math.PI / 180),\r\n    -0.00059 / 3600 * (Math.PI / 180),\r\n    0.001813 / 3600 * (Math.PI / 180)\r\n  )\r\n}\r\n\r\n/**\r\n * MeanObliquityLaskar returns mean obliquity (ε₀) following the Laskar\r\n * 1986 polynomial.\r\n *\r\n * Accuracy over the range 1000 to 3000 years is .01″.\r\n *\r\n * Accuracy over the valid date range of -8000 to +12000 years is\r\n * \"a few seconds.\"\r\n *\r\n * Result unit is radians.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @return {number} mean obliquity (ε₀)\r\n */\r\nfunction meanObliquityLaskar (jde) {\r\n  // (22.3) p. 147\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(\r\n    _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde) * 0.01,\r\n    new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Angle(false, 23, 26, 21.448).rad(),\r\n    -4680.93 / 3600 * (Math.PI / 180),\r\n    -1.55 / 3600 * (Math.PI / 180),\r\n    1999.25 / 3600 * (Math.PI / 180),\r\n    -51.38 / 3600 * (Math.PI / 180),\r\n    -249.67 / 3600 * (Math.PI / 180),\r\n    -39.05 / 3600 * (Math.PI / 180),\r\n    7.12 / 3600 * (Math.PI / 180),\r\n    27.87 / 3600 * (Math.PI / 180),\r\n    5.79 / 3600 * (Math.PI / 180),\r\n    2.45 / 3600 * (Math.PI / 180)\r\n  )\r\n}\r\n\r\n/**\r\n * NutationInRA returns \"nutation in right ascension\" or \"equation of the\r\n * equinoxes.\"\r\n *\r\n * Result is an angle in radians.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @return {number} nutation in right ascension\r\n */\r\nfunction nutationInRA (jde) {\r\n  const [Δψ, Δε] = nutation(jde)\r\n  const ε0 = meanObliquity(jde)\r\n  return Δψ * Math.cos(ε0 + Δε)\r\n}\r\n\r\nconst table22A = (function () {\r\n  const PROPS = 'd,m,n,f,ω,s0,s1,c0,c1'.split(',')\r\n  const tab = [\r\n    [0, 0, 0, 0, 1, -171996, -174.2, 92025, 8.9],\r\n    [-2, 0, 0, 2, 2, -13187, -1.6, 5736, -3.1],\r\n    [0, 0, 0, 2, 2, -2274, -0.2, 977, -0.5],\r\n    [0, 0, 0, 0, 2, 2062, 0.2, -895, 0.5],\r\n    [0, 1, 0, 0, 0, 1426, -3.4, 54, -0.1],\r\n    [0, 0, 1, 0, 0, 712, 0.1, -7, 0],\r\n    [-2, 1, 0, 2, 2, -517, 1.2, 224, -0.6],\r\n    [0, 0, 0, 2, 1, -386, -0.4, 200, 0],\r\n    [0, 0, 1, 2, 2, -301, 0, 129, -0.1],\r\n    [-2, -1, 0, 2, 2, 217, -0.5, -95, 0.3],\r\n    [-2, 0, 1, 0, 0, -158, 0, 0, 0],\r\n    [-2, 0, 0, 2, 1, 129, 0.1, -70, 0],\r\n    [0, 0, -1, 2, 2, 123, 0, -53, 0],\r\n    [2, 0, 0, 0, 0, 63, 0, 0, 0],\r\n    [0, 0, 1, 0, 1, 63, 0.1, -33, 0],\r\n    [2, 0, -1, 2, 2, -59, 0, 26, 0],\r\n    [0, 0, -1, 0, 1, -58, -0.1, 32, 0],\r\n    [0, 0, 1, 2, 1, -51, 0, 27, 0],\r\n    [-2, 0, 2, 0, 0, 48, 0, 0, 0],\r\n    [0, 0, -2, 2, 1, 46, 0, -24, 0],\r\n    [2, 0, 0, 2, 2, -38, 0, 16, 0],\r\n    [0, 0, 2, 2, 2, -31, 0, 13, 0],\r\n    [0, 0, 2, 0, 0, 29, 0, 0, 0],\r\n    [-2, 0, 1, 2, 2, 29, 0, -12, 0],\r\n    [0, 0, 0, 2, 0, 26, 0, 0, 0],\r\n    [-2, 0, 0, 2, 0, -22, 0, 0, 0],\r\n    [0, 0, -1, 2, 1, 21, 0, -10, 0],\r\n    [0, 2, 0, 0, 0, 17, -0.1, 0, 0],\r\n    [2, 0, -1, 0, 1, 16, 0, -8, 0],\r\n    [-2, 2, 0, 2, 2, -16, 0.1, 7, 0],\r\n    [0, 1, 0, 0, 1, -15, 0, 9, 0],\r\n    [-2, 0, 1, 0, 1, -13, 0, 7, 0],\r\n    [0, -1, 0, 0, 1, -12, 0, 6, 0],\r\n    [0, 0, 2, -2, 0, 11, 0, 0, 0],\r\n    [2, 0, -1, 2, 1, -10, 0, 5, 0],\r\n    [2, 0, 1, 2, 2, -8, 0, 3, 0],\r\n    [0, 1, 0, 2, 2, 7, 0, -3, 0],\r\n    [-2, 1, 1, 0, 0, -7, 0, 0, 0],\r\n    [0, -1, 0, 2, 2, -7, 0, 3, 0],\r\n    [2, 0, 0, 2, 1, -7, 0, 3, 0],\r\n    [2, 0, 1, 0, 0, 6, 0, 0, 0],\r\n    [-2, 0, 2, 2, 2, 6, 0, -3, 0],\r\n    [-2, 0, 1, 2, 1, 6, 0, -3, 0],\r\n    [2, 0, -2, 0, 1, -6, 0, 3, 0],\r\n    [2, 0, 0, 0, 1, -6, 0, 3, 0],\r\n    [0, -1, 1, 0, 0, 5, 0, 0, 0],\r\n    [-2, -1, 0, 2, 1, -5, 0, 3, 0],\r\n    [-2, 0, 0, 0, 1, -5, 0, 3, 0],\r\n    [0, 0, 2, 2, 1, -5, 0, 3, 0],\r\n    [-2, 0, 2, 0, 1, 4, 0, 0, 0],\r\n    [-2, 1, 0, 2, 1, 4, 0, 0, 0],\r\n    [0, 0, 1, -2, 0, 4, 0, 0, 0],\r\n    [-1, 0, 1, 0, 0, -4, 0, 0, 0],\r\n    [-2, 1, 0, 0, 0, -4, 0, 0, 0],\r\n    [1, 0, 0, 0, 0, -4, 0, 0, 0],\r\n    [0, 0, 1, 2, 0, 3, 0, 0, 0],\r\n    [0, 0, -2, 2, 2, -3, 0, 0, 0],\r\n    [-1, -1, 1, 0, 0, -3, 0, 0, 0],\r\n    [0, 1, 1, 0, 0, -3, 0, 0, 0],\r\n    [0, -1, 1, 2, 2, -3, 0, 0, 0],\r\n    [2, -1, -1, 2, 2, -3, 0, 0, 0],\r\n    [0, 0, 3, 2, 2, -3, 0, 0, 0],\r\n    [2, -1, 0, 2, 2, -3, 0, 0, 0]\r\n  ]\r\n\r\n  return tab.map((row) => {\r\n    const o = {}\r\n    PROPS.forEach((p, i) => {\r\n      o[p] = row[i]\r\n    })\r\n    return o\r\n  })\r\n})()\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  nutation,\r\n  approxNutation,\r\n  meanObliquity,\r\n  meanObliquityLaskar,\r\n  nutationInRA\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/nutation.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/parabolic.js":
/*!**************************************************!*\
  !*** ./node_modules/astronomia/src/parabolic.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Elements: () => (/* binding */ Elements),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module parabolic\r\n */\r\n/**\r\n * Parabolic: Chapter 34, Parabolic Motion.\r\n */\r\n\r\n\r\n/**\r\n * Elements holds parabolic elements needed for computing true anomaly and distance.\r\n */\r\nclass Elements {\r\n  /**\r\n   * @param {Number} timeP - time of perihelion, T\r\n   * @param {Number} pDis - perihelion distance, q\r\n   */\r\n  constructor (timeP, pDis) {\r\n    this.timeP = timeP\r\n    this.pDis = pDis\r\n  }\r\n\r\n  /**\r\n   * AnomalyDistance returns true anomaly and distance of a body in a parabolic orbit of the Sun.\r\n   *\r\n   * @param {Number} jde - Julian ephemeris day\r\n   * @returns {Object} {ano, dist}\r\n   *   {Number} ano - True anomaly ν in radians.\r\n   *   {Number} dist - Distance r returned in AU.\r\n   */\r\n  anomalyDistance (jde) {\r\n    const W = 3 * _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].K / Math.SQRT2 * (jde - this.timeP) / this.pDis / Math.sqrt(this.pDis)\r\n    const G = W * 0.5\r\n    const Y = Math.cbrt(G + Math.sqrt(G * G + 1))\r\n    const s = Y - 1 / Y\r\n    const ν = 2 * Math.atan(s)\r\n    const r = this.pDis * (1 + s * s)\r\n    return {\r\n      ano: ν,\r\n      dist: r\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  Elements\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/parabolic.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/parallactic.js":
/*!****************************************************!*\
  !*** ./node_modules/astronomia/src/parallactic.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   diurnalPathAtHorizon: () => (/* binding */ diurnalPathAtHorizon),\n/* harmony export */   eclipticAtEquator: () => (/* binding */ eclipticAtEquator),\n/* harmony export */   eclipticAtHorizon: () => (/* binding */ eclipticAtHorizon),\n/* harmony export */   parallacticAngle: () => (/* binding */ parallacticAngle),\n/* harmony export */   parallacticAngleOnHorizon: () => (/* binding */ parallacticAngleOnHorizon)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module parallactic\r\n */\r\n/**\r\n * Parallactic: Chapter 14, The Parallactic Angle, and three other Topics.\r\n */\r\n\r\n\r\n\r\n/**\r\n * ParallacticAngle returns parallactic angle of a celestial object.\r\n *\r\n *  φ is geographic latitude of observer.\r\n *  δ is declination of observed object.\r\n *  H is hour angle of observed object.\r\n *\r\n * All angles including result are in radians.\r\n */\r\nfunction parallacticAngle (φ, δ, H) { // (φ, δ, H float64)  float64\r\n  const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n  const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n  return Math.atan2(sH, Math.tan(φ) * cδ - sδ * cH) // (14.1) p. 98\r\n}\r\n\r\n/**\r\n * ParallacticAngleOnHorizon is a special case of ParallacticAngle.\r\n *\r\n * The hour angle is not needed as an input and the math inside simplifies.\r\n */\r\nfunction parallacticAngleOnHorizon (φ, δ) { // (φ, δ float64)  float64\r\n  return Math.acos(Math.sin(φ) / Math.cos(δ))\r\n}\r\n\r\n/**\r\n * EclipticAtHorizon computes how the plane of the ecliptic intersects\r\n * the horizon at a given local sidereal time as observed from a given\r\n * geographic latitude.\r\n *\r\n *  ε is obliquity of the ecliptic.\r\n *  φ is geographic latitude of observer.\r\n *  θ is local sidereal time expressed as an hour angle.\r\n *\r\n *  λ1 and λ2 are ecliptic longitudes where the ecliptic intersects the horizon.\r\n *  I is the angle at which the ecliptic intersects the horizon.\r\n *\r\n * All angles, arguments and results, are in radians.\r\n */\r\nfunction eclipticAtHorizon (ε, φ, θ) { // (ε, φ, θ float64)  (λ1, λ2, I float64)\r\n  const [sε, cε] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε)\r\n  const [sφ, cφ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(φ)\r\n  const [sθ, cθ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(θ)\r\n  let λ = Math.atan2(-cθ, sε * (sφ / cφ) + cε * sθ) // (14.2) p. 99\r\n  if (λ < 0) {\r\n    λ += Math.PI\r\n  }\r\n  return [λ, λ + Math.PI, Math.acos(cε * sφ - sε * cφ * sθ)] // (14.3) p. 99\r\n}\r\n\r\n/**\r\n * EclipticAtEquator computes the angle between the ecliptic and the parallels\r\n * of ecliptic latitude at a given ecliptic longitude.\r\n *\r\n * (The function name EclipticAtEquator is for consistency with the Meeus text,\r\n * and works if you consider the equator a nominal parallel of latitude.)\r\n *\r\n *  λ is ecliptic longitude.\r\n *  ε is obliquity of the ecliptic.\r\n *\r\n * All angles in radians.\r\n */\r\nfunction eclipticAtEquator (λ, ε) { // (λ, ε float64)  float64\r\n  return Math.atan(-Math.cos(λ) * Math.tan(ε))\r\n}\r\n\r\n/**\r\n * DiurnalPathAtHorizon computes the angle of the path a celestial object\r\n * relative to the horizon at the time of its rising or setting.\r\n *\r\n *  δ is declination of the object.\r\n *  φ is geographic latitude of observer.\r\n *\r\n * All angles in radians.\r\n */\r\nfunction diurnalPathAtHorizon (δ, φ) { // (δ, φ float64)  (J float64)\r\n  const tφ = Math.tan(φ)\r\n  const b = Math.tan(δ) * tφ\r\n  const c = Math.sqrt(1 - b * b)\r\n  return Math.atan(c * Math.cos(δ) / tφ)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  parallacticAngle,\r\n  parallacticAngleOnHorizon,\r\n  eclipticAtHorizon,\r\n  eclipticAtEquator,\r\n  diurnalPathAtHorizon\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/parallactic.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/parallax.js":
/*!*************************************************!*\
  !*** ./node_modules/astronomia/src/parallax.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   horizontal: () => (/* binding */ horizontal),\n/* harmony export */   topocentric: () => (/* binding */ topocentric),\n/* harmony export */   topocentric2: () => (/* binding */ topocentric2),\n/* harmony export */   topocentric3: () => (/* binding */ topocentric3),\n/* harmony export */   topocentricEcliptical: () => (/* binding */ topocentricEcliptical)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _globe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globe.js */ \"./node_modules/astronomia/src/globe.js\");\n/* harmony import */ var _sidereal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sidereal.js */ \"./node_modules/astronomia/src/sidereal.js\");\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module parallax\r\n */\r\n/**\r\n * Parallax: Chapter 40, Correction for Parallax.\r\n */\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n\r\n\r\n\r\nconst horPar = (8.794 / 3600) * Math.PI / 180 // 8\".794 arcseconds in radians\r\n\r\n/**\r\n * Horizontal returns equatorial horizontal parallax of a body.\r\n *\r\n * @param {number} Δ - distance in AU.\r\n * @return {number} parallax in radians.\r\n */\r\nfunction horizontal (Δ) {\r\n  // (40.1) p. 279\r\n  return Math.asin(Math.sin(horPar) / Δ)\r\n  // return horPar / Δ // with sufficient accuracy\r\n}\r\n\r\n/**\r\n * Topocentric returns topocentric positions including parallax.\r\n *\r\n * Arguments α, δ are geocentric right ascension and declination in radians.\r\n * Δ is distance to the observed object in AU. ρsφ, ρcφ are parallax\r\n * constants (see package globe.) lon is geographic longitude of the observer,\r\n * jde is time of observation.\r\n *\r\n * @param {Coord} c - geocentric right ascension and declination in radians\r\n * @param {number} ρsφ - parallax constants (see package globe.)\r\n * @param {number} ρcφ - parallax constants (see package globe.)\r\n * @param {number} lon - geographic longitude of the observer (measured positively westwards!)\r\n * @param {number} jde - time of observation\r\n * @return {Coord} observed topocentric ra and dec in radians.\r\n */\r\nfunction topocentric (c, ρsφ, ρcφ, lon, jde) {\r\n  const [α, δ, Δ] = [c.ra, c.dec, c.range]\r\n  const π = horizontal(Δ)\r\n  const θ0 = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Time(_sidereal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].apparent(jde)).rad()\r\n  const H = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(θ0 - lon - α, 2 * Math.PI)\r\n  const sπ = Math.sin(π)\r\n  const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n  const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n  const Δα = Math.atan2(-ρcφ * sπ * sH, cδ - ρcφ * sπ * cH) // (40.2) p. 279\r\n  const α_ = α + Δα\r\n  const δ_ = Math.atan2((sδ - ρsφ * sπ) * Math.cos(Δα), cδ - ρcφ * sπ * cH) // (40.3) p. 279\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__.Coord(α_, δ_)\r\n}\r\n\r\n/**\r\n * Topocentric2 returns topocentric corrections including parallax.\r\n *\r\n * This function implements the \"non-rigorous\" method descripted in the text.\r\n *\r\n * Note that results are corrections, not corrected coordinates.\r\n *\r\n * @param {Coord} c - geocentric right ascension and declination in radians\r\n * @param {number} ρsφ - parallax constants (see package globe.)\r\n * @param {number} ρcφ - parallax constants (see package globe.)\r\n * @param {number} lon - geographic longitude of the observer (measured positively westwards!)\r\n * @param {number} jde - time of observation\r\n * @return {Coord} observed topocentric ra and dec in radians.\r\n */\r\nfunction topocentric2 (c, ρsφ, ρcφ, lon, jde) {\r\n  const [α, δ, Δ] = [c.ra, c.dec, c.range]\r\n  const π = horizontal(Δ)\r\n  const θ0 = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Time(_sidereal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].apparent(jde)).rad()\r\n  const H = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(θ0 - lon - α, 2 * Math.PI)\r\n  const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n  const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n  const Δα = -π * ρcφ * sH / cδ // (40.4) p. 280\r\n  const Δδ = -π * (ρsφ * cδ - ρcφ * cH * sδ) // (40.5) p. 280\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(Δα, Δδ)\r\n}\r\n\r\n/**\r\n * Topocentric3 returns topocentric hour angle and declination including parallax.\r\n *\r\n * This function implements the \"alternative\" method described in the text.\r\n * The method should be similarly rigorous to that of Topocentric() and results\r\n * should be virtually consistent.\r\n *\r\n * @param {Coord} c - geocentric right ascension and declination in radians\r\n * @param {number} ρsφ - parallax constants (see package globe.)\r\n * @param {number} ρcφ - parallax constants (see package globe.)\r\n * @param {number} lon - geographic longitude of the observer (measured positively westwards!)\r\n * @param {number} jde - time of observation\r\n * @return {Array}\r\n *    {number} H_ - topocentric hour angle\r\n *    {number} δ_ - topocentric declination\r\n */\r\nfunction topocentric3 (c, ρsφ, ρcφ, lon, jde) {\r\n  const [α, δ, Δ] = [c.ra, c.dec, c.range]\r\n  const π = horizontal(Δ)\r\n  const θ0 = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Time(_sidereal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].apparent(jde)).rad()\r\n  const H = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(θ0 - lon - α, 2 * Math.PI)\r\n  const sπ = Math.sin(π)\r\n  const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n  const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n  const A = cδ * sH\r\n  const B = cδ * cH - ρcφ * sπ\r\n  const C = sδ - ρsφ * sπ\r\n  const q = Math.sqrt(A * A + B * B + C * C)\r\n  const H_ = Math.atan2(A, B)\r\n  const δ_ = Math.asin(C / q)\r\n  return [H_, δ_]\r\n}\r\n\r\n/**\r\n * TopocentricEcliptical returns topocentric ecliptical coordinates including parallax.\r\n *\r\n * Arguments `c` are geocentric ecliptical longitude and latitude of a body,\r\n * s is its geocentric semidiameter. φ, h are the observer's latitude and\r\n * and height above the ellipsoid in meters.  ε is the obliquity of the\r\n * ecliptic, θ is local sidereal time, π is equatorial horizontal parallax\r\n * of the body (see Horizonal()).\r\n *\r\n * All angular parameters and results are in radians.\r\n *\r\n * @param {Coord} c - geocentric right ascension and declination in radians\r\n * @param {number} s - geocentric semidiameter of `c`\r\n * @param {number} φ - observer's latitude\r\n * @param {number} h - observer's height above the ellipsoid in meters\r\n * @param {number} ε - is the obliquity of the ecliptic\r\n * @param {number} θ - local sidereal time\r\n * @param {number} π - equatorial horizontal parallax of the body\r\n * @return {Array}\r\n *    {number} λ_ - observed topocentric longitude\r\n *    {number} β_ - observed topocentric latitude\r\n *    {number} s_ - observed topocentric semidiameter\r\n */\r\nfunction topocentricEcliptical (c, s, φ, h, ε, θ, π) {\r\n  const [λ, β] = [c.lon, c.lat]\r\n  const [S, C] = _globe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Earth76.parallaxConstants(φ, h)\r\n  const [sλ, cλ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(λ)\r\n  const [sβ, cβ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(β)\r\n  const [sε, cε] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε)\r\n  const [sθ, cθ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(θ)\r\n  const sπ = Math.sin(π)\r\n  const N = cλ * cβ - C * sπ * cθ\r\n  let λ_ = Math.atan2(sλ * cβ - sπ * (S * sε + C * cε * sθ), N)\r\n  if (λ_ < 0) {\r\n    λ_ += 2 * Math.PI\r\n  }\r\n  const cλ_ = Math.cos(λ_)\r\n  const β_ = Math.atan(cλ_ * (sβ - sπ * (S * cε - C * sε * sθ)) / N)\r\n  const s_ = Math.asin(cλ_ * Math.cos(β_) * Math.sin(s) / N)\r\n  return [λ_, β_, s_]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  horizontal,\r\n  topocentric,\r\n  topocentric2,\r\n  topocentric3,\r\n  topocentricEcliptical\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/parallax.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/perihelion.js":
/*!***************************************************!*\
  !*** ./node_modules/astronomia/src/perihelion.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aphelion: () => (/* binding */ aphelion),\n/* harmony export */   aphelion2: () => (/* binding */ aphelion2),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   earth: () => (/* binding */ earth),\n/* harmony export */   embary: () => (/* binding */ embary),\n/* harmony export */   jupiter: () => (/* binding */ jupiter),\n/* harmony export */   mars: () => (/* binding */ mars),\n/* harmony export */   mercury: () => (/* binding */ mercury),\n/* harmony export */   neptune: () => (/* binding */ neptune),\n/* harmony export */   perihelion: () => (/* binding */ perihelion),\n/* harmony export */   perihelion2: () => (/* binding */ perihelion2),\n/* harmony export */   saturn: () => (/* binding */ saturn),\n/* harmony export */   uranus: () => (/* binding */ uranus),\n/* harmony export */   venus: () => (/* binding */ venus)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _interpolation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interpolation.js */ \"./node_modules/astronomia/src/interpolation.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/* eslint-disable n/no-callback-literal */\r\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module perihelion\r\n */\r\n/**\r\n * Perihelion: Chapter 38, Planets in Perihelion and Aphelion.\r\n *\r\n * Functions Aphelion and Perihelion implement algorithms from the book\r\n * to return approximate results.\r\n *\r\n * For accurate results, Meeus describes the general technique of\r\n * interpolating from a precise ephemeris but does not give a complete\r\n * algorithm.  The algorithm implemented here for Aphelion2 and Perihelion2\r\n * is to start with the approximate result and then crawl along the curve\r\n * at the specified time resolution until the desired extremum is found.\r\n * This algorithm slows down as higher accuracy is demanded.  1 day accuracy\r\n * is generally quick for planets other than Neptune.\r\n *\r\n * Meeus doesn't give an algorithm to handle the double extrema of Neptune.\r\n * The algorithm here is to pick starting points several years either side\r\n * of the approximate date and follow the slopes inward.  The consequence of\r\n * starting farther from the extremum is that these functions are particularly\r\n * slow for Neptune.  They are offered here though as a simple implementation\r\n * of Meeus's presentation in the book.\r\n */\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n/**\r\n * Planet constants for first argument of Perihelion and Aphelion functions.\r\n * @enum {number}\r\n */\r\nconst planetsEnum = {\r\n  mercury: 0,\r\n  venus: 1,\r\n  earth: 2,\r\n  mars: 3,\r\n  jupiter: 4,\r\n  saturn: 5,\r\n  uranus: 6,\r\n  neptune: 7,\r\n  embary: 8\r\n}\r\nconst mercury = planetsEnum.mercury\r\nconst venus = planetsEnum.venus\r\nconst earth = planetsEnum.earth\r\nconst mars = planetsEnum.mars\r\nconst jupiter = planetsEnum.jupiter\r\nconst saturn = planetsEnum.saturn\r\nconst uranus = planetsEnum.uranus\r\nconst neptune = planetsEnum.neptune\r\nconst embary = planetsEnum.embary\r\n\r\n/**\r\n * Perihelion returns an approximate jde of the perihelion event nearest the given time.\r\n *\r\n * @param {planetsEnum} p - planet constant from above\r\n * @param {Number} year - year number indicating a time near the perihelion event.\r\n * @returns {Number} jde - time of the event\r\n */\r\nfunction perihelion (p, year) {\r\n  return ap(p, year, false, pf)\r\n}\r\n\r\n/**\r\n * Aphelion returns an approximate jde of the aphelion event nearest the given time.\r\n *\r\n * @param {planetsEnum} p - planet constant from above\r\n * @param {Number} year - year number indicating a time near the aphelion event.\r\n * @returns {Number} jde - time of the event\r\n */\r\nfunction aphelion (p, year) {\r\n  return ap(p, year, true, af)\r\n}\r\n\r\nconst pf = function (x) { // (x float64)  float64\r\n  return Math.floor(x + 0.5)\r\n}\r\n\r\nconst af = function (x) { // (x float64)  float64\r\n  return Math.floor(x) + 0.5\r\n}\r\n\r\nconst ap = function (p, y, a, f) { // (p int, y float64, a bool, f func(float64)  float64) float64\r\n  let i = p\r\n  if (i === embary) {\r\n    i = earth\r\n  }\r\n  const k = f(ka[i].a * (y - ka[i].b))\r\n  let j = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(k, ...c[i])\r\n  if (p === earth) {\r\n    let c = ep\r\n    if (a) {\r\n      c = ea\r\n    }\r\n    for (let i = 0; i < 5; i++) {\r\n      j += c[i] * Math.sin((ec[i].a + ec[i].b * k) * Math.PI / 180)\r\n    }\r\n  }\r\n  return j\r\n}\r\n\r\nconst ka = [\r\n  { a: 4.15201, b: 2000.12 }, // mercury\r\n  { a: 1.62549, b: 2000.53 }, // ...\r\n  { a: 0.99997, b: 2000.01 },\r\n  { a: 0.53166, b: 2001.78 },\r\n  { a: 0.0843, b: 2011.2 },\r\n  { a: 0.03393, b: 2003.52 },\r\n  { a: 0.0119, b: 2051.1 },\r\n  { a: 0.00607, b: 2047.5 } // neptune\r\n]\r\n\r\nconst c = [\r\n  [2451590.257, 87.96934963], // mercury\r\n  [2451738.233, 224.7008188, -0.0000000327], // ...\r\n  [2451547.507, 365.2596358, 0.0000000156],\r\n  [2452195.026, 686.9957857, -0.0000001187],\r\n  [2455636.936, 4332.897065, 0.0001367],\r\n  [2452830.12, 10764.21676, 0.000827],\r\n  [2470213.5, 30694.8767, -0.00541],\r\n  [2468895.1, 60190.33, 0.03429] // neptune\r\n]\r\n\r\nconst ec = [\r\n  { a: 328.41, b: 132.788585 },\r\n  { a: 316.13, b: 584.903153 },\r\n  { a: 346.2, b: 450.380738 },\r\n  { a: 136.95, b: 659.306737 },\r\n  { a: 249.52, b: 329.653368 }\r\n]\r\n\r\nconst ep = [1.278, -0.055, -0.091, -0.056, -0.045]\r\nconst ea = [-1.352, 0.061, 0.062, 0.029, 0.031]\r\n\r\n/**\r\n * Perihelion2 returns the perihelion event nearest the given time.\r\n *\r\n * @param {Planet} planet - VSOP87 planet (EMBary is not allowed)\r\n * @param {Number} year - (float) decimal year number near the perihelion event\r\n * @param {Number} precision - desired precision of the time result, in days\r\n * @param {Function} [cb] - callback function for asynchronous processing `cb([jde, r])`\r\n * @returns {Array} [jde, r]\r\n *   {Number} jde - time of the event\r\n *   {Number} r - the distance of the planet from the Sun in AU.\r\n */\r\nfunction perihelion2 (planet, year, precision, cb) {\r\n  return ap2(planetsEnum[planet.name], year, precision, planet, false, pf, cb)\r\n}\r\n\r\n/**\r\n * Aphelion2 returns the aphelion event nearest the given time.\r\n *\r\n * @param {Planet} planet - VSOP87 planet (EMBary is not allowed)\r\n * @param {Number} year - (float) decimal year number near the perihelion event\r\n * @param {Number} precision - desired precision of the time result, in days\r\n * @param {Function} [cb] - callback function for asynchronous processing `cb([jde, r])`\r\n * @returns {Array} [jde, r]\r\n *   {Number} jde - time of the event\r\n *   {Number} r - the distance of the planet from the Sun in AU.\r\n */\r\nfunction aphelion2 (planet, year, precision, cb) {\r\n  return ap2(planetsEnum[planet.name], year, precision, planet, true, af, cb)\r\n}\r\n\r\nif (typeof setImmediate !== 'function') {\r\n  const setImmediate = setTimeout // eslint-disable-line no-unused-vars\r\n}\r\n\r\nconst ap2 = function (p, y, d, v, a, f, cb) {\r\n  const j1 = ap(p, y, a, f)\r\n  if (p !== neptune) {\r\n    return ap2a(j1, d, a, v, cb)\r\n  }\r\n  // handle the double extrema of Neptune\r\n  if (cb) {\r\n    ap2a(j1 - 5000, d, a, v, ([j0, r0]) => {\r\n      ap2a(j1 + 5000, d, a, v, ([j2, r2]) => {\r\n        if ((r0 > r2) === a) {\r\n          cb([j0, r0])\r\n          return\r\n        }\r\n        cb([j2, r2])\r\n      })\r\n    })\r\n  } else {\r\n    const [j0, r0] = ap2a(j1 - 5000, d, a, v)\r\n    const [j2, r2] = ap2a(j1 + 5000, d, a, v)\r\n    if ((r0 > r2) === a) {\r\n      return [j0, r0]\r\n    }\r\n    return [j2, r2]\r\n  }\r\n}\r\n\r\nconst ap2a = function (j1, d, a, v, cb) {\r\n  let j0 = j1 - d\r\n  let j2 = j1 + d\r\n  const rr = new Array(3)\r\n  rr[1] = v.position2000(j1).range\r\n  rr[0] = v.position2000(j0).range\r\n  rr[2] = v.position2000(j2).range\r\n\r\n  function end () {\r\n    const l = new _interpolation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Len3(j0, j2, rr)\r\n    const [jde, r] = l.extremum()\r\n    return [jde, r]\r\n  }\r\n\r\n  function run () {\r\n    if (a) {\r\n      if (rr[1] > rr[0] && rr[1] > rr[2]) {\r\n        cb && cb(end())\r\n        return true\r\n      }\r\n    } else {\r\n      if (rr[1] < rr[0] && rr[1] < rr[2]) {\r\n        cb && cb(end())\r\n        return true\r\n      }\r\n    }\r\n    if ((rr[0] < rr[2]) === a) {\r\n      j0 = j1\r\n      j1 = j2\r\n      j2 += d\r\n      rr[0] = rr[1]\r\n      rr[1] = rr[2]\r\n      rr[2] = v.position2000(j2).range\r\n    } else {\r\n      j2 = j1\r\n      j1 = j0\r\n      j0 -= d\r\n      rr[2] = rr[1]\r\n      rr[1] = rr[0]\r\n      rr[0] = v.position2000(j0).range\r\n    }\r\n    if (cb) {\r\n      setImmediate(run, 0)\r\n    }\r\n  }\r\n\r\n  if (cb) {\r\n    run()\r\n  } else {\r\n    for (;;) {\r\n      if (run()) {\r\n        return end()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  mercury,\r\n  venus,\r\n  earth,\r\n  mars,\r\n  jupiter,\r\n  saturn,\r\n  uranus,\r\n  neptune,\r\n  embary,\r\n  perihelion,\r\n  aphelion,\r\n  perihelion2,\r\n  aphelion2\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/perihelion.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/planetary.js":
/*!**************************************************!*\
  !*** ./node_modules/astronomia/src/planetary.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   el: () => (/* binding */ el),\n/* harmony export */   jupiterOpp: () => (/* binding */ jupiterOpp),\n/* harmony export */   marsOpp: () => (/* binding */ marsOpp),\n/* harmony export */   marsStation2: () => (/* binding */ marsStation2),\n/* harmony export */   mean: () => (/* binding */ mean),\n/* harmony export */   mercuryEastElongation: () => (/* binding */ mercuryEastElongation),\n/* harmony export */   mercuryInfConj: () => (/* binding */ mercuryInfConj),\n/* harmony export */   mercurySupConj: () => (/* binding */ mercurySupConj),\n/* harmony export */   mercuryWestElongation: () => (/* binding */ mercuryWestElongation),\n/* harmony export */   ms: () => (/* binding */ ms),\n/* harmony export */   msa: () => (/* binding */ msa),\n/* harmony export */   neptuneOpp: () => (/* binding */ neptuneOpp),\n/* harmony export */   saturnConj: () => (/* binding */ saturnConj),\n/* harmony export */   saturnOpp: () => (/* binding */ saturnOpp),\n/* harmony export */   sum: () => (/* binding */ sum),\n/* harmony export */   sumA: () => (/* binding */ sumA),\n/* harmony export */   uranusOpp: () => (/* binding */ uranusOpp),\n/* harmony export */   venusInfConj: () => (/* binding */ venusInfConj)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module planetary\r\n */\r\n/**\r\n * Planetary: Chapter 36, The Calculation of some Planetary Phenomena.\r\n *\r\n * Incomplete: Some functions unimplemented for lack of test data.\r\n */\r\n\r\n\r\n\r\n/**\r\n * Mean computes some intermediate values for a mean planetary configuration\r\n * given a year and a row of coefficients from Table 36.A, p. 250.0\r\n */\r\nfunction mean (y, a) { // (y float64, a *ca)  (J, M, T float64)\r\n  // (36.1) p. 250\r\n  const k = Math.floor((365.2425 * y + 1721060 - a.A) / a.B + 0.5)\r\n  const J = a.A + k * a.B\r\n  const M = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(a.M0 + k * a.M1, 360) * Math.PI / 180\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(J)\r\n  return [J, M, T]\r\n}\r\n\r\n/**\r\n * Sum computes a sum of periodic terms.\r\n */\r\nfunction sum (T, M, c) { // (T, M float64, c [][]float64)  float64\r\n  let j = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c[0])\r\n  let mm = 0.0\r\n  for (let i = 1; i < c.length; i++) {\r\n    mm += M\r\n    const [smm, cmm] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(mm)\r\n    j += smm * _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c[i])\r\n    i++\r\n    j += cmm * _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c[i])\r\n  }\r\n  return j\r\n}\r\n\r\n/**\r\n * ms returns a mean time corrected by a sum.\r\n */\r\nfunction ms (y, a, c) { // (y float64, a *ca, c [][]float64)  float64\r\n  const [J, M, T] = mean(y, a)\r\n  return J + sum(T, M, c)\r\n}\r\n\r\n/**\r\n * MercuryInfConj returns the time of an inferior conjunction of Mercury.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction mercuryInfConj (y) { // (y float64)  (jde float64)\r\n  return ms(y, micA, micB)\r\n}\r\n\r\n/**\r\n * MercurySupConj returns the time of a superior conjunction of Mercury.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction mercurySupConj (y) { // (y float64)  (jde float64)\r\n  return ms(y, mscA, mscB)\r\n}\r\n\r\n/**\r\n * VenusInfConj returns the time of an inferior conjunction of Venus.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction venusInfConj (y) { // (y float64)  (jde float64)\r\n  return ms(y, vicA, vicB)\r\n}\r\n\r\n/**\r\n * MarsOpp returns the time of an opposition of Mars.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction marsOpp (y) { // (y float64)  (jde float64)\r\n  return ms(y, moA, moB)\r\n}\r\n\r\n/**\r\n * SumA computes the sum of periodic terms with \"additional angles\"\r\n */\r\nfunction sumA (T, M, c, aa) { // (T, M float64, c [][]float64, aa []caa)  float64\r\n  let i = c.length - 2 * aa.length\r\n  let j = sum(T, M, c.slice(0, i))\r\n  for (let k = 0; k < aa.length; k++) {\r\n    const [saa, caa] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos((aa[k].c + aa[k].f * T) * Math.PI / 180)\r\n    j += saa * _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c[i])\r\n    i++\r\n    j += caa * _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c[i])\r\n    i++\r\n  }\r\n  return j\r\n}\r\n\r\n/**\r\n * Msa returns a mean time corrected by a sum.\r\n */\r\nfunction msa (y, a, c, aa) { // (y float64, a *ca, c [][]float64, aa []caa)  float64\r\n  const [J, M, T] = mean(y, a)\r\n  return J + sumA(T, M, c, aa)\r\n}\r\n\r\n/**\r\n * JupiterOpp returns the time of an opposition of Jupiter.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction jupiterOpp (y) { // (y float64)  (jde float64)\r\n  return msa(y, joA, joB, jaa)\r\n}\r\n\r\n/**\r\n * SaturnOpp returns the time of an opposition of Saturn.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction saturnOpp (y) { // (y float64)  (jde float64)\r\n  return msa(y, soA, soB, saa)\r\n}\r\n\r\n/**\r\n * SaturnConj returns the time of a conjunction of Saturn.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction saturnConj (y) { // (y float64)  (jde float64)\r\n  return msa(y, scA, scB, saa)\r\n}\r\n\r\n/**\r\n * UranusOpp returns the time of an opposition of Uranus.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction uranusOpp (y) { // (y float64)  (jde float64)\r\n  return msa(y, uoA, uoB, uaa)\r\n}\r\n\r\n/**\r\n * NeptuneOpp returns the time of an opposition of Neptune.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction neptuneOpp (y) { // (y float64)  (jde float64)\r\n  return msa(y, noA, noB, naa)\r\n}\r\n\r\n/**\r\n * El computes time and elongation of a greatest elongation event.\r\n */\r\nfunction el (y, a, t, e) { // (y float64, a *ca, t, e [][]float64)  (jde, elongation float64)\r\n  const [J, M, T] = mean(y, micA)\r\n  return [J + sum(T, M, t), sum(T, M, e) * Math.PI / 180]\r\n}\r\n\r\n/**\r\n * MercuryEastElongation returns the time and elongation of a greatest eastern elongation of Mercury.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction mercuryEastElongation (y) { // (y float64)  (jde, elongation float64)\r\n  return el(y, micA, met, mee)\r\n}\r\n\r\n/**\r\n * MercuryWestElongation returns the time and elongation of a greatest western elongation of Mercury.\r\n *\r\n * Result is time (as a jde) of the event nearest the given time (as a\r\n * decimal year.)\r\n */\r\nfunction mercuryWestElongation (y) { // (y float64)  (jde, elongation float64)\r\n  return el(y, micA, mwt, mwe)\r\n}\r\n\r\nfunction marsStation2 (y) { // (y float64)  (jde float64)\r\n  const [J, M, T] = mean(y, moA)\r\n  return J + sum(T, M, ms2)\r\n}\r\n\r\n/**\r\n * ca holds coefficients from one line of table 36.A, p. 250\r\n */\r\nfunction Ca (A, B, M0, M1) {\r\n  this.A = A\r\n  this.B = B\r\n  this.M0 = M0\r\n  this.M1 = M1\r\n}\r\n\r\n/**\r\n * Table 36.A, p. 250\r\n */\r\nconst micA = new Ca(2451612.023, 115.8774771, 63.5867, 114.2088742)\r\nconst mscA = new Ca(2451554.084, 115.8774771, 6.4822, 114.2088742)\r\nconst vicA = new Ca(2451996.706, 583.921361, 82.7311, 215.513058)\r\nconst moA = new Ca(2452097.382, 779.936104, 181.9573, 48.705244)\r\nconst joA = new Ca(2451870.628, 398.884046, 318.4681, 33.140229)\r\nconst soA = new Ca(2451870.17, 378.091904, 318.0172, 12.647487)\r\nconst scA = new Ca(2451681.124, 378.091904, 131.6934, 12.647487)\r\nconst uoA = new Ca(2451764.317, 369.656035, 213.6884, 4.333093)\r\nconst noA = new Ca(2451753.122, 367.486703, 202.6544, 2.194998)\r\n\r\n/**\r\n * caa holds coefficients for \"additional angles\" for outer planets\r\n * as given on p. 251\r\n */\r\nfunction Caa (c, f) {\r\n  this.c = c\r\n  this.f = f\r\n}\r\n\r\nconst jaa = [\r\n  new Caa(82.74, 40.76)\r\n]\r\n\r\nconst saa = [\r\n  new Caa(82.74, 40.76),\r\n  new Caa(29.86, 1181.36),\r\n  new Caa(14.13, 590.68),\r\n  new Caa(220.02, 1262.87)\r\n]\r\n\r\nconst uaa = [\r\n  new Caa(207.83, 8.51),\r\n  new Caa(108.84, 419.96)\r\n]\r\n\r\nconst naa = [\r\n  new Caa(207.83, 8.51),\r\n  new Caa(276.74, 209.98)\r\n]\r\n\r\n/**\r\n * Table 33.B, p. 256\r\n */\r\n\r\n/**\r\n * Mercury inferior conjunction\r\n */\r\nconst micB = [\r\n  [0.0545, 0.0002],\r\n  [-6.2008, 0.0074, 0.00003],\r\n  [-3.275, -0.0197, 0.00001],\r\n  [0.4737, -0.0052, -0.00001],\r\n  [0.8111, 0.0033, -0.00002],\r\n  [0.0037, 0.0018],\r\n  [-0.1768, 0, 0.00001],\r\n  [-0.0211, -0.0004],\r\n  [0.0326, -0.0003],\r\n  [0.0083, 0.0001],\r\n  [-0.004, 0.0001]\r\n]\r\n\r\n/**\r\n * Mercury superior conjunction\r\n */\r\nconst mscB = [\r\n  [-0.0548, -0.0002],\r\n  [7.3894, -0.01, -0.00003],\r\n  [3.22, 0.0197, -0.00001],\r\n  [0.8383, -0.0064, -0.00001],\r\n  [0.9666, 0.0039, -0.00003],\r\n  [0.077, -0.0026],\r\n  [0.2758, 0.0002, -0.00002],\r\n  [-0.0128, -0.0008],\r\n  [0.0734, -0.0004, -0.00001],\r\n  [-0.0122, -0.0002],\r\n  [0.0173, -0.0002]\r\n]\r\n\r\n/**\r\n * Venus inferior conjunction\r\n */\r\nconst vicB = [\r\n  [-0.0096, 0.0002, -0.00001],\r\n  [2.0009, -0.0033, -0.00001],\r\n  [0.598, -0.0104, 0.00001],\r\n  [0.0967, -0.0018, -0.00003],\r\n  [0.0913, 0.0009, -0.00002],\r\n  [0.0046, -0.0002],\r\n  [0.0079, 0.0001]\r\n]\r\n\r\n/**\r\n * Mars opposition\r\n */\r\nconst moB = [\r\n  [-0.3088, 0, 0.00002],\r\n  [-17.6965, 0.0363, 0.00005],\r\n  [18.3131, 0.0467, -0.00006],\r\n  [-0.2162, -0.0198, -0.00001],\r\n  [-4.5028, -0.0019, 0.00007],\r\n  [0.8987, 0.0058, -0.00002],\r\n  [0.7666, -0.005, -0.00003],\r\n  [-0.3636, -0.0001, 0.00002],\r\n  [0.0402, 0.0032],\r\n  [0.0737, -0.0008],\r\n  [-0.098, -0.0011]\r\n]\r\n\r\n/**\r\n * Jupiter opposition\r\n */\r\nconst joB = [\r\n  [-0.1029, 0, -0.00009],\r\n  [-1.9658, -0.0056, 0.00007],\r\n  [6.1537, 0.021, -0.00006],\r\n  [-0.2081, -0.0013],\r\n  [-0.1116, -0.001],\r\n  [0.0074, 0.0001],\r\n  [-0.0097, -0.0001],\r\n  [0, 0.0144, -0.00008],\r\n  [0.3642, -0.0019, -0.00029]\r\n]\r\n\r\n/**\r\n * Saturn opposition\r\n */\r\nconst soB = [\r\n  [-0.0209, 0.0006, 0.00023],\r\n  [4.5795, -0.0312, -0.00017],\r\n  [1.1462, -0.0351, 0.00011],\r\n  [0.0985, -0.0015],\r\n  [0.0733, -0.0031, 0.00001],\r\n  [0.0025, -0.0001],\r\n  [0.005, -0.0002],\r\n  [0, -0.0337, 0.00018],\r\n  [-0.851, 0.0044, 0.00068],\r\n  [0, -0.0064, 0.00004],\r\n  [0.2397, -0.0012, -0.00008],\r\n  [0, -0.001],\r\n  [0.1245, 0.0006],\r\n  [0, 0.0024, -0.00003],\r\n  [0.0477, -0.0005, -0.00006]\r\n]\r\n\r\n/**\r\n * Saturn conjunction\r\n */\r\nconst scB = [\r\n  [0.0172, -0.0006, 0.00023],\r\n  [-8.5885, 0.0411, 0.00020],\r\n  [-1.147, 0.0352, -0.00011],\r\n  [0.3331, -0.0034, -0.00001],\r\n  [0.1145, -0.0045, 0.00002],\r\n  [-0.0169, 0.0002],\r\n  [-0.0109, 0.0004],\r\n  [0, -0.0337, 0.00018],\r\n  [-0.851, 0.0044, 0.00068],\r\n  [0, -0.0064, 0.00004],\r\n  [0.2397, -0.0012, -0.00008],\r\n  [0, -0.001],\r\n  [0.1245, 0.0006],\r\n  [0, 0.0024, -0.00003],\r\n  [0.0477, -0.0005, -0.00006]\r\n]\r\n\r\n/**\r\n * Uranus opposition\r\n */\r\nconst uoB = [\r\n  [0.0844, -0.0006],\r\n  [-0.1048, 0.0246],\r\n  [-5.1221, 0.0104, 0.00003],\r\n  [-0.1428, 0.0005],\r\n  [-0.0148, -0.0013],\r\n  [0],\r\n  [0.0055],\r\n  [0],\r\n  [0.885],\r\n  [0],\r\n  [0.2153]\r\n]\r\n\r\n/**\r\n * Neptune opposition [\r\n */\r\nconst noB = [\r\n  [-0.014, 0, 0.00001],\r\n  [-1.3486, 0.001, 0.00001],\r\n  [0.8597, 0.0037],\r\n  [-0.0082, -0.0002, 0.00001],\r\n  [0.0037, -0.0003],\r\n  [0],\r\n  [-0.5964],\r\n  [0],\r\n  [0.0728]\r\n]\r\n\r\n/**\r\n * Table 36.C, p. 259\r\n */\r\n\r\n/**\r\n * Mercury east time correction\r\n */\r\nconst met = [\r\n  [-21.6106, 0.0002],\r\n  [-1.9803, -0.006, 0.00001],\r\n  [1.4151, -0.0072, -0.00001],\r\n  [0.5528, -0.0005, -0.00001],\r\n  [0.2905, 0.0034, 0.00001],\r\n  [-0.1121, -0.0001, 0.00001],\r\n  [-0.0098, -0.0015],\r\n  [0.0192],\r\n  [0.0111, 0.0004],\r\n  [-0.0061],\r\n  [-0.0032, -0.0001]\r\n]\r\n\r\n/**\r\n * Mercury east elongation\r\n */\r\nconst mee = [\r\n  [22.4697],\r\n  [-4.2666, 0.0054, 0.00002],\r\n  [-1.8537, -0.0137],\r\n  [0.3598, 0.0008, -0.00001],\r\n  [-0.068, 0.0026],\r\n  [-0.0524, -0.0003],\r\n  [0.0052, -0.0006],\r\n  [0.0107, 0.0001],\r\n  [-0.0013, 0.0001],\r\n  [-0.0021],\r\n  [0.0003]\r\n]\r\n\r\n/**\r\n * Mercury west time correction\r\n */\r\nconst mwt = [\r\n  [21.6249, -0.0002],\r\n  [0.1306, 0.0065],\r\n  [-2.7661, -0.0011, 0.00001],\r\n  [0.2438, -0.0024, -0.00001],\r\n  [0.5767, 0.0023],\r\n  [0.1041],\r\n  [-0.0184, 0.0007],\r\n  [-0.0051, -0.0001],\r\n  [0.0048, 0.0001],\r\n  [0.0026],\r\n  [0.0037]\r\n]\r\n\r\n/**\r\n * Mercury west elongation\r\n */\r\nconst mwe = [\r\n  [22.4143, -0.0001],\r\n  [4.3651, -0.0048, -0.00002],\r\n  [2.3787, 0.0121, -0.00001],\r\n  [0.2674, 0.0022],\r\n  [-0.3873, 0.0008, 0.00001],\r\n  [-0.0369, -0.0001],\r\n  [0.0017, -0.0001],\r\n  [0.0059],\r\n  [0.0061, 0.0001],\r\n  [0.0007],\r\n  [-0.0011]\r\n]\r\n\r\n/**\r\n * Table 36.D, p. 261\r\n */\r\n\r\n/**\r\n * Mars Station 2\r\n */\r\nconst ms2 = [\r\n  [36.7191, 0.0016, 0.00003],\r\n  [-12.6163, 0.0417, -0.00001],\r\n  [20.1218, 0.0379, -0.00006],\r\n  [-1.636, -0.019],\r\n  [-3.9657, 0.0045, 0.00007],\r\n  [1.1546, 0.0029, -0.00003],\r\n  [0.2888, -0.0073, -0.00002],\r\n  [-0.3128, 0.0017, 0.00002],\r\n  [0.2513, 0.0026, -0.00002],\r\n  [-0.0021, -0.0016],\r\n  [-0.1497, -0.0006]\r\n]\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  mean,\r\n  sum,\r\n  ms,\r\n  mercuryInfConj,\r\n  mercurySupConj,\r\n  venusInfConj,\r\n  marsOpp,\r\n  sumA,\r\n  msa,\r\n  jupiterOpp,\r\n  saturnOpp,\r\n  saturnConj,\r\n  uranusOpp,\r\n  neptuneOpp,\r\n  el,\r\n  mercuryEastElongation,\r\n  mercuryWestElongation,\r\n  marsStation2\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/planetary.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/planetelements.js":
/*!*******************************************************!*\
  !*** ./node_modules/astronomia/src/planetelements.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Elements: () => (/* binding */ Elements),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   earth: () => (/* binding */ earth),\n/* harmony export */   inc: () => (/* binding */ inc),\n/* harmony export */   jupiter: () => (/* binding */ jupiter),\n/* harmony export */   mars: () => (/* binding */ mars),\n/* harmony export */   mean: () => (/* binding */ mean),\n/* harmony export */   mercury: () => (/* binding */ mercury),\n/* harmony export */   neptune: () => (/* binding */ neptune),\n/* harmony export */   node: () => (/* binding */ node),\n/* harmony export */   saturn: () => (/* binding */ saturn),\n/* harmony export */   uranus: () => (/* binding */ uranus),\n/* harmony export */   venus: () => (/* binding */ venus)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module planetelements\r\n */\r\n/**\r\n * Planetelements: Chapter 31, Elements of Planetary Orbits.\r\n *\r\n * Partial:  Only implemented for mean equinox of date.\r\n */\r\n\r\n\r\n\r\n// planet names used in cMean\r\nconst mercury = 'mercury'\r\nconst venus = 'venus'\r\nconst earth = 'earth'\r\nconst mars = 'mars'\r\nconst jupiter = 'jupiter'\r\nconst saturn = 'saturn'\r\nconst uranus = 'uranus'\r\nconst neptune = 'neptune'\r\n\r\n/**\r\n * Elements contains orbital elements as returned by functions in this package.\r\n *\r\n * Some other elements easily derived from these are\r\n *\r\n *  Mean Anomolay, M = Lon - Peri\r\n *  Argument of Perihelion, ω = Peri - Node\r\n *\r\n * @param {Number|Object} [lon]  - mean longitude, L\r\n * @param {Number} [axis] - semimajor axis, a\r\n * @param {Number} [ecc]  - eccentricity, e\r\n * @param {Number} [inc]  - inclination, i\r\n * @param {Number} [node] - longitude of ascending node, Ω\r\n * @param {Number} [peri] - longitude of perihelion, ϖ (Meeus likes π better)\r\n */\r\nfunction Elements (lon, axis, ecc, inc, node, peri) {\r\n  const o = (typeof lon === 'object' ? lon : {})\r\n  this.lon = o.lon || lon\r\n  this.axis = o.axis || axis\r\n  this.ecc = o.ecc || ecc\r\n  this.inc = o.inc || inc\r\n  this.node = o.node || node\r\n  this.peri = o.peri || peri\r\n}\r\n\r\n/**\r\n * Table 31.A, p. 212\r\n */\r\nconst cMean = {\r\n  mercury: { // Mercury\r\n    L: [252.250906, 149474.0722491, 0.0003035, 0.000000018],\r\n    a: [0.38709831],\r\n    e: [0.20563175, 0.000020407, -0.0000000283, -0.00000000018],\r\n    i: [7.004986, 0.0018215, -0.0000181, 0.000000056],\r\n    Ω: [48.330893, 1.1861883, 0.00017542, 0.000000215],\r\n    ϖ: [77.456119, 1.5564776, 0.00029544, 0.000000009]\r\n  },\r\n  venus: { // Venus\r\n    L: [181.979801, 58519.2130302, 0.00031014, 0.000000015],\r\n    a: [0.72332982],\r\n    e: [0.00677192, -0.000047765, 0.0000000981, 0.00000000046],\r\n    i: [3.394662, 0.0010037, -0.00000088, -0.000000007],\r\n    Ω: [76.67992, 0.9011206, 0.00040618, -0.000000093],\r\n    ϖ: [131.563703, 1.4022288, -0.00107618, -0.000005678]\r\n  },\r\n  earth: { // Earth\r\n    L: [100.466457, 36000.7698278, 0.00030322, 0.00000002],\r\n    a: [1.000001018],\r\n    e: [0.01670863, -0.000042037, -0.0000001267, 0.00000000014],\r\n    i: [0],\r\n    Ω: undefined,\r\n    ϖ: [102.937348, 1.7195366, 0.00045688, -0.000000018]\r\n  },\r\n  mars: { // Mars\r\n    L: [355.433, 19141.6964471, 0.00031052, 0.000000016],\r\n    a: [1.523679342],\r\n    e: [0.09340065, 0.000090484, -0.0000000806, -0.00000000025],\r\n    i: [1.849726, -0.0006011, 0.00001276, -0.000000007],\r\n    Ω: [49.558093, 0.7720959, 0.00001557, 0.000002267],\r\n    ϖ: [336.060234, 1.8410449, 0.00013477, 0.000000536]\r\n  },\r\n  jupiter: { // Jupiter\r\n    L: [34.351519, 3036.3027748, 0.0002233, 0.000000037],\r\n    a: [5.202603209, 0.0000001913],\r\n    e: [0.04849793, 0.000163225, -0.0000004714, -0.00000000201],\r\n    i: [1.303267, -0.0054965, 0.00000466, -0.000000002],\r\n    Ω: [100.464407, 1.0209774, 0.00040315, 0.000000404],\r\n    ϖ: [14.331207, 1.6126352, 0.00103042, -0.000004464]\r\n  },\r\n  saturn: { // Saturn\r\n    L: [50.077444, 1223.5110686, 0.00051908, -0.00000003],\r\n    a: [9.554909192, -0.0000021390, 0.000000004],\r\n    e: [0.05554814, -0.000346641, -0.0000006436, 0.0000000034],\r\n    i: [2.488879, -0.0037362, -0.00001519, 0.000000087],\r\n    Ω: [113.665503, 0.877088, -0.00012176, -0.000002249],\r\n    ϖ: [93.057237, 1.9637613, 0.00083753, 0.000004928]\r\n  },\r\n  uranus: { // Uranus\r\n    L: [314.055005, 429.8640561, 0.0003039, 0.000000026],\r\n    a: [19.218446062, -0.0000000372, 0.00000000098],\r\n    e: [0.04638122, -0.000027293, 0.0000000789, 0.00000000024],\r\n    i: [0.773197, 0.0007744, 0.00003749, -0.000000092],\r\n    Ω: [74.005957, 0.5211278, 0.00133947, 0.000018484],\r\n    ϖ: [173.005291, 1.486379, 0.00021406, 0.000000434]\r\n  },\r\n  neptune: { // Neptune\r\n    L: [304.348665, 219.8833092, 0.00030882, 0.000000018],\r\n    a: [30.110386869, -0.0000001663, 0.00000000069],\r\n    e: [0.00945575, 0.000006033, 0, -0.00000000005],\r\n    i: [1.769953, -0.0093082, -0.00000708, 0.000000027],\r\n    Ω: [131.784057, 1.1022039, 0.00025952, -0.000000637],\r\n    ϖ: [48.120276, 1.4262957, 0.00038434, 0.00000002]\r\n  }\r\n}\r\n\r\n/**\r\n * Mean returns mean orbital elements for a planet\r\n *\r\n * Argument p must be a planet const as defined above, argument e is\r\n * a result parameter.  A valid non-undefined pointer to an Elements struct\r\n * must be passed in.\r\n *\r\n * Results are referenced to mean dynamical ecliptic and equinox of date.\r\n *\r\n * Semimajor axis is in AU, angular elements are in radians.\r\n */\r\nfunction mean (p, jde, e) {\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  const c = cMean[p]\r\n  e = e || new Elements()\r\n  e.lon = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.L) * Math.PI / 180, 2 * Math.PI)\r\n  e.axis = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.a)\r\n  e.ecc = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.e)\r\n  e.inc = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.i) * Math.PI / 180\r\n  e.node = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.Ω) * Math.PI / 180\r\n  e.peri = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, c.ϖ) * Math.PI / 180\r\n  return e\r\n}\r\n\r\n/**\r\n * Inc returns mean inclination for a planet at a date.\r\n *\r\n * Result is the same as the Inc field returned by function Mean.  That is,\r\n * radians, referenced to mean dynamical ecliptic and equinox of date.\r\n */\r\nfunction inc (p, jde) { // (p int, jde float64)  float64\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde), cMean[p].i) * Math.PI / 180\r\n}\r\n\r\n/**\r\n * Node returns mean longitude of ascending node for a planet at a date.\r\n *\r\n * Result is the same as the Node field returned by function Mean.  That is,\r\n * radians, referenced to mean dynamical ecliptic and equinox of date.\r\n */\r\nfunction node (p, jde) { // (p int, jde float64)  float64\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde), cMean[p].Ω) * Math.PI / 180\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  mercury,\r\n  venus,\r\n  earth,\r\n  mars,\r\n  jupiter,\r\n  saturn,\r\n  uranus,\r\n  neptune,\r\n  Elements,\r\n  mean,\r\n  inc,\r\n  node\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/planetelements.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/planetposition.js":
/*!*******************************************************!*\
  !*** ./node_modules/astronomia/src/planetposition.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Planet: () => (/* binding */ Planet),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   toFK5: () => (/* binding */ toFK5)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _precess_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./precess.js */ \"./node_modules/astronomia/src/precess.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module planetposition\r\n */\r\n/**\r\n * Planetposition: Chapter 32, Positions of the Planets.\r\n *\r\n * Incomplete:\r\n *\r\n * 1. The package does not implement algorithms that use appendix III,\r\n * but instead implements a full VSOP87 solution.  I do not have a copy\r\n * of the supplimentary disk with appendix III in machine readable form\r\n * and as the appendix is rather large, retyping it by hand is problematic.\r\n * The full VSOP87 data set on the other hand is freely downloadable from\r\n * the internet, so I implement here code that can use that data directly.\r\n *\r\n * 2. The formula for accuracy of results is not implemented.  It is\r\n * not needed for full VSOP87 solutions.\r\n *\r\n * 3. Polynomial expressions are not implemented.  Again, implementation\r\n * would involve typing rather large tables of numbers with associated\r\n * risk of typographical errors.\r\n */\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n\r\n\r\n\r\nfunction sum (t, series) {\r\n  const coeffs = []\r\n  Object.keys(series).forEach((x) => {\r\n    coeffs[x] = 0\r\n    let y = series[x].length - 1\r\n    for (y; y >= 0; y--) {\r\n      const term = {\r\n        a: series[x][y][0],\r\n        b: series[x][y][1],\r\n        c: series[x][y][2]\r\n      }\r\n      coeffs[x] += term.a * Math.cos(term.b + term.c * t)\r\n    }\r\n  })\r\n  const res = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, ...coeffs)\r\n  return res\r\n}\r\n\r\nclass Planet {\r\n  /**\r\n   * VSOP87 representation of a Planet\r\n   * @constructs Planet\r\n   * @param {object} planet - planet data series\r\n   * @example\r\n   * ```js\r\n   * // for use in browser\r\n   * import {data} from 'astronomia'\r\n   * const earth = new planetposition.Planet(data.vsop87Bearth)\r\n   * ```\r\n   */\r\n  constructor (planet) {\r\n    if (typeof planet !== 'object') throw new TypeError('need planet vsop87 data')\r\n    this.name = planet.name\r\n    this.type = planet.type || 'B'\r\n    this.series = planet\r\n  }\r\n\r\n  /**\r\n   * Position2000 returns ecliptic position of planets by full VSOP87 theory.\r\n   *\r\n   * @param {Number} jde - the date for which positions are desired.\r\n   * @returns {Coord} Results are for the dynamical equinox and ecliptic J2000.\r\n   *  {Number} lon - heliocentric longitude in radians.\r\n   *  {Number} lat - heliocentric latitude in radians.\r\n   *  {Number} range - heliocentric range in AU.\r\n   */\r\n  position2000 (jde) {\r\n    const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n    const τ = T * 0.1\r\n    const lon = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(sum(τ, this.series.L), 2 * Math.PI)\r\n    const lat = sum(τ, this.series.B)\r\n    const range = sum(τ, this.series.R)\r\n\r\n    switch (this.type) {\r\n      case 'B':\r\n        return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(lon, lat, range)\r\n      case 'D': {\r\n        const eclFrom = new _coord_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Ecliptic(lon, lat)\r\n        const epochFrom = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JDEToJulianYear(jde)\r\n        const epochTo = 2000.0\r\n        const eclTo = _precess_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].eclipticPosition(eclFrom, epochFrom, epochTo)\r\n        return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(eclTo.lon, eclTo.lat, range)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Position returns ecliptic position of planets at equinox and ecliptic of date.\r\n   *\r\n   * @param {Number} jde - the date for which positions are desired.\r\n   * @returns {Coord} Results are positions consistent with those from Meeus's\r\n   * Apendix III, that is, at equinox and ecliptic of date.\r\n   *  {Number} lon - heliocentric longitude in radians.\r\n   *  {Number} lat - heliocentric latitude in radians.\r\n   *  {Number} range - heliocentric range in AU.\r\n   */\r\n  position (jde) {\r\n    const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n    const τ = T * 0.1\r\n    const lon = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(sum(τ, this.series.L), 2 * Math.PI)\r\n    const lat = sum(τ, this.series.B)\r\n    const range = sum(τ, this.series.R)\r\n\r\n    switch (this.type) {\r\n      case 'B': {\r\n        const eclFrom = new _coord_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Ecliptic(lon, lat)\r\n        const epochFrom = 2000.0\r\n        const epochTo = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JDEToJulianYear(jde)\r\n        const eclTo = _precess_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].eclipticPosition(eclFrom, epochFrom, epochTo)\r\n        return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(eclTo.lon, eclTo.lat, range)\r\n      }\r\n      case 'D':\r\n        return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(lon, lat, range)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * ToFK5 converts ecliptic longitude and latitude from dynamical frame to FK5.\r\n *\r\n * @param {Number} lon - ecliptic longitude in radians\r\n * @param {Number} lat - ecliptic latitude in radians\r\n * @param {Number} jde - Julian ephemeris day\r\n * @return {Coord}\r\n *    {Number} lon - FK5 longitude\r\n *    {Number} lat - FK5 latitude\r\n */\r\nfunction toFK5 (lon, lat, jde) {\r\n  // formula 32.3, p. 219.\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  // const Lp = lon - 1.397 * Math.PI / 180 * T - 0.00031 * Math.PI / 180 * T * T\r\n  const Lp = lon - _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].angleFromDeg((1.397 + 0.00031 * T) * T)\r\n  const [sLp, cLp] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(Lp)\r\n  // (32.3) p. 219\r\n  const L5 = lon + _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].angleFromSec(-0.09033 + 0.03916 * (cLp + sLp) * Math.tan(lat))\r\n  const B5 = lat + _sexagesimal_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].angleFromSec(0.03916 * (cLp - sLp))\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(L5, B5)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  Planet,\r\n  toFK5\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/planetposition.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/pluto.js":
/*!**********************************************!*\
  !*** ./node_modules/astronomia/src/pluto.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   astrometric: () => (/* binding */ astrometric),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   heliocentric: () => (/* binding */ heliocentric)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _elliptic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elliptic.js */ \"./node_modules/astronomia/src/elliptic.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module pluto\r\n */\r\n/**\r\n * Pluto: Chapter 37, Pluto.\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * Heliocentric returns J2000 heliocentric coordinates of Pluto.\r\n *\r\n * Results l, b are solar longitude and latitude in radians.\r\n * Result r is distance in AU.\r\n */\r\nfunction heliocentric (jde) {\r\n  let l = 0\r\n  let b = 0\r\n  let r = 0\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  const J = 34.35 + 3034.9057 * T\r\n  const S = 50.08 + 1222.1138 * T\r\n  const P = 238.96 + 144.96 * T\r\n  for (const i in t37) {\r\n    const t = t37[i]\r\n    const [sα, cα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos((t.i * J + t.j * S + t.k * P) * Math.PI / 180)\r\n    l += t.lA * sα + t.lB * cα\r\n    b += t.bA * sα + t.bB * cα\r\n    r += t.rA * sα + t.rB * cα\r\n  }\r\n  l = (l + 238.958116 + 144.96 * T) * Math.PI / 180\r\n  b = (b - 3.908239) * Math.PI / 180\r\n  r += 40.7241346\r\n  return { lon: l, lat: b, range: r }\r\n}\r\n\r\n/**\r\n * Astrometric returns J2000 astrometric coordinates of Pluto.\r\n */\r\nfunction astrometric (jde, earth) {\r\n  const sε = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SOblJ2000\r\n  const cε = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COblJ2000\r\n  const f = function (jde) {\r\n    const { lon, lat, range } = heliocentric(jde)\r\n    const [sl, cl] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(lon)\r\n    const [sb, cb] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(lat)\r\n    // (37.1) p. 264\r\n    const x = range * cl * cb\r\n    const y = range * (sl * cb * cε - sb * sε)\r\n    const z = range * (sl * cb * sε + sb * cε)\r\n    return { x, y, z }\r\n  }\r\n  const c = _elliptic_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].astrometricJ2000(f, jde, earth) // eslint-disable-line no-unused-vars\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(c.ra, c.dec)\r\n}\r\n\r\nfunction Pt (i, j, k, lA, lB, bA, bB, rA, rB) {\r\n  this.i = i\r\n  this.j = j\r\n  this.k = k\r\n  this.lA = lA\r\n  this.lB = lB\r\n  this.bA = bA\r\n  this.bB = bB\r\n  this.rA = rA\r\n  this.rB = rB\r\n}\r\n\r\nconst t37 = [\r\n  new Pt(0, 0, 1, -19.799805, 19.850055, -5.452852, -14.974862, 6.6865439, 6.8951812),\r\n  new Pt(0, 0, 2, 0.897144, -4.954829, 3.527812, 1.67279, -1.1827535, -0.0332538),\r\n  new Pt(0, 0, 3, 0.611149, 1.211027, -1.050748, 0.327647, 0.1593179, -0.143889),\r\n  new Pt(0, 0, 4, -0.341243, -0.189585, 0.17869, -0.292153, -0.0018444, 0.048322),\r\n  new Pt(0, 0, 5, 0.129287, -0.034992, 0.01865, 0.10034, -0.0065977, -0.0085431),\r\n  new Pt(0, 0, 6, -0.038164, 0.030893, -0.030697, -0.025823, 0.0031174, -0.0006032),\r\n  new Pt(0, 1, -1, 0.020442, -0.009987, 0.004878, 0.011248, -0.0005794, 0.0022161),\r\n  new Pt(0, 1, 0, -0.004063, -0.005071, 0.000226, -0.000064, 0.0004601, 0.0004032),\r\n  new Pt(0, 1, 1, -0.006016, -0.003336, 0.00203, -0.000836, -0.0001729, 0.0000234),\r\n  new Pt(0, 1, 2, -0.003956, 0.003039, 0.000069, -0.000604, -0.0000415, 0.0000702),\r\n  new Pt(0, 1, 3, -0.000667, 0.003572, -0.000247, -0.000567, 0.0000239, 0.0000723),\r\n  new Pt(0, 2, -2, 0.001276, 0.000501, -0.000057, 0.000001, 0.0000067, -0.0000067),\r\n  new Pt(0, 2, -1, 0.001152, -0.000917, -0.000122, 0.000175, 0.0001034, -0.0000451),\r\n  new Pt(0, 2, 0, 0.00063, -0.001277, -0.000049, -0.000164, -0.0000129, 0.0000504),\r\n  new Pt(1, -1, 0, 0.002571, -0.000459, -0.000197, 0.000199, 0.000048, -0.0000231),\r\n  new Pt(1, -1, 1, 0.000899, -0.001449, -0.000025, 0.000217, 0.0000002, -0.0000441),\r\n  new Pt(1, 0, -3, -0.001016, 0.001043, 0.000589, -0.000248, -0.0003359, 0.0000265),\r\n  new Pt(1, 0, -2, -0.002343, -0.001012, -0.000269, 0.000711, 0.0007856, -0.0007832),\r\n  new Pt(1, 0, -1, 0.007042, 0.000788, 0.000185, 0.000193, 0.0000036, 0.0045763),\r\n  new Pt(1, 0, 0, 0.001199, -0.000338, 0.000315, 0.000807, 0.0008663, 0.0008547),\r\n  new Pt(1, 0, 1, 0.000418, -0.000067, -0.00013, -0.000043, -0.0000809, -0.0000769),\r\n  new Pt(1, 0, 2, 0.00012, -0.000274, 0.000005, 0.000003, 0.0000263, -0.0000144),\r\n  new Pt(1, 0, 3, -0.00006, -0.000159, 0.000002, 0.000017, -0.0000126, 0.0000032),\r\n  new Pt(1, 0, 4, -0.000082, -0.000029, 0.000002, 0.000005, -0.0000035, -0.0000016),\r\n  new Pt(1, 1, -3, -0.000036, -0.000029, 0.000002, 0.000003, -0.0000019, -0.0000004),\r\n  new Pt(1, 1, -2, -0.00004, 0.000007, 0.000003, 0.000001, -0.0000015, 0.0000008),\r\n  new Pt(1, 1, -1, -0.000014, 0.000022, 0.000002, -0.000001, -0.0000004, 0.0000012),\r\n  new Pt(1, 1, 0, 0.000004, 0.000013, 0.000001, -0.000001, 0.0000005, 0.0000006),\r\n  new Pt(1, 1, 1, 0.000005, 0.000002, 0, -0.000001, 0.0000003, 0.0000001),\r\n  new Pt(1, 1, 3, -0.000001, 0, 0, 0, 0.0000006, -0.0000002),\r\n  new Pt(2, 0, -6, 0.000002, 0, 0, -0.000002, 0.0000002, 0.0000002),\r\n  new Pt(2, 0, -5, -0.000004, 0.000005, 0.000002, 0.000002, -0.0000002, -0.0000002),\r\n  new Pt(2, 0, -4, 0.000004, -0.000007, -0.000007, 0, 0.0000014, 0.0000013),\r\n  new Pt(2, 0, -3, 0.000014, 0.000024, 0.00001, -0.000008, -0.0000063, 0.0000013),\r\n  new Pt(2, 0, -2, -0.000049, -0.000034, -0.000003, 0.00002, 0.0000136, -0.0000236),\r\n  new Pt(2, 0, -1, 0.000163, -0.000048, 0.000006, 0.000005, 0.0000273, 0.0001065),\r\n  new Pt(2, 0, 0, 0.000009, -0.000024, 0.000014, 0.000017, 0.0000251, 0.0000149),\r\n  new Pt(2, 0, 1, -0.000004, 0.000001, -0.000002, 0, -0.0000025, -0.0000009),\r\n  new Pt(2, 0, 2, -0.000003, 0.000001, 0, 0, 0.0000009, -0.0000002),\r\n  new Pt(2, 0, 3, 0.000001, 0.000003, 0, 0, -0.0000008, 0.0000007),\r\n  new Pt(3, 0, -2, -0.000003, -0.000001, 0, 0.000001, 0.0000002, -0.000001),\r\n  new Pt(3, 0, -1, 0.000005, -0.000003, 0, 0, 0.0000019, 0.0000035),\r\n  new Pt(3, 0, 0, 0, 0, 0.000001, 0, 0.000001, 0.0000003)\r\n]\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  heliocentric,\r\n  astrometric\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/pluto.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/precess.js":
/*!************************************************!*\
  !*** ./node_modules/astronomia/src/precess.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EclipticPrecessor: () => (/* binding */ EclipticPrecessor),\n/* harmony export */   Precessor: () => (/* binding */ Precessor),\n/* harmony export */   approxAnnualPrecession: () => (/* binding */ approxAnnualPrecession),\n/* harmony export */   approxPosition: () => (/* binding */ approxPosition),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   eclipticPosition: () => (/* binding */ eclipticPosition),\n/* harmony export */   mn: () => (/* binding */ mn),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   properMotion: () => (/* binding */ properMotion),\n/* harmony export */   properMotion3D: () => (/* binding */ properMotion3D)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _elementequinox_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./elementequinox.js */ \"./node_modules/astronomia/src/elementequinox.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module precess\r\n */\r\n/**\r\n * Precession: Chapter 21, Precession.\r\n *\r\n * Functions in this package take Julian epoch argurments rather than Julian\r\n * days.  Use base.JDEToJulianYear() to convert.\r\n *\r\n * Also in package base are some definitions related to the Besselian and\r\n * Julian Year.\r\n *\r\n * Partial:  Precession from FK4 not implemented.  Meeus gives no test cases.\r\n * It's a fair amount of code and data, representing significant chances for\r\n * errors.  And precession from FK4 would seem to be of little interest today.\r\n *\r\n * Proper motion units\r\n *\r\n * Meeus gives some example annual proper motions in units of seconds of\r\n * right ascension and seconds of declination.  To make units clear,\r\n * functions in this package take proper motions with argument types of\r\n * sexa.HourAngle and sexa.Angle respectively.  Error-prone conversions\r\n * can be avoided by using the constructors for these base types.\r\n *\r\n * For example, given an annual proper motion in right ascension of -0ˢ.03847,\r\n * rather than\r\n *\r\n * mra = -0.03847 / 13751 // as Meeus suggests\r\n *\r\n * or\r\n *\r\n * mra = -0.03847 * (15/3600) * (pi/180) // less magic\r\n *\r\n * use\r\n *\r\n * mra = new sexa.HourAngle(false, 0, 0, -0.03847)\r\n *\r\n * Unless otherwise indicated, functions in this library expect proper motions\r\n * to be annual proper motions, so the unit denominator is years.\r\n * (The code, following Meeus's example, technically treats it as Julian years.)\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * approxAnnualPrecession returns approximate annual precision in right\r\n * ascension and declination.\r\n *\r\n * The two epochs should be within a few hundred years.\r\n * The declinations should not be too close to the poles.\r\n *\r\n * @param {Equatorial} eqFrom\r\n * @param {Number} epochFrom - use `base.JDEToJulianYear(year)` to get epoch\r\n * @param {Number} epochTo - use `base.JDEToJulianYear(year)` to get epoch\r\n * @returns {Object}\r\n *  {sexa.HourAngle} seconds of right ascension\r\n *  {sexa.Angle} seconds of Declination\r\n */\r\nfunction approxAnnualPrecession (eqFrom, epochFrom, epochTo) {\r\n  const [m, na, nd] = mn(epochFrom, epochTo)\r\n  const [sa, ca] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eqFrom.ra)\r\n  // (21.1) p. 132\r\n  const Δαs = m + na * sa * Math.tan(eqFrom.dec) // seconds of RA\r\n  const Δδs = nd * ca // seconds of Dec\r\n  const ra = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_4__.HourAngle(false, 0, 0, Δαs).rad()\r\n  const dec = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_4__.Angle(false, 0, 0, Δδs).rad()\r\n  return { ra, dec }\r\n}\r\n\r\n/**\r\n * @param {Number} epochFrom - use `base.JDEToJulianYear(year)` to get epoch\r\n * @param {Number} epochTo - use `base.JDEToJulianYear(year)` to get epoch\r\n * @returns {Number[]}\r\n */\r\nfunction mn (epochFrom, epochTo) {\r\n  const T = (epochTo - epochFrom) * 0.01\r\n  const m = 3.07496 + 0.00186 * T\r\n  const na = 1.33621 - 0.00057 * T\r\n  const nd = 20.0431 - 0.0085 * T\r\n  return [m, na, nd]\r\n}\r\n\r\n/**\r\n * ApproxPosition uses ApproxAnnualPrecession to compute a simple and quick\r\n * precession while still considering proper motion.\r\n *\r\n * @param {Equatorial} eqFrom\r\n * @param {Number} epochFrom\r\n * @param {Number} epochTo\r\n * @param {Number} mα - in radians\r\n * @param {Number} mδ - in radians\r\n * @returns {Equatorial} eqTo\r\n */\r\nfunction approxPosition (eqFrom, epochFrom, epochTo, mα, mδ) {\r\n  const { ra, dec } = approxAnnualPrecession(eqFrom, epochFrom, epochTo)\r\n  const dy = epochTo - epochFrom\r\n  const eqTo = new _coord_js__WEBPACK_IMPORTED_MODULE_1__.Equatorial()\r\n  eqTo.ra = eqFrom.ra + (ra + mα) * dy\r\n  eqTo.dec = eqFrom.dec + (dec + mδ) * dy\r\n  return eqTo\r\n}\r\n\r\n// constants\r\nconst d = Math.PI / 180\r\nconst s = d / 3600\r\n\r\n// coefficients from (21.2) p. 134\r\nconst ζT = [2306.2181 * s, 1.39656 * s, -0.000139 * s]\r\nconst zT = [2306.2181 * s, 1.39656 * s, -0.000139 * s]\r\nconst θT = [2004.3109 * s, -0.8533 * s, -0.000217 * s]\r\n// coefficients from (21.3) p. 134\r\nconst ζt = [2306.2181 * s, 0.30188 * s, 0.017998 * s]\r\nconst zt = [2306.2181 * s, 1.09468 * s, 0.018203 * s]\r\nconst θt = [2004.3109 * s, -0.42665 * s, -0.041833 * s]\r\n\r\n/**\r\n * Precessor represents precession from one epoch to another.\r\n *\r\n * Construct with NewPrecessor, then call method Precess.\r\n * After construction, Precess may be called multiple times to precess\r\n * different coordinates with the same initial and final epochs.\r\n */\r\nclass Precessor {\r\n  /**\r\n   * constructs a Precessor object and initializes it to precess\r\n   * coordinates from epochFrom to epochTo.\r\n   * @param {Number} epochFrom\r\n   * @param {Number} epochTo\r\n   */\r\n  constructor (epochFrom, epochTo) {\r\n    // (21.2) p. 134\r\n    let ζCoeff = ζt\r\n    let zCoeff = zt\r\n    let θCoeff = θt\r\n    if (epochFrom !== 2000) {\r\n      const T = (epochFrom - 2000) * 0.01\r\n      ζCoeff = [\r\n        _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, ...ζT),\r\n        0.30188 * s - 0.000344 * s * T,\r\n        0.017998 * s\r\n      ]\r\n      zCoeff = [\r\n        _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, ...zT),\r\n        1.09468 * s + 0.000066 * s * T,\r\n        0.018203 * s\r\n      ]\r\n      θCoeff = [\r\n        _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, ...θT),\r\n        -0.42665 * s - 0.000217 * s * T,\r\n        -0.041833 * s\r\n      ]\r\n    }\r\n    const t = (epochTo - epochFrom) * 0.01\r\n    this.ζ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, ...ζCoeff) * t\r\n    this.z = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, ...zCoeff) * t\r\n    const θ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, ...θCoeff) * t\r\n    this.sθ = Math.sin(θ)\r\n    this.cθ = Math.cos(θ)\r\n  }\r\n\r\n  /**\r\n   * Precess precesses coordinates eqFrom, leaving result in eqTo.\r\n   *\r\n   * @param {Equatorial} eqFrom\r\n   * @returns {Equatorial} eqTo\r\n   */\r\n  precess (eqFrom) {\r\n    // (21.4) p. 134\r\n    const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eqFrom.dec)\r\n    const [sαζ, cαζ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eqFrom.ra + this.ζ)\r\n    const A = cδ * sαζ\r\n    const B = this.cθ * cδ * cαζ - this.sθ * sδ\r\n    const C = this.sθ * cδ * cαζ + this.cθ * sδ\r\n    const eqTo = new _coord_js__WEBPACK_IMPORTED_MODULE_1__.Equatorial()\r\n    eqTo.ra = Math.atan2(A, B) + this.z\r\n    if (C < _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].CosSmallAngle) {\r\n      eqTo.dec = Math.asin(C)\r\n    } else {\r\n      eqTo.dec = Math.acos(Math.hypot(A, B)) // near pole\r\n    }\r\n    return eqTo\r\n  }\r\n}\r\n\r\n/**\r\n * Position precesses equatorial coordinates from one epoch to another,\r\n * including proper motions.\r\n *\r\n * If proper motions are not to be considered or are not applicable, pass 0, 0\r\n * for mα, mδ\r\n *\r\n * Both eqFrom and eqTo must be non-nil, although they may point to the same\r\n * struct.  EqTo is returned for convenience.\r\n * @param {Equatorial} eqFrom\r\n * @param {Number} epochFrom\r\n * @param {Number} epochTo\r\n * @param {Number} mα - in radians\r\n * @param {Number} mδ - in radians\r\n * @returns {Equatorial} [eqTo]\r\n */\r\nfunction position (eqFrom, epochFrom, epochTo, mα, mδ) {\r\n  const p = new Precessor(epochFrom, epochTo)\r\n  const t = epochTo - epochFrom\r\n  const eqTo = new _coord_js__WEBPACK_IMPORTED_MODULE_1__.Equatorial()\r\n  eqTo.ra = eqFrom.ra + mα * t\r\n  eqTo.dec = eqFrom.dec + mδ * t\r\n  return p.precess(eqTo)\r\n}\r\n\r\n// coefficients from (21.5) p. 136\r\nconst ηT = [47.0029 * s, -0.06603 * s, 0.000598 * s]\r\nconst πT = [174.876384 * d, 3289.4789 * s, 0.60622 * s]\r\nconst pT = [5029.0966 * s, 2.22226 * s, -0.000042 * s]\r\nconst ηt = [47.0029 * s, -0.03302 * s, 0.000060 * s]\r\nconst πt = [174.876384 * d, -869.8089 * s, 0.03536 * s]\r\nconst pt = [5029.0966 * s, 1.11113 * s, -0.000006 * s]\r\n\r\n/**\r\n * EclipticPrecessor represents precession from one epoch to another.\r\n *\r\n * Construct with NewEclipticPrecessor, then call method Precess.\r\n * After construction, Precess may be called multiple times to precess\r\n * different coordinates with the same initial and final epochs.\r\n */\r\nclass EclipticPrecessor {\r\n  /**\r\n   * constructs an EclipticPrecessor object and initializes\r\n   * it to precess coordinates from epochFrom to epochTo.\r\n   * @param {Number} epochFrom\r\n   * @param {Number} epochTo\r\n   */\r\n  constructor (epochFrom, epochTo) {\r\n    // (21.5) p. 136\r\n    let ηCoeff = ηt\r\n    let πCoeff = πt\r\n    let pCoeff = pt\r\n    if (epochFrom !== 2000) {\r\n      const T = (epochFrom - 2000) * 0.01\r\n      ηCoeff = [\r\n        _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, ...ηT),\r\n        -0.03302 * s + 0.000598 * s * T,\r\n        0.000060 * s\r\n      ]\r\n      πCoeff = [\r\n        _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, ...πT),\r\n        -869.8089 * s - 0.50491 * s * T,\r\n        0.03536 * s\r\n      ]\r\n      pCoeff = [\r\n        _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, ...pT),\r\n        1.11113 * s - 0.000042 * s * T,\r\n        -0.000006 * s\r\n      ]\r\n    }\r\n    const t = (epochTo - epochFrom) * 0.01\r\n    this.π = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, ...πCoeff)\r\n    this.p = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, ...pCoeff) * t\r\n    const η = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, ...ηCoeff) * t\r\n    this.sη = Math.sin(η)\r\n    this.cη = Math.cos(η)\r\n  }\r\n\r\n  /**\r\n   * EclipticPrecess precesses coordinates eclFrom, leaving result in eclTo.\r\n   *\r\n   * The same struct may be used for eclFrom and eclTo.\r\n   * EclTo is returned for convenience.\r\n   * @param {Ecliptic} eclFrom\r\n   * @returns {Ecliptic} [eclTo]\r\n   */\r\n  precess (eclFrom) {\r\n    // (21.7) p. 137\r\n    const [sβ, cβ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eclFrom.lat)\r\n    const [sd, cd] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(this.π - eclFrom.lon)\r\n    const A = this.cη * cβ * sd - this.sη * sβ\r\n    const B = cβ * cd\r\n    const C = this.cη * sβ + this.sη * cβ * sd\r\n    const eclTo = new _coord_js__WEBPACK_IMPORTED_MODULE_1__.Ecliptic(this.p + this.π - Math.atan2(A, B))\r\n    if (C < _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].CosSmallAngle) {\r\n      eclTo.lat = Math.asin(C)\r\n    } else {\r\n      eclTo.lat = Math.acos(Math.hypot(A, B)) // near pole\r\n    }\r\n    return eclTo\r\n  }\r\n\r\n  /**\r\n   * ReduceElements reduces orbital elements of a solar system body from one\r\n   * equinox to another.\r\n   *\r\n   * This function is described in chapter 24, but is located in this\r\n   * package so it can be a method of EclipticPrecessor.\r\n   *\r\n   * @param {Elements} eFrom\r\n   * @returns {Elements} eTo\r\n   */\r\n  reduceElements (eFrom) {\r\n    const ψ = this.π + this.p\r\n    const [si, ci] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eFrom.inc)\r\n    const [snp, cnp] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eFrom.node - this.π)\r\n    const eTo = new _elementequinox_js__WEBPACK_IMPORTED_MODULE_2__.Elements()\r\n    // (24.1) p. 159\r\n    eTo.inc = Math.acos(ci * this.cη + si * this.sη * cnp)\r\n    // (24.2) p. 159\r\n    eTo.node = Math.atan2(si * snp, this.cη * si * cnp - this.sη * ci) + ψ\r\n    // (24.3) p. 159\r\n    eTo.peri = Math.atan2(-this.sη * snp, si * this.cη - ci * this.sη * cnp) + eFrom.peri\r\n    return eTo\r\n  }\r\n}\r\n\r\n/**\r\n * eclipticPosition precesses ecliptic coordinates from one epoch to another,\r\n * including proper motions.\r\n * While eclFrom is given as ecliptic coordinates, proper motions mα, mδ are\r\n * still expected to be equatorial.  If proper motions are not to be considered\r\n * or are not applicable, pass 0, 0.\r\n * Both eclFrom and eclTo must be non-nil, although they may point to the same\r\n * struct.  EclTo is returned for convenience.\r\n *\r\n * @param {Ecliptic} eclFrom,\r\n * @param {Number} epochFrom\r\n * @param {HourAngle} [mα]\r\n * @param {Angle} [mδ]\r\n * @returns {Ecliptic} eclTo\r\n */\r\nfunction eclipticPosition (eclFrom, epochFrom, epochTo, mα, mδ) {\r\n  const p = new EclipticPrecessor(epochFrom, epochTo)\r\n\r\n  if (mα && mδ && (mα.rad() !== 0 || mδ.rad() !== 0)) {\r\n    const { lon, lat } = properMotion(mα.rad(), mδ.rad(), epochFrom, eclFrom)\r\n    const t = epochTo - epochFrom\r\n    eclFrom.lon += lon * t\r\n    eclFrom.lat += lat * t\r\n  }\r\n  return p.precess(eclFrom)\r\n}\r\n\r\n/**\r\n * @param {Number} mα - anual proper motion (ra)\r\n * @param {Number} mδ - anual proper motion (dec)\r\n * @param {Number} epoch\r\n * @param {Ecliptic} ecl\r\n * @returns {Ecliptic} {lon, lat}\r\n */\r\nfunction properMotion (mα, mδ, epoch, ecl) {\r\n  const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].meanObliquity(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JulianYearToJDE(epoch))\r\n  const [εsin, εcos] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε)\r\n  const { ra, dec } = ecl.toEquatorial(ε)\r\n  const [sα, cα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ra)\r\n  const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(dec)\r\n  const cβ = Math.cos(ecl.lat)\r\n  const lon = (mδ * εsin * cα + mα * cδ * (εcos * cδ + εsin * sδ * sα)) / (cβ * cβ)\r\n  const lat = (mδ * (εcos * cδ + εsin * sδ * sα) - mα * εsin * cα * cδ) / cβ\r\n  return new _coord_js__WEBPACK_IMPORTED_MODULE_1__.Ecliptic(lon, lat)\r\n}\r\n\r\n/**\r\n * ProperMotion3D takes the 3D equatorial coordinates of an object\r\n * at one epoch and computes its coordinates at a new epoch, considering\r\n * proper motion and radial velocity.\r\n *\r\n * Radial distance (r) must be in parsecs, radial velocitiy (mr) in\r\n * parsecs per year.\r\n *\r\n * Both eqFrom and eqTo must be non-nil, although they may point to the same\r\n * struct.  EqTo is returned for convenience.\r\n *\r\n * @param {Equatorial} eqFrom,\r\n * @param {Number} epochFrom\r\n * @param {Number} r\r\n * @param {Number} mr\r\n * @param {HourAngle} mα\r\n * @param {Angle} mδ\r\n * @returns {Equatorial} eqTo\r\n */\r\nfunction properMotion3D (eqFrom, epochFrom, epochTo, r, mr, mα, mδ) {\r\n  const [sα, cα] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eqFrom.ra)\r\n  const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(eqFrom.dec)\r\n  const x = r * cδ * cα\r\n  const y = r * cδ * sα\r\n  const z = r * sδ\r\n  const mrr = mr / r\r\n  const zmδ = z * mδ.rad()\r\n  const mx = x * mrr - zmδ * cα - y * mα.rad()\r\n  const my = y * mrr - zmδ * sα + x * mα.rad()\r\n  const mz = z * mrr + r * mδ.rad() * cδ\r\n  const t = epochTo - epochFrom\r\n  const xp = x + t * mx\r\n  const yp = y + t * my\r\n  const zp = z + t * mz\r\n  const eqTo = new _coord_js__WEBPACK_IMPORTED_MODULE_1__.Equatorial()\r\n  eqTo.ra = Math.atan2(yp, xp)\r\n  eqTo.dec = Math.atan2(zp, Math.hypot(xp, yp))\r\n  return eqTo\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  approxAnnualPrecession,\r\n  mn,\r\n  approxPosition,\r\n  Precessor,\r\n  position,\r\n  EclipticPrecessor,\r\n  eclipticPosition,\r\n  properMotion,\r\n  properMotion3D\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/precess.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/refraction.js":
/*!***************************************************!*\
  !*** ./node_modules/astronomia/src/refraction.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bennett: () => (/* binding */ bennett),\n/* harmony export */   bennett2: () => (/* binding */ bennett2),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   gt15Apparent: () => (/* binding */ gt15Apparent),\n/* harmony export */   gt15True: () => (/* binding */ gt15True),\n/* harmony export */   saemundsson: () => (/* binding */ saemundsson)\n/* harmony export */ });\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module refraction\r\n */\r\n/**\r\n * Refraction: Chapter 16: Atmospheric Refraction.\r\n *\r\n * Functions here assume atmospheric pressure of 1010 mb, temperature of\r\n * 10°C, and yellow light.\r\n */\r\n\r\nconst { sin, tan } = Math\r\nconst D2R = Math.PI / 180\r\n\r\nconst gt15true1 = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Angle(false, 0, 0, 58.294).rad()\r\nconst gt15true2 = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Angle(false, 0, 0, 0.0668).rad()\r\nconst gt15app1 = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Angle(false, 0, 0, 58.276).rad()\r\nconst gt15app2 = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Angle(false, 0, 0, 0.0824).rad()\r\n\r\n/**\r\n * gt15True returns refraction for obtaining true altitude when altitude\r\n * is greater than 15 degrees (about 0.26 radians.)\r\n *\r\n * h0 must be a measured apparent altitude of a celestial body in radians.\r\n *\r\n * Result is refraction to be subtracted from h0 to obtain the true altitude\r\n * of the body.  Unit is radians.\r\n */\r\nfunction gt15True (h0) { // (h0 float64)  float64\r\n  // (16.1) p. 105\r\n  const t = tan(Math.PI / 2 - h0)\r\n  return gt15true1 * t - gt15true2 * t * t * t\r\n}\r\n\r\n/**\r\n * gt15Apparent returns refraction for obtaining apparent altitude when\r\n * altitude is greater than 15 degrees (about 0.26 radians.)\r\n *\r\n * h must be a computed true \"airless\" altitude of a celestial body in radians.\r\n *\r\n * Result is refraction to be added to h to obtain the apparent altitude\r\n * of the body.  Unit is radians.\r\n */\r\nfunction gt15Apparent (h) { // (h float64)  float64\r\n  // (16.2) p. 105\r\n  const t = tan(Math.PI / 2 - h)\r\n  return gt15app1 * t - gt15app2 * t * t * t\r\n}\r\n\r\n/**\r\n * Bennett returns refraction for obtaining true altitude.\r\n *\r\n * h0 must be a measured apparent altitude of a celestial body in radians.\r\n *\r\n * Results are accurate to 0.07 arc min from horizon to zenith.\r\n *\r\n * Result is refraction to be subtracted from h0 to obtain the true altitude\r\n * of the body.  Unit is radians.\r\n */\r\nfunction bennett (h0) { // (h0 float64)  float64\r\n  // (16.3) p. 106\r\n  const c1 = D2R / 60\r\n  const c731 = 7.31 * D2R * D2R\r\n  const c44 = 4.4 * D2R\r\n  return c1 / tan(h0 + c731 / (h0 + c44))\r\n}\r\n\r\n/**\r\n * Bennett2 returns refraction for obtaining true altitude.\r\n *\r\n * Similar to Bennett, but a correction is applied to give a more accurate\r\n * result.\r\n *\r\n * Results are accurate to 0.015 arc min.  Result unit is radians.\r\n */\r\nfunction bennett2 (h0) { // (h0 float64)  float64\r\n  const cMin = 60 / D2R\r\n  const c06 = 0.06 / cMin\r\n  const c147 = 14.7 * cMin * D2R\r\n  const c13 = 13 * D2R\r\n  const R = bennett(h0)\r\n  return R - c06 * sin(c147 * R + c13)\r\n}\r\n\r\n/**\r\n * Saemundsson returns refraction for obtaining apparent altitude.\r\n *\r\n * h must be a computed true \"airless\" altitude of a celestial body in radians.\r\n *\r\n * Result is refraction to be added to h to obtain the apparent altitude\r\n * of the body.\r\n *\r\n * Results are consistent with Bennett to within 4 arc sec.\r\n * Result unit is radians.\r\n */\r\nfunction saemundsson (h) { // (h float64)  float64\r\n  // (16.4) p. 106\r\n  const c102 = 1.02 * D2R / 60\r\n  const c103 = 10.3 * D2R * D2R\r\n  const c511 = 5.11 * D2R\r\n  return c102 / tan(h + c103 / (h + c511))\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  gt15True,\r\n  gt15Apparent,\r\n  bennett,\r\n  bennett2,\r\n  saemundsson\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/refraction.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/rise.js":
/*!*********************************************!*\
  !*** ./node_modules/astronomia/src/rise.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlanetRise: () => (/* binding */ PlanetRise),\n/* harmony export */   Stdh0Lunar: () => (/* binding */ Stdh0Lunar),\n/* harmony export */   Stdh0LunarMean: () => (/* binding */ Stdh0LunarMean),\n/* harmony export */   Stdh0Solar: () => (/* binding */ Stdh0Solar),\n/* harmony export */   Stdh0Stellar: () => (/* binding */ Stdh0Stellar),\n/* harmony export */   approxTimes: () => (/* binding */ approxTimes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   errorAboveHorizon: () => (/* binding */ errorAboveHorizon),\n/* harmony export */   errorBelowHorizon: () => (/* binding */ errorBelowHorizon),\n/* harmony export */   hourAngle: () => (/* binding */ hourAngle),\n/* harmony export */   meanRefraction: () => (/* binding */ meanRefraction),\n/* harmony export */   refraction: () => (/* binding */ refraction),\n/* harmony export */   stdh0: () => (/* binding */ stdh0),\n/* harmony export */   stdh0Lunar: () => (/* binding */ stdh0Lunar),\n/* harmony export */   stdh0LunarMean: () => (/* binding */ stdh0LunarMean),\n/* harmony export */   stdh0Solar: () => (/* binding */ stdh0Solar),\n/* harmony export */   stdh0Stellar: () => (/* binding */ stdh0Stellar),\n/* harmony export */   times: () => (/* binding */ times)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _deltat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deltat.js */ \"./node_modules/astronomia/src/deltat.js\");\n/* harmony import */ var _elliptic_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./elliptic.js */ \"./node_modules/astronomia/src/elliptic.js\");\n/* harmony import */ var _interpolation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interpolation.js */ \"./node_modules/astronomia/src/interpolation.js\");\n/* harmony import */ var _julian_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./julian.js */ \"./node_modules/astronomia/src/julian.js\");\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/* harmony import */ var _sidereal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sidereal.js */ \"./node_modules/astronomia/src/sidereal.js\");\n/* harmony import */ var _globe_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./globe.js */ \"./node_modules/astronomia/src/globe.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/* eslint key-spacing: 1 */\r\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module rise\r\n */\r\n/**\r\n * Rise: Chapter 15, Rising, Transit, and Setting.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n // eslint-disable-line no-unused-vars\r\nconst { acos, asin, cos, sin } = Math\r\n\r\n/**\r\n * @typedef {object} RiseObj\r\n * @property {number} rise - in seconds\r\n * @property {number} transit - in seconds\r\n * @property {number} set - in seconds\r\n */\r\n\r\nconst SECS_PER_DEGREE = 240 // = 86400 / 360\r\nconst SECS_PER_DAY = 86400\r\nconst D2R = Math.PI / 180\r\n\r\nconst errorAboveHorizon = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].errorCode('always above horizon', -1)\r\nconst errorBelowHorizon = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].errorCode('always below horizon', 1)\r\n\r\n/**\r\n * mean refraction of the atmosphere\r\n */\r\nconst meanRefraction = new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Angle(false, 0, 34, 0).rad()\r\n\r\n/**\r\n * \"Standard altitudes\" for various bodies already including `meanRefraction` of 0°34'\r\n *\r\n * The standard altitude is the geometric altitude of the center of body\r\n * at the time of apparent rising or seting.\r\n */\r\nconst stdh0 = {\r\n  stellar: -meanRefraction,\r\n  solar: new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Angle(true, 0, 50, 0).rad(),\r\n  // not containing meanRefraction\r\n  lunar: _sexagesimal_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].angleFromDeg(0.7275),\r\n  lunarMean: _sexagesimal_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].angleFromDeg(0.125)\r\n}\r\n\r\n/**\r\n * Helper function to obtain corrected refraction\r\n * @param {number} h0 - altitude of the body in radians containing `meanRefraction` of 0°34'\r\n * @param {number} [corr] - the calcluated refraction e.g. from package `refraction` in radians\r\n * @return {number} refraction value in radians\r\n */\r\nfunction refraction (h0, corr) {\r\n  if (!corr) {\r\n    return h0\r\n  } else {\r\n    return h0 - meanRefraction - corr\r\n  }\r\n}\r\n\r\n/**\r\n * standard altitude for stars, planets at apparent rising, seting\r\n */\r\nconst stdh0Stellar = (_refraction) => refraction(stdh0.stellar, _refraction)\r\nconst Stdh0Stellar = stdh0Stellar() // for backward-compatibility\r\n/**\r\n * standard altitude for sun for upper limb of the disk\r\n */\r\nconst stdh0Solar = (_refraction) => refraction(stdh0.solar, _refraction)\r\nconst Stdh0Solar = stdh0Solar() // for backward-compatibility\r\n\r\n/**\r\n * standard altitude for moon (low accuracy)\r\n */\r\nconst stdh0LunarMean = (_refraction) => {\r\n  return stdh0.lunarMean - refraction(_refraction)\r\n}\r\nconst Stdh0LunarMean = stdh0LunarMean() // for backward-compatibility\r\n/**\r\n * Stdh0Lunar is the standard altitude of the Moon considering π, the\r\n * Moon's horizontal parallax.\r\n * @param {number} π - the Moon's horizontal parallax\r\n * @param {number} [refraction] - optional value for refraction in radians if\r\n *        omitted than meanRefraction is used\r\n * @return {number} altitude of Moon in radians\r\n */\r\nconst stdh0Lunar = (π, refraction) => {\r\n  return stdh0.lunar * π - (refraction || meanRefraction)\r\n}\r\nconst Stdh0Lunar = stdh0Lunar // for backward-compatibility\r\n\r\n/**\r\n * @return {number} local angle in radians\r\n */\r\nfunction hourAngle (lat, h0, δ) {\r\n  // approximate local hour angle\r\n  const cosH = (sin(h0) - sin(lat) * sin(δ)) / (cos(lat) * cos(δ)) // (15.1) p. 102\r\n  if (cosH < -1) {\r\n    throw errorAboveHorizon\r\n  } else if (cosH > 1) {\r\n    throw errorBelowHorizon\r\n  }\r\n  const H = acos(cosH)\r\n  return H\r\n}\r\n\r\n/**\r\n * @param {number} lon - longitude in radians\r\n * @param {number} α - right ascension in radians\r\n * @param {number} th0 - sidereal.apparent0UT in seconds of day `[0...86400[`\r\n * @return {number} time of transit in seconds of day `[0, 86400[`\r\n */\r\nfunction _mt (lon, α, th0) {\r\n  // const mt = (((lon + α) * 180 / Math.PI - (th0 * 360 / 86400)) * 86400 / 360)\r\n  const mt = (lon + α) * SECS_PER_DEGREE * 180 / Math.PI - th0\r\n  return mt\r\n}\r\n\r\n/**\r\n * @param {number} Th0 - sidereal.apparent0UT in seconds of day `[0...86400[`\r\n * @param {number} m - motion in seconds of day `[0...86400[`\r\n * @return {number} new siderial time seconds of day `[0...86400[`\r\n */\r\nfunction _th0 (Th0, m) {\r\n  // in original formula Th0 = 0...360 and m = 0...1 -> return value would be in 0...360 degrees\r\n  // Th0 /= 240\r\n  // m /= 86400\r\n  const th0 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(Th0 + m * 360.985647 / 360, SECS_PER_DAY) // p103\r\n  return th0 // 0...86400 in seconds angle\r\n}\r\n\r\n/**\r\n * maintain backward compatibility - will be removed in v2\r\n * return value in future will be an object not an array\r\n * @private\r\n * @param {RiseObj} rs\r\n * @return {RiseObj}\r\n */\r\nfunction _compatibility (rs) {\r\n  const _rs = [rs.rise, rs.transit, rs.set]\r\n  _rs.rise = rs.rise\r\n  _rs.transit = rs.transit\r\n  _rs.set = rs.set\r\n  return _rs\r\n}\r\n\r\n/**\r\n * ApproxTimes computes approximate UT rise, transit and set times for\r\n * a celestial object on a day of interest.\r\n *\r\n * The function argurments do not actually include the day, but do include\r\n * values computed from the day.\r\n *\r\n * @param {GlobeCoord} p - is geographic coordinates of observer.\r\n * @param {number} h0 - is \"standard altitude\" of the body in radians\r\n * @param {number} Th0 - is apparent sidereal time at 0h UT at Greenwich in seconds\r\n *        (range 0...86400) must be the time on the day of interest, in seconds.\r\n *        See sidereal.apparent0UT\r\n * @param {number} α - right ascension (radians)\r\n * @param {number} δ - declination (radians)\r\n * @return {RiseObj} Result units are seconds and are in the range [0,86400)\r\n * @throws Error\r\n */\r\nfunction approxTimes (p, h0, Th0, α, δ) {\r\n  const H0 = hourAngle(p.lat, h0, δ) * SECS_PER_DEGREE * 180 / Math.PI // in degrees per day === seconds\r\n  // approximate transit, rise, set times.\r\n  // (15.2) p. 102.0\r\n  const mt = _mt(p.lon, α, Th0)\r\n  const rs = {}\r\n  rs.transit = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(mt, SECS_PER_DAY)\r\n  rs.rise = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(mt - H0, SECS_PER_DAY)\r\n  rs.set = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(mt + H0, SECS_PER_DAY)\r\n  return _compatibility(rs)\r\n}\r\n\r\n/**\r\n * Times computes UT rise, transit and set times for a celestial object on\r\n * a day of interest.\r\n *\r\n * The function argurments do not actually include the day, but do include\r\n * a number of values computed from the day.\r\n *\r\n * @param {GlobeCoord} p - is geographic coordinates of observer.\r\n * @param {number} ΔT - is delta T in seconds\r\n * @param {number} h0 - is \"standard altitude\" of the body in radians\r\n * @param {number} Th0 - is apparent sidereal time at 0h UT at Greenwich in seconds\r\n *        (range 0...86400) must be the time on the day of interest, in seconds.\r\n *        See sidereal.apparent0UT\r\n * @param {Array<number>} α3 - slices of three right ascensions\r\n * @param {Array<number>} δ3 - slices of three declinations.\r\n *        α3, δ3 must be values at 0h dynamical time for the day before, the day of,\r\n *        and the day after the day of interest.  Units are radians.\r\n *\r\n * @return {RiseObj} Result units are seconds and are in the range [0,86400)\r\n * @throws Error\r\n */\r\nfunction times (p, ΔT, h0, Th0, α3, δ3) { // (p globe.Coord, ΔT, h0, Th0 float64, α3, δ3 []float64)  (mRise, mTransit, mSet float64, err error)\r\n  const rs = approxTimes(p, h0, Th0, α3[1], δ3[1])\r\n  const d3α = new _interpolation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Len3(-SECS_PER_DAY, SECS_PER_DAY, α3)\r\n  const d3δ = new _interpolation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Len3(-SECS_PER_DAY, SECS_PER_DAY, δ3)\r\n\r\n  // adjust mTransit\r\n  const ut = rs.transit + ΔT\r\n  const α = d3α.interpolateX(ut)\r\n  const th0 = _th0(Th0, rs.transit)\r\n  const H = -1 * _mt(p.lon, α, th0) // in secs // Hmeus = 0...360\r\n  rs.transit -= H\r\n\r\n  // adjust mRise, mSet\r\n  const [sLat, cLat] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(p.lat)\r\n\r\n  const adjustRS = function (m) {\r\n    const ut = m + ΔT\r\n    const α = d3α.interpolateX(ut)\r\n    const δ = d3δ.interpolateX(ut)\r\n    const th0 = _th0(Th0, m)\r\n    const H = -1 * _mt(p.lon, α, th0)\r\n    const Hrad = (H / SECS_PER_DEGREE) * D2R\r\n    const h = asin(((sLat * sin(δ)) + (cLat * cos(δ) * cos(Hrad)))) // formula 13.6\r\n    const Δm = (SECS_PER_DAY * (h - h0) / (cos(δ) * cLat * sin(Hrad) * 2 * Math.PI)) // formula p103 3\r\n    return m + Δm\r\n  }\r\n\r\n  rs.rise = adjustRS(rs.rise)\r\n  rs.set = adjustRS(rs.set)\r\n\r\n  return _compatibility(rs)\r\n}\r\n\r\n/**\r\n * RisePlanet computes rise, transit and set times for a planet on a day of interest.\r\n */\r\nclass PlanetRise {\r\n  /**\r\n   * @param {number|Date} jd - Julian Day starting at midnight or Date object\r\n   * @param {number} lat - geographic latitude of the observerin degrees\r\n   * @param {number} lon - geographic longitude of the observer in degrees (measured positively westward)\r\n   * @param {Planet} earth - VSOP87 Planet object for Earth\r\n   * @param {Planet} planet - VSOP87 Planet object of observed body\r\n   * @param {object} [opts]\r\n   * @param {boolean} [opts.date] - return times as Date objects\r\n   * @param {number} [opts.refraction] - use different refraction than `stdh0Stellar`\r\n   */\r\n  constructor (jd, lat, lon, earth, planet, opts) {\r\n    this.opts = opts || {}\r\n    this.refraction = this.opts.refraction || stdh0Stellar()\r\n    if (jd instanceof Date) {\r\n      jd = new _julian_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Calendar().fromDate(jd).toJD()\r\n    }\r\n    this.jd = Math.floor(jd - 0.5) + 0.5 // start at midnight\r\n    this.lat = lat * D2R // convert to radians\r\n    this.lon = lon * D2R\r\n    const cal = new _julian_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Calendar().fromJD(this.jd)\r\n    this.jde = cal.toJDE()\r\n    this.ΔT = _deltat_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].deltaT(cal.toYear())\r\n    this.earth = earth\r\n    this.planet = planet\r\n  }\r\n\r\n  approxTimes () {\r\n    const body = _elliptic_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].position(this.planet, this.earth, this.jde)\r\n    const Th0 = _sidereal_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].apparent0UT(this.jd)\r\n    const rs = approxTimes(\r\n      { lat: this.lat, lon: this.lon }, this.refraction,\r\n      Th0, body.ra, body.dec\r\n    )\r\n    return this._rsToJD(rs)\r\n  }\r\n\r\n  times () {\r\n    const body = [\r\n      _elliptic_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].position(this.planet, this.earth, this.jde - 1),\r\n      _elliptic_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].position(this.planet, this.earth, this.jde),\r\n      _elliptic_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].position(this.planet, this.earth, this.jde + 1)\r\n    ]\r\n    const Th0 = _sidereal_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].apparent0UT(this.jd)\r\n    const rs = times(\r\n      { lat: this.lat, lon: this.lon }, this.ΔT, this.refraction,\r\n      Th0, this._toArr(body, 'ra'), this._toArr(body, 'dec')\r\n    )\r\n    return this._rsToJD(rs)\r\n  }\r\n\r\n  /** @private */\r\n  _toArr (body, p) {\r\n    return body.map((item) => {\r\n      return item[p]\r\n    })\r\n  }\r\n\r\n  /** @private */\r\n  _rsToJD (rs) {\r\n    return {\r\n      rise: this._toJD(rs.rise),\r\n      transit: this._toJD(rs.transit),\r\n      set: this._toJD(rs.set)\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _toJD (secs) {\r\n    const jd = this.jd + secs / 86400\r\n    if (this.opts.date) {\r\n      return new _julian_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Calendar().fromJD(jd).toDate()\r\n    } else {\r\n      return jd\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  errorAboveHorizon,\r\n  errorBelowHorizon,\r\n  meanRefraction,\r\n  stdh0,\r\n  refraction,\r\n  stdh0Stellar,\r\n  Stdh0Stellar,\r\n  stdh0Solar,\r\n  Stdh0Solar,\r\n  stdh0LunarMean,\r\n  Stdh0LunarMean,\r\n  stdh0Lunar,\r\n  Stdh0Lunar,\r\n  hourAngle,\r\n  approxTimes,\r\n  times,\r\n  PlanetRise\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/rise.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/saturnmoons.js":
/*!****************************************************!*\
  !*** ./node_modules/astronomia/src/saturnmoons.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Qs: () => (/* binding */ Qs),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   dione: () => (/* binding */ dione),\n/* harmony export */   enceladus: () => (/* binding */ enceladus),\n/* harmony export */   hyperion: () => (/* binding */ hyperion),\n/* harmony export */   iapetus: () => (/* binding */ iapetus),\n/* harmony export */   mimas: () => (/* binding */ mimas),\n/* harmony export */   positions: () => (/* binding */ positions),\n/* harmony export */   rhea: () => (/* binding */ rhea),\n/* harmony export */   tethys: () => (/* binding */ tethys),\n/* harmony export */   titan: () => (/* binding */ titan)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/* harmony import */ var _precess_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./precess.js */ \"./node_modules/astronomia/src/precess.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module saturnmoons\r\n */\r\n/**\r\n * Saturnmoons: Chapter 46, Positions of the Satellites of Saturn\r\n */\r\n\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n\r\n\r\n// array positions of Saturnmoons returned from positions().\r\nconst mimas = 0\r\nconst enceladus = 1\r\nconst tethys = 2\r\nconst dione = 3\r\nconst rhea = 4\r\nconst titan = 5\r\nconst hyperion = 6\r\nconst iapetus = 7\r\n\r\n/**\r\n * XY holds coordinates returned from positions().\r\n */\r\nfunction XY (x, y) {\r\n  this.x = x\r\n  this.y = y\r\n}\r\n\r\nconst d = Math.PI / 180\r\n\r\n/**\r\n * Positions returns positions of the eight major moons of Saturn.\r\n *\r\n * Results returned in argument pos, which must not be undefined.\r\n *\r\n * Result units are Saturn radii.\r\n *\r\n * @param {number} jde - Julian ephemeris day\r\n * @param {Planet} earth - VSOP87 planet Earth // eslint-disable-line no-unused-vars\r\n * @param {Planet} saturn - VSOP87 planet Saturn // eslint-disable-line no-unused-vars\r\n * @return {XY[]} Array of Moon Positions in `XY`\r\n *   Use `M.mimas ... M.iapetus` to resolve to Moon and its position at `jde`\r\n */\r\nfunction positions (jde, earth, saturn) {\r\n  const sol = _solar_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].trueVSOP87(earth, jde)\r\n  const [s, β, R] = [sol.lon, sol.lat, sol.range]\r\n  const [ss, cs] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(s)\r\n  const sβ = Math.sin(β)\r\n  let Δ = 9.0\r\n  let x\r\n  let y\r\n  let z = 0\r\n  let _jde\r\n\r\n  const f = function () {\r\n    const τ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lightTime(Δ)\r\n    _jde = jde - τ\r\n    const { lon, lat, range } = saturn.position(_jde)\r\n    const fk5 = _planetposition_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].toFK5(lon, lat, _jde) // eslint-disable-line no-unused-vars\r\n    const [l, b] = [fk5.lon, fk5.lat]\r\n    const [sl, cl] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l)\r\n    const [sb, cb] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(b)\r\n    x = range * cb * cl + R * cs\r\n    y = range * cb * sl + R * ss\r\n    z = range * sb + R * sβ\r\n    Δ = Math.sqrt(x * x + y * y + z * z)\r\n  }\r\n  f()\r\n  f()\r\n\r\n  let λ0 = Math.atan2(y, x)\r\n  let β0 = Math.atan(z / Math.hypot(x, y))\r\n  let ecl = new _coord_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Ecliptic(λ0, β0)\r\n  ecl = _precess_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].eclipticPosition(ecl, _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JDEToJulianYear(jde), _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JDEToJulianYear(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B1950))\r\n  λ0 = ecl.lon\r\n  β0 = ecl.lat\r\n  const q = new Qs(_jde)\r\n  const s4 = [\r\n    new R4(), // 0 unused\r\n    q.mimas(),\r\n    q.enceladus(),\r\n    q.tethys(),\r\n    q.dione(),\r\n    q.rhea(),\r\n    q.titan(),\r\n    q.hyperion(),\r\n    q.iapetus()\r\n  ]\r\n\r\n  const X = new Array(9).fill(0)\r\n  const Y = new Array(9).fill(0)\r\n  const Z = new Array(9).fill(0)\r\n  for (let j = 1; j <= 8; j++) {\r\n    const u = s4[j].λ - s4[j].Ω\r\n    const w = s4[j].Ω - 168.8112 * d\r\n    const [su, cu] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u)\r\n    const [sw, cw] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(w)\r\n    const [sγ, cγ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(s4[j].γ)\r\n    const r = s4[j].r\r\n    X[j] = r * (cu * cw - su * cγ * sw)\r\n    Y[j] = r * (su * cw * cγ + cu * sw)\r\n    Z[j] = r * su * sγ\r\n  }\r\n  Z[0] = 1\r\n  const [sλ0, cλ0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(λ0)\r\n  const [sβ0, cβ0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(β0)\r\n  const A = new Array(9).fill(0)\r\n  const B = new Array(9).fill(0)\r\n  const C = new Array(9).fill(0)\r\n  for (const j in X) {\r\n    let a = X[j]\r\n    let b = q.c1 * Y[j] - q.s1 * Z[j]\r\n    const c = q.s1 * Y[j] + q.c1 * Z[j]\r\n    const a0 = q.c2 * a - q.s2 * b\r\n    b = q.s2 * a + q.c2 * b\r\n    a = a0\r\n\r\n    A[j] = a * sλ0 - b * cλ0\r\n    b = a * cλ0 + b * sλ0\r\n\r\n    B[j] = b * cβ0 + c * sβ0\r\n    C[j] = c * cβ0 - b * sβ0\r\n  }\r\n\r\n  const pos = new Array(9)\r\n  const D = Math.atan2(A[0], C[0])\r\n  const [sD, cD] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(D)\r\n  for (let j = 1; j <= 8; j++) {\r\n    X[j] = A[j] * cD - C[j] * sD\r\n    Y[j] = A[j] * sD + C[j] * cD\r\n    Z[j] = B[j]\r\n    const d = X[j] / s4[j].r\r\n    X[j] += Math.abs(Z[j]) / k[j] * Math.sqrt(1 - d * d)\r\n    const W = Δ / (Δ + Z[j] / 2475)\r\n    pos[j - 1] = new XY(X[j] * W, Y[j] * W)\r\n  }\r\n  return pos\r\n}\r\n\r\nconst k = [0, 20947, 23715, 26382, 29876, 35313, 53800, 59222, 91820]\r\n\r\nfunction R4 (λ, r, γ, Ω) {\r\n  this.λ = λ || 0\r\n  this.r = r || 0\r\n  this.γ = γ || 0\r\n  this.Ω = Ω || 0\r\n}\r\n\r\nfunction Qs (jde) {\r\n  this.t1 = jde - 2411093\r\n  this.t2 = this.t1 / 365.25\r\n  this.t3 = (jde - 2433282.423) / 365.25 + 1950\r\n  this.t4 = jde - 2411368\r\n  this.t5 = this.t4 / 365.25\r\n  this.t6 = jde - 2415020\r\n  this.t7 = this.t6 / 36525\r\n  this.t8 = this.t6 / 365.25\r\n  this.t9 = (jde - 2442000.5) / 365.25\r\n  this.t10 = jde - 2409786\r\n  this.t11 = this.t10 / 36525\r\n  this.W0 = 5.095 * d * (this.t3 - 1866.39)\r\n  this.W1 = 74.4 * d + 32.39 * d * this.t2\r\n  this.W2 = 134.3 * d + 92.62 * d * this.t2\r\n  this.W3 = 42 * d - 0.5118 * d * this.t5\r\n  this.W4 = 276.59 * d + 0.5118 * d * this.t5\r\n  this.W5 = 267.2635 * d + 1222.1136 * d * this.t7\r\n  this.W6 = 175.4762 * d + 1221.5515 * d * this.t7\r\n  this.W7 = 2.4891 * d + 0.002435 * d * this.t7\r\n  this.W8 = 113.35 * d - 0.2597 * d * this.t7\r\n  this.s1 = Math.sin(28.0817 * d)\r\n  this.c1 = Math.cos(28.0817 * d)\r\n  this.s2 = Math.sin(168.8112 * d)\r\n  this.c2 = Math.cos(168.8112 * d)\r\n  this.e1 = 0.05589 - 0.000346 * this.t7\r\n  this.sW0 = Math.sin(this.W0)\r\n  this.s3W0 = Math.sin(3 * this.W0)\r\n  this.s5W0 = Math.sin(5 * this.W0)\r\n  this.sW1 = Math.sin(this.W1)\r\n  this.sW2 = Math.sin(this.W2)\r\n  this.sW3 = Math.sin(this.W3)\r\n  this.cW3 = Math.cos(this.W3)\r\n  this.sW4 = Math.sin(this.W4)\r\n  this.cW4 = Math.cos(this.W4)\r\n  this.sW7 = Math.sin(this.W7)\r\n  this.cW7 = Math.cos(this.W7)\r\n  return this\r\n}\r\n\r\nQs.prototype.mimas = function () {\r\n  const r = new R4()\r\n  const L = 127.64 * d + 381.994497 * d * this.t1 -\r\n    43.57 * d * this.sW0 - 0.72 * d * this.s3W0 - 0.02144 * d * this.s5W0\r\n  const p = 106.1 * d + 365.549 * d * this.t2\r\n  const M = L - p\r\n  const C = 2.18287 * d * Math.sin(M) +\r\n    0.025988 * d * Math.sin(2 * M) + 0.00043 * d * Math.sin(3 * M)\r\n  r.λ = L + C\r\n  r.r = 3.06879 / (1 + 0.01905 * Math.cos(M + C))\r\n  r.γ = 1.563 * d\r\n  r.Ω = 54.5 * d - 365.072 * d * this.t2\r\n  return r\r\n}\r\n\r\nQs.prototype.enceladus = function () {\r\n  const r = new R4()\r\n  const L = 200.317 * d + 262.7319002 * d * this.t1 + 0.25667 * d * this.sW1 + 0.20883 * d * this.sW2\r\n  const p = 309.107 * d + 123.44121 * d * this.t2\r\n  const M = L - p\r\n  const C = 0.55577 * d * Math.sin(M) + 0.00168 * d * Math.sin(2 * M)\r\n  r.λ = L + C\r\n  r.r = 3.94118 / (1 + 0.00485 * Math.cos(M + C))\r\n  r.γ = 0.0262 * d\r\n  r.Ω = 348 * d - 151.95 * d * this.t2\r\n  return r\r\n}\r\n\r\nQs.prototype.tethys = function () {\r\n  const r = new R4()\r\n  r.λ = 285.306 * d + 190.69791226 * d * this.t1 +\r\n    2.063 * d * this.sW0 + 0.03409 * d * this.s3W0 + 0.001015 * d * this.s5W0\r\n  r.r = 4.880998\r\n  r.γ = 1.0976 * d\r\n  r.Ω = 111.33 * d - 72.2441 * d * this.t2\r\n  return r\r\n}\r\n\r\nQs.prototype.dione = function () {\r\n  const r = new R4()\r\n  const L = 254.712 * d + 131.53493193 * d * this.t1 - 0.0215 * d * this.sW1 - 0.01733 * d * this.sW2\r\n  const p = 174.8 * d + 30.82 * d * this.t2\r\n  const M = L - p\r\n  const C = 0.24717 * d * Math.sin(M) + 0.00033 * d * Math.sin(2 * M)\r\n  r.λ = L + C\r\n  r.r = 6.24871 / (1 + 0.002157 * Math.cos(M + C))\r\n  r.γ = 0.0139 * d\r\n  r.Ω = 232 * d - 30.27 * d * this.t2\r\n  return r\r\n}\r\n\r\nQs.prototype.rhea = function () {\r\n  const pʹ = 342.7 * d + 10.057 * d * this.t2\r\n  const [spʹ, cpʹ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(pʹ)\r\n  const a1 = 0.000265 * spʹ + 0.001 * this.sW4\r\n  const a2 = 0.000265 * cpʹ + 0.001 * this.cW4\r\n  const e = Math.hypot(a1, a2)\r\n  const p = Math.atan2(a1, a2)\r\n  const N = 345 * d - 10.057 * d * this.t2\r\n  const [sN, cN] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(N)\r\n  const λʹ = 359.244 * d + 79.6900472 * d * this.t1 + 0.086754 * d * sN\r\n  const i = 28.0362 * d + 0.346898 * d * cN + 0.0193 * d * this.cW3\r\n  const Ω = 168.8034 * d + 0.736936 * d * sN + 0.041 * d * this.sW3\r\n  const a = 8.725924\r\n  return this.subr(λʹ, p, e, a, Ω, i)\r\n}\r\n\r\nQs.prototype.subr = function (λʹ, p, e, a, Ω, i) {\r\n  const r = new R4()\r\n  const M = λʹ - p\r\n  const e2 = e * e\r\n  const e3 = e2 * e\r\n  const e4 = e2 * e2\r\n  const e5 = e3 * e2\r\n  const C = (2 * e - 0.25 * e3 + 0.0520833333 * e5) * Math.sin(M) +\r\n    (1.25 * e2 - 0.458333333 * e4) * Math.sin(2 * M) +\r\n    (1.083333333 * e3 - 0.671875 * e5) * Math.sin(3 * M) +\r\n    1.072917 * e4 * Math.sin(4 * M) + 1.142708 * e5 * Math.sin(5 * M)\r\n  r.r = a * (1 - e2) / (1 + e * Math.cos(M + C)) // return value\r\n  const g = Ω - 168.8112 * d\r\n  const [si, ci] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(i)\r\n  const [sg, cg] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(g)\r\n  const a1 = si * sg\r\n  const a2 = this.c1 * si * cg - this.s1 * ci\r\n  r.γ = Math.asin(Math.hypot(a1, a2)) // return value\r\n  const u = Math.atan2(a1, a2)\r\n  r.Ω = 168.8112 * d + u // return value (w)\r\n  const h = this.c1 * si - this.s1 * ci * cg\r\n  const ψ = Math.atan2(this.s1 * sg, h)\r\n  r.λ = λʹ + C + u - g - ψ // return value\r\n  return r\r\n}\r\n\r\nQs.prototype.titan = function () {\r\n  const L = 261.1582 * d + 22.57697855 * d * this.t4 + 0.074025 * d * this.sW3\r\n  const iʹ = 27.45141 * d + 0.295999 * d * this.cW3\r\n  const Ωʹ = 168.66925 * d + 0.628808 * d * this.sW3\r\n  const [siʹ, ciʹ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(iʹ)\r\n  const [sΩʹW8, cΩʹW8] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(Ωʹ - this.W8)\r\n  const a1 = this.sW7 * sΩʹW8\r\n  const a2 = this.cW7 * siʹ - this.sW7 * ciʹ * cΩʹW8\r\n  const g0 = 102.8623 * d\r\n  const ψ = Math.atan2(a1, a2)\r\n  const s = Math.hypot(a1, a2)\r\n  let g = this.W4 - Ωʹ - ψ\r\n  let ϖ = 0\r\n  const [s2g0, c2g0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * g0)\r\n  const f = () => {\r\n    ϖ = this.W4 + 0.37515 * d * (Math.sin(2 * g) - s2g0)\r\n    g = ϖ - Ωʹ - ψ\r\n  }\r\n  f()\r\n  f()\r\n  f()\r\n  const eʹ = 0.029092 + 0.00019048 * (Math.cos(2 * g) - c2g0)\r\n  const qq = 2 * (this.W5 - ϖ)\r\n  const b1 = siʹ * sΩʹW8\r\n  const b2 = this.cW7 * siʹ * cΩʹW8 - this.sW7 * ciʹ\r\n  const θ = Math.atan2(b1, b2) + this.W8\r\n  const [sq, cq] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(qq)\r\n  const e = eʹ + 0.002778797 * eʹ * cq\r\n  const p = ϖ + 0.159215 * d * sq\r\n  const u = 2 * this.W5 - 2 * θ + ψ\r\n  const [su, cu] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u)\r\n  const h = 0.9375 * eʹ * eʹ * sq + 0.1875 * s * s * Math.sin(2 * (this.W5 - θ))\r\n  const λʹ = L - 0.254744 * d *\r\n    (this.e1 * Math.sin(this.W6) + 0.75 * this.e1 * this.e1 * Math.sin(2 * this.W6) + h)\r\n  const i = iʹ + 0.031843 * d * s * cu\r\n  const Ω = Ωʹ + 0.031843 * d * s * su / siʹ\r\n  const a = 20.216193\r\n  return this.subr(λʹ, p, e, a, Ω, i)\r\n}\r\n\r\nQs.prototype.hyperion = function () {\r\n  const η = 92.39 * d + 0.5621071 * d * this.t6\r\n  const ζ = 148.19 * d - 19.18 * d * this.t8\r\n  const θ = 184.8 * d - 35.41 * d * this.t9\r\n  const θʹ = θ - 7.5 * d\r\n  const as = 176 * d + 12.22 * d * this.t8\r\n  const bs = 8 * d + 24.44 * d * this.t8\r\n  const cs = bs + 5 * d\r\n  const ϖ = 69.898 * d - 18.67088 * d * this.t8\r\n  const φ = 2 * (ϖ - this.W5)\r\n  const χ = 94.9 * d - 2.292 * d * this.t8\r\n  const [sη, cη] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(η)\r\n  const [sζ, cζ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ζ)\r\n  const [s2ζ, c2ζ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * ζ)\r\n  const [s3ζ, c3ζ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(3 * ζ)\r\n  const [sζpη, cζpη] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ζ + η)\r\n  const [sζmη, cζmη] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ζ - η)\r\n  const [sφ, cφ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(φ)\r\n  const [sχ, cχ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(χ)\r\n  const [scs, ccs] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(cs)\r\n  const a = 24.50601 - 0.08686 * cη - 0.00166 * cζpη + 0.00175 * cζmη\r\n  const e = 0.103458 - 0.004099 * cη - 0.000167 * cζpη + 0.000235 * cζmη +\r\n    0.02303 * cζ - 0.00212 * c2ζ + 0.000151 * c3ζ + 0.00013 * cφ\r\n  const p = ϖ + 0.15648 * d * sχ - 0.4457 * d * sη - 0.2657 * d * sζpη - 0.3573 * d * sζmη -\r\n    12.872 * d * sζ + 1.668 * d * s2ζ - 0.2419 * d * s3ζ - 0.07 * d * sφ\r\n  const λʹ = 177.047 * d + 16.91993829 * d * this.t6 + 0.15648 * d * sχ + 9.142 * d * sη +\r\n    0.007 * d * Math.sin(2 * η) - 0.014 * d * Math.sin(3 * η) + 0.2275 * d * sζpη +\r\n    0.2112 * d * sζmη - 0.26 * d * sζ - 0.0098 * d * s2ζ -\r\n    0.013 * d * Math.sin(as) + 0.017 * d * Math.sin(bs) - 0.0303 * d * sφ\r\n  const i = 27.3347 * d + 0.6434886 * d * cχ + 0.315 * d * this.cW3 + 0.018 * d * Math.cos(θ) -\r\n    0.018 * d * ccs\r\n  const Ω = 168.6812 * d + 1.40136 * d * cχ + 0.68599 * d * this.sW3 - 0.0392 * d * scs +\r\n    0.0366 * d * Math.sin(θʹ)\r\n  return this.subr(λʹ, p, e, a, Ω, i)\r\n}\r\n\r\nQs.prototype.iapetus = function () {\r\n  const L = 261.1582 * d + 22.57697855 * d * this.t4\r\n  const ϖʹ = 91.796 * d + 0.562 * d * this.t7\r\n  const ψ = 4.367 * d - 0.195 * d * this.t7\r\n  const θ = 146.819 * d - 3.198 * d * this.t7\r\n  const φ = 60.47 * d + 1.521 * d * this.t7\r\n  const Φ = 205.055 * d - 2.091 * d * this.t7\r\n  const eʹ = 0.028298 + 0.001156 * this.t11\r\n  const ϖ0 = 352.91 * d + 11.71 * d * this.t11\r\n  const μ = 76.3852 * d + 4.53795125 * d * this.t10\r\n  const iʹ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(this.t11, 18.4602 * d, -0.9518 * d, -0.072 * d, 0.0054 * d)\r\n  const Ωʹ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(this.t11, 143.198 * d, -3.919 * d, 0.116 * d, 0.008 * d)\r\n  const l = μ - ϖ0\r\n  const g = ϖ0 - Ωʹ - ψ\r\n  const g1 = ϖ0 - Ωʹ - φ\r\n  const ls = this.W5 - ϖʹ\r\n  const gs = ϖʹ - θ\r\n  const lT = L - this.W4\r\n  const gT = this.W4 - Φ\r\n  const u1 = 2 * (l + g - ls - gs)\r\n  const u2 = l + g1 - lT - gT\r\n  const u3 = l + 2 * (g - ls - gs)\r\n  const u4 = lT + gT - g1\r\n  const u5 = 2 * (ls + gs)\r\n  const [sl, cl] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l)\r\n  const [su1, cu1] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u1)\r\n  const [su2, cu2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u2)\r\n  const [su3, cu3] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u3)\r\n  const [su4, cu4] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u4)\r\n  const [slu2, clu2] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l + u2)\r\n  const [sg1gT, cg1gT] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(g1 - gT)\r\n  const [su52g, cu52g] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u5 - 2 * g)\r\n  const [su5ψ, cu5ψ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u5 + ψ)\r\n  const [su2φ, cu2φ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(u2 + φ)\r\n  const [s5, c5] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l + g1 + lT + gT + φ)\r\n  const a = 58.935028 + 0.004638 * cu1 + 0.058222 * cu2\r\n  const e = eʹ - 0.0014097 * cg1gT + 0.0003733 * cu52g +\r\n    0.000118 * cu3 + 0.0002408 * cl + 0.0002849 * clu2 + 0.000619 * cu4\r\n  const w = 0.08077 * d * sg1gT + 0.02139 * d * su52g - 0.00676 * d * su3 +\r\n    0.0138 * d * sl + 0.01632 * d * slu2 + 0.03547 * d * su4\r\n  const p = ϖ0 + w / eʹ\r\n  const λʹ = μ - 0.04299 * d * su2 - 0.00789 * d * su1 - 0.06312 * d * Math.sin(ls) -\r\n    0.00295 * d * Math.sin(2 * ls) - 0.02231 * d * Math.sin(u5) + 0.0065 * d * su5ψ\r\n  const i = iʹ + 0.04204 * d * cu5ψ + 0.00235 * d * c5 + 0.0036 * d * cu2φ\r\n  const wʹ = 0.04204 * d * su5ψ + 0.00235 * d * s5 + 0.00358 * d * su2φ\r\n  const Ω = Ωʹ + wʹ / Math.sin(iʹ)\r\n  return this.subr(λʹ, p, e, a, Ω, i)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  mimas,\r\n  enceladus,\r\n  tethys,\r\n  dione,\r\n  rhea,\r\n  titan,\r\n  hyperion,\r\n  iapetus,\r\n  positions,\r\n  Qs\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/saturnmoons.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/saturnring.js":
/*!***************************************************!*\
  !*** ./node_modules/astronomia/src/saturnring.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   ring: () => (/* binding */ ring),\n/* harmony export */   ub: () => (/* binding */ ub)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module saturnring\r\n */\r\n/**\r\n * Saturnrings: Chapter 45, The Ring of Saturn\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Ring computes quantities of the ring of Saturn.\r\n *\r\n *  B  Saturnicentric latitude of the Earth referred to the plane of the ring.\r\n *  Bʹ  Saturnicentric latitude of the Sun referred to the plane of the ring.\r\n *  ΔU  Difference between Saturnicentric longitudes of the Sun and the Earth.\r\n *  P  Geometric position angle of the northern semiminor axis of the ring.\r\n *  aEdge  Major axis of the out edge of the outer ring.\r\n *  bEdge  Minor axis of the out edge of the outer ring.\r\n *\r\n * All results in radians.\r\n */\r\nfunction ring (jde, earth, saturn) { // (jde float64, earth, saturn *pp.V87Planet)  (B, Bʹ, ΔU, P, aEdge, bEdge float64)\r\n  const [f1, f2] = cl(jde, earth, saturn)\r\n  const [ΔU, B] = f1()\r\n  const [Bʹ, P, aEdge, bEdge] = f2()\r\n  return [B, Bʹ, ΔU, P, aEdge, bEdge]\r\n}\r\n\r\n/**\r\n * UB computes quantities required by illum.Saturn().\r\n *\r\n * Same as ΔU and B returned by Ring().  Results in radians.\r\n */\r\nfunction ub (jde, earth, saturn) { // (jde float64, earth, saturn *pp.V87Planet)  (ΔU, B float64)\r\n  const [f1, f2] = cl(jde, earth, saturn) // eslint-disable-line no-unused-vars\r\n  return f1()\r\n}\r\n\r\n/**\r\n * cl splits the work into two closures.\r\n */\r\nfunction cl (jde, earth, saturn) { // (jde float64, earth, saturn *pp.V87Planet)  (f1 func() (ΔU, B float64),\r\n  // f2 func() (Bʹ, P, aEdge, bEdge float64))\r\n  const p = Math.PI / 180\r\n  let i, Ω\r\n  let l0, b0, R\r\n  let Δ = 9.0\r\n  let λ, β\r\n  let si, ci, sβ, cβ, sB\r\n  let sbʹ, cbʹ, slʹΩ, clʹΩ\r\n  const f1 = function () { // (ΔU, B float64)\r\n    // (45.1), p. 318\r\n    const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n    i = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 28.075216 * p, -0.012998 * p, 0.000004 * p)\r\n    Ω = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 169.50847 * p, 1.394681 * p, 0.000412 * p)\r\n    // Step 2.0\r\n    const earthPos = earth.position(jde)\r\n    R = earthPos.range\r\n    const fk5 = _planetposition_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].toFK5(earthPos.lon, earthPos.lat, jde)\r\n    l0 = fk5.lon\r\n    b0 = fk5.lat\r\n    const [sl0, cl0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l0)\r\n    const sb0 = Math.sin(b0)\r\n    // Steps 3, 4.0\r\n    let l = 0\r\n    let b = 0\r\n    let r = 0\r\n    let x = 0\r\n    let y = 0\r\n    let z = 0\r\n\r\n    const f = function () {\r\n      const τ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lightTime(Δ)\r\n      const saturnPos = saturn.position(jde - τ)\r\n      r = saturnPos.range\r\n      const fk5 = _planetposition_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].toFK5(saturnPos.lon, saturnPos.lat, jde)\r\n      l = fk5.lon\r\n      b = fk5.lat\r\n      const [sl, cl] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l)\r\n      const [sb, cb] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(b)\r\n      x = r * cb * cl - R * cl0\r\n      y = r * cb * sl - R * sl0\r\n      z = r * sb - R * sb0\r\n      Δ = Math.sqrt(x * x + y * y + z * z)\r\n    }\r\n    f()\r\n    f()\r\n    // Step 5.0\r\n    λ = Math.atan2(y, x)\r\n    β = Math.atan(z / Math.hypot(x, y))\r\n    // First part of step 6.0\r\n    si = Math.sin(i)\r\n    ci = Math.cos(i)\r\n    sβ = Math.sin(β)\r\n    cβ = Math.cos(β)\r\n    sB = si * cβ * Math.sin(λ - Ω) - ci * sβ\r\n    const B = Math.asin(sB) // return value\r\n    // Step 7.0\r\n    const N = 113.6655 * p + 0.8771 * p * T\r\n    const lʹ = l - 0.01759 * p / r\r\n    const bʹ = b - 0.000764 * p * Math.cos(l - N) / r\r\n    // Setup for steps 8, 9.0\r\n    sbʹ = Math.sin(bʹ)\r\n    cbʹ = Math.cos(bʹ)\r\n    slʹΩ = Math.sin(lʹ - Ω)\r\n    clʹΩ = Math.cos(lʹ - Ω)\r\n    // Step 9.0\r\n    const [sλΩ, cλΩ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(λ - Ω)\r\n    const U1 = Math.atan2(si * sbʹ + ci * cbʹ * slʹΩ, cbʹ * clʹΩ)\r\n    const U2 = Math.atan2(si * sβ + ci * cβ * sλΩ, cβ * cλΩ)\r\n    const ΔU = Math.abs(U1 - U2) // return value\r\n    return [ΔU, B]\r\n  }\r\n  const f2 = function () { // (Bʹ, P, aEdge, bEdge) {\r\n    // Remainder of step 6.0\r\n    const aEdge = 375.35 / 3600 * p / Δ // return value\r\n    const bEdge = aEdge * Math.abs(sB) // return value\r\n    // Step 8.0\r\n    const sBʹ = si * cbʹ * slʹΩ - ci * sbʹ\r\n    const Bʹ = Math.asin(sBʹ) // return value\r\n    // Step 10.0\r\n    const [Δψ, Δε] = _nutation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].nutation(jde)\r\n    const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].meanObliquity(jde) + Δε\r\n    // Step 11.0\r\n    let λ0 = Ω - Math.PI / 2\r\n    const β0 = Math.PI / 2 - i\r\n    // Step 12.0\r\n    const [sl0λ, cl0λ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(l0 - λ)\r\n    λ += 0.005693 * p * cl0λ / cβ\r\n    β += 0.005693 * p * sl0λ * sβ\r\n    // Step 13.0\r\n    λ0 += Δψ\r\n    λ += Δψ\r\n    // Step 14.0\r\n    let eq = new _coord_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Ecliptic(λ0, β0).toEquatorial(ε)\r\n    const [α0, δ0] = [eq.ra, eq.dec]\r\n    eq = new _coord_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Ecliptic(λ, β).toEquatorial(ε)\r\n    const [α, δ] = [eq.ra, eq.dec]\r\n    // Step 15.0\r\n    const [sδ0, cδ0] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ0)\r\n    const [sδ, cδ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(δ)\r\n    const [sα0α, cα0α] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(α0 - α)\r\n    const P = Math.atan2(cδ0 * sα0α, sδ0 * cδ - cδ0 * sδ * cα0α) // return value\r\n    return [Bʹ, P, aEdge, bEdge]\r\n  }\r\n  return [f1, f2]\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  ring,\r\n  ub\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/saturnring.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/sexagesimal.js":
/*!****************************************************!*\
  !*** ./node_modules/astronomia/src/sexagesimal.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Angle: () => (/* binding */ Angle),\n/* harmony export */   DMSToDeg: () => (/* binding */ DMSToDeg),\n/* harmony export */   HourAngle: () => (/* binding */ HourAngle),\n/* harmony export */   RA: () => (/* binding */ RA),\n/* harmony export */   Time: () => (/* binding */ Time),\n/* harmony export */   angleFromDeg: () => (/* binding */ angleFromDeg),\n/* harmony export */   angleFromMin: () => (/* binding */ angleFromMin),\n/* harmony export */   angleFromSec: () => (/* binding */ angleFromSec),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   degFromAngle: () => (/* binding */ degFromAngle),\n/* harmony export */   degToDMS: () => (/* binding */ degToDMS),\n/* harmony export */   secFromAngle: () => (/* binding */ secFromAngle),\n/* harmony export */   secFromHourAngle: () => (/* binding */ secFromHourAngle)\n/* harmony export */ });\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module sexagesimal\r\n */\r\n/**\r\n * Sexagesimal functions\r\n */\r\n\r\n/**\r\n * Angle represents a general purpose angle.\r\n * Unit is radians.\r\n */\r\nclass Angle {\r\n  /**\r\n  * constructs a new Angle value from sign, degree, minute, and second\r\n  * components.\r\n  * @param {Number|Boolean} angleOrNeg - angle in radians or sign, true if negative (required to attribute -0°30')\r\n  * __Four arguments__\r\n  * @param {Number} [d] - (int) degree\r\n  * @param {Number} [m] - (int) minute\r\n  * @param {Number} [s] - (float) second\r\n  */\r\n  constructor (angleOrNeg, d, m, s) {\r\n    if (arguments.length === 1) {\r\n      this.angle = Number(angleOrNeg)\r\n    } else {\r\n      this.setDMS(!!angleOrNeg, d, m, s)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * SetDMS sets the value of an FAngle from sign, degree, minute, and second\r\n   * components.\r\n   * The receiver is returned as a convenience.\r\n   * @param {Boolean} neg - sign, true if negative\r\n   * @param {Number} d - (int) degree\r\n   * @param {Number} m - (int) minute\r\n   * @param {Number} s - (float) second\r\n   * @returns {Angle}\r\n   */\r\n  setDMS (neg = false, d = 0, m = 0, s = 0.0) {\r\n    this.angle = (DMSToDeg(neg, d, m, s) * Math.PI / 180)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * sets angle\r\n   * @param {Number} angle - (float) angle in radians\r\n   * @returns {Angle}\r\n   */\r\n  setAngle (angle) {\r\n    this.angle = angle\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Rad returns the angle in radians.\r\n   * @returns {Number} angle in radians\r\n   */\r\n  rad () {\r\n    return this.angle\r\n  }\r\n\r\n  /**\r\n   * Deg returns the angle in degrees.\r\n   * @returns {Number} angle in degree\r\n   */\r\n  deg () {\r\n    return this.angle * 180 / Math.PI\r\n  }\r\n\r\n  /**\r\n   * toDMS converts to parsed sexagesimal angle component.\r\n   */\r\n  toDMS () {\r\n    return degToDMS(this.deg())\r\n  }\r\n\r\n  /**\r\n   * Print angle in degree using `d°m´s.ss″`\r\n   * @param {Number} [precision] - precision of `s.ss`\r\n   * @returns {String}\r\n   */\r\n  toString (precision) {\r\n    let [neg, d, m, s] = this.toDMS()\r\n    s = round(s, precision).toString().replace(/^0\\./, '.')\r\n    const str = (neg ? '-' : '') +\r\n      (d + '°') +\r\n      (m + '′') +\r\n      (s + '″')\r\n    return str\r\n  }\r\n\r\n  /**\r\n   * Print angle in degree using `d°.ff`\r\n   * @param {Number} [precision] - precision of `.ff`\r\n   * @returns {String}\r\n   */\r\n  toDegString (precision) {\r\n    let [i, s] = modf(this.deg())\r\n    s = round(s, precision).toString().replace(/^0\\./, '.')\r\n    const str = (i + '°') + s\r\n    return str\r\n  }\r\n}\r\n\r\n/**\r\n * HourAngle represents an angle corresponding to angular rotation of\r\n * the Earth in a specified time.\r\n *\r\n * Unit is radians.\r\n */\r\nclass HourAngle extends Angle {\r\n  /**\r\n   * NewHourAngle constructs a new HourAngle value from sign, hour, minute,\r\n   * and second components.\r\n   * @param {Boolean} neg\r\n   * @param {Number} h - (int)\r\n   * @param {Number} m - (int)\r\n   * @param {Number} s - (float)\r\n   * @constructor\r\n   */\r\n\r\n  /**\r\n   * SetDMS sets the value of an FAngle from sign, degree, minute, and second\r\n   * components.\r\n   * The receiver is returned as a convenience.\r\n   * @param {Boolean} neg - sign, true if negative\r\n   * @param {Number} h - (int) hour\r\n   * @param {Number} m - (int) minute\r\n   * @param {Number} s - (float) second\r\n   * @returns {Angle}\r\n   */\r\n  setDMS (neg = false, h = 0, m = 0, s = 0.0) {\r\n    this.angle = (DMSToDeg(neg, h, m, s) * 15 * Math.PI / 180)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Hour returns the hour angle as hours of time.\r\n   * @returns hour angle\r\n   */\r\n  hour () {\r\n    return this.angle * 12 / Math.PI // 12 = 180 / 15\r\n  }\r\n\r\n  deg () {\r\n    return this.hour()\r\n  }\r\n\r\n  /**\r\n   * Print angle in `HʰMᵐs.ssˢ`\r\n   * @param {Number} precision - precision of `s.ss`\r\n   * @returns {String}\r\n   */\r\n  toString (precision) {\r\n    let [neg, h, m, s] = this.toDMS()\r\n    s = round(s, precision).toString().replace(/^0\\./, '.')\r\n    const str = (neg ? '-' : '') +\r\n      (h + 'ʰ') +\r\n      (m + 'ᵐ') +\r\n      (s + 'ˢ')\r\n    return str\r\n  }\r\n}\r\n\r\n/**\r\n * DMSToDeg converts from parsed sexagesimal angle components to decimal\r\n * degrees.\r\n * @param {Boolean} neg - sign, true if negative\r\n * @param {Number} d - (int) degree\r\n * @param {Number} m - (int) minute\r\n * @param {Number} s - (float) second\r\n * @returns {Number} angle in degree\r\n */\r\nfunction DMSToDeg (neg, d, m, s) {\r\n  s = (((d * 60 + m) * 60) + s) / 3600\r\n  if (neg) {\r\n    return -s\r\n  }\r\n  return s\r\n}\r\n\r\n/**\r\n * DegToDMS converts from decimal degrees to parsed sexagesimal angle component.\r\n * @param {Number} deg - angle in degree\r\n * @returns {Array} [neg, d, m, s]\r\n *  {Boolean} neg - sign, true if negative\r\n *  {Number} d - (int) degree\r\n *  {Number} m - (int) minute\r\n *  {Number} s - (float) second\r\n */\r\nfunction degToDMS (deg) {\r\n  const neg = (deg < 0)\r\n  deg = Math.abs(deg)\r\n  let [d, s] = modf(deg % 360)\r\n  const [m, s1] = modf(s * 60)\r\n  s = round(s1 * 60) // may introduce an error < 1e13\r\n  return [neg, d, m, s]\r\n}\r\n\r\nclass RA extends HourAngle {\r\n  /**\r\n   * constructs a new RA value from hour, minute, and second components.\r\n   * Negative values are not supported, RA wraps values larger than 24\r\n   * to the range [0,24) hours.\r\n   * @param {Number} h - (int) hour\r\n   * @param {Number} m - (int) minute\r\n   * @param {Number} s - (float) second\r\n   */\r\n  constructor (h = 0, m = 0, s = 0) {\r\n    super(false, h, m, s)\r\n    const args = [].slice.call(arguments)\r\n    if (args.length === 1) {\r\n      this.angle = h\r\n    } else {\r\n      const hr = DMSToDeg(false, h, m, s) % 24\r\n      this.angle = hr * 15 * Math.PI / 180\r\n    }\r\n  }\r\n\r\n  hour () {\r\n    const h = this.angle * 12 / Math.PI\r\n    return (24 + (h % 24)) % 24\r\n  }\r\n}\r\n\r\n/**\r\n * Time Angle\r\n * Unit is time in seconds.\r\n */\r\nclass Time {\r\n  /**\r\n   * @param {boolean|number} negOrTimeInSecs - set `true` if negative; if type is number than time in seconds\r\n   * @param {number} [h] - (int) hour\r\n   * @param {number} [m] - (int) minute\r\n   * @param {number} [s] - (float) second\r\n   * @example\r\n   * new sexa.Time(SECS_OF_DAY)\r\n   * new sexa.Time(false, 15, 22, 7)\r\n   */\r\n  constructor (negOrTimeInSecs, h, m, s) {\r\n    if (typeof negOrTimeInSecs === 'number') {\r\n      this.time = negOrTimeInSecs\r\n    } else {\r\n      this.setHMS(negOrTimeInSecs, h, m, s)\r\n    }\r\n  }\r\n\r\n  setHMS (neg = false, h = 0, m = 0, s = 0) {\r\n    s += ((h * 60 + m) * 60)\r\n    if (neg) {\r\n      s = -s\r\n    }\r\n    this.time = s\r\n  }\r\n\r\n  /**\r\n   * @returns {Number} time in seconds.\r\n   */\r\n  sec () {\r\n    return this.time\r\n  }\r\n\r\n  /**\r\n   * @returns {Number} time in minutes.\r\n   */\r\n  min () {\r\n    return this.time / 60\r\n  }\r\n\r\n  /**\r\n   * @returns {Number} time in hours.\r\n   */\r\n  hour () {\r\n    return this.time / 3600\r\n  }\r\n\r\n  /**\r\n   * @returns {Number} time in days.\r\n   */\r\n  day () {\r\n    return this.time / 3600 / 24\r\n  }\r\n\r\n  /**\r\n   * @returns {Number} time in radians, where 1 day = 2 Pi radians.\r\n   */\r\n  rad () {\r\n    return this.time * Math.PI / 12 / 3600\r\n  }\r\n\r\n  /**\r\n   * convert time to HMS\r\n   * @returns {Array} [neg, h, m, s]\r\n   *  {Boolean} neg - sign, true if negative\r\n   *  {Number} h - (int) hour\r\n   *  {Number} m - (int) minute\r\n   *  {Number} s - (float) second\r\n   */\r\n  toHMS () {\r\n    let t = this.time\r\n    const neg = (t < 0)\r\n    t = (neg ? -t : t)\r\n    const h = Math.trunc(t / 3600)\r\n    t = t - (h * 3600)\r\n    const m = Math.trunc(t / 60)\r\n    const s = t - (m * 60)\r\n    return [neg, h, m, s]\r\n  }\r\n\r\n  /**\r\n   * Print time using `HʰMᵐsˢ.ss`\r\n   * @param {Number} precision - precision of `.ss`\r\n   * @returns {String}\r\n   */\r\n  toString (precision) {\r\n    const [neg, h, m, s] = this.toHMS()\r\n    let [si, sf] = modf(s)\r\n    if (precision === 0) {\r\n      si = round(s, 0)\r\n      sf = 0\r\n    } else {\r\n      sf = round(sf, precision).toString().substr(1)\r\n    }\r\n    const str = (neg ? '-' : '') +\r\n      (h + 'ʰ') +\r\n      (m + 'ᵐ') +\r\n      (si + 'ˢ') +\r\n      (sf || '')\r\n    return str\r\n  }\r\n}\r\n\r\n// units\r\nconst angleFromDeg = (deg) => deg * Math.PI / 180\r\nconst angleFromMin = (min) => min / 60 * Math.PI / 180\r\nconst angleFromSec = (sec) => sec / 3600 * Math.PI / 180\r\nconst degFromAngle = (angle) => angle * 180 / Math.PI\r\nconst secFromAngle = (angle) => angle * 3600 * 180 / Math.PI\r\nconst secFromHourAngle = (ha) => ha * 240 * 180 / Math.PI\r\n\r\n/**\r\n * separate fix `i` from fraction `f`\r\n * @private\r\n * @param {Number} float\r\n * @returns {Array} [i, f]\r\n *  {Number} i - (int) fix value\r\n *  {Number} f - (float) fractional portion; always > 1\r\n */\r\nfunction modf (float) {\r\n  const i = Math.trunc(float)\r\n  const f = Math.abs(float - i)\r\n  return [i, f]\r\n}\r\n\r\n/**\r\n * Rounds `float` value by precision\r\n * @private\r\n * @param {Number} float - value to round\r\n * @param {Number} [precision] - (int) number of post decimal positions\r\n * @return {Number} rounded `float`\r\n */\r\nfunction round (float, precision = 10) {\r\n  return parseFloat(float.toFixed(precision))\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  Angle,\r\n  HourAngle,\r\n  DMSToDeg,\r\n  degToDMS,\r\n  RA,\r\n  Time,\r\n  angleFromDeg,\r\n  angleFromMin,\r\n  angleFromSec,\r\n  degFromAngle,\r\n  secFromAngle,\r\n  secFromHourAngle\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/sexagesimal.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/sidereal.js":
/*!*************************************************!*\
  !*** ./node_modules/astronomia/src/sidereal.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JDToCFrac: () => (/* binding */ JDToCFrac),\n/* harmony export */   apparent: () => (/* binding */ apparent),\n/* harmony export */   apparent0UT: () => (/* binding */ apparent0UT),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   iau82: () => (/* binding */ iau82),\n/* harmony export */   mean: () => (/* binding */ mean),\n/* harmony export */   mean0UT: () => (/* binding */ mean0UT)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module sidereal\r\n */\r\n/**\r\n * Sidereal: Chapter 12, Sidereal Time at Greenwich.\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * JDToCFrac returns values for use in computing sidereal time at Greenwich.\r\n *\r\n * Cen is centuries from J2000 of the JD at 0h UT of argument jd.  This is\r\n * the value to use for evaluating the IAU sidereal time polynomial.\r\n * DayFrac is the fraction of jd after 0h UT.  It is used to compute the\r\n * final value of sidereal time.\r\n *\r\n * @param {number} jd - Julian Days\r\n * @return {number[]} [century, fraction] century and fraction of jd after 0h UT\r\n */\r\nfunction JDToCFrac (jd) {\r\n  const [j0, f] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(jd + 0.5)\r\n  return [_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(j0 - 0.5), f] // (cen, dayFrac /* float */)\r\n}\r\n\r\n/**\r\n * iau82 is a polynomial giving mean sidereal time at Greenwich at 0h UT.\r\n *\r\n * The polynomial is in centuries from J2000.0, as given by JDToCFrac.\r\n * Coefficients are those adopted in 1982 by the International Astronomical\r\n * Union and are given in (12.2) p. 87.\r\n */\r\nconst iau82 = [24110.54841, 8640184.812866, 0.093104, -0.0000062]\r\n\r\n/**\r\n * Mean returns mean sidereal time at Greenwich for a given JD.\r\n *\r\n * Computation is by IAU 1982 coefficients.  The result is in seconds of\r\n * time and is in the range [0,86400).\r\n *\r\n * @param {number} jd - Julian Days\r\n * @return {number}\r\n */\r\nfunction mean (jd) {\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(_mean(jd), 86400)\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction _mean (jd) {\r\n  const [s, f] = _mean0UT(jd)\r\n  return s + f * 1.00273790935 * 86400\r\n}\r\n\r\n/**\r\n * Mean0UT returns mean sidereal time at Greenwich at 0h UT on the given JD.\r\n *\r\n * The result is in seconds of time and is in the range [0,86400).\r\n *\r\n * @param {number} jd - Julian Days\r\n * @return {number}\r\n */\r\nfunction mean0UT (jd /* float */) {\r\n  const [s, _] = _mean0UT(jd) // eslint-disable-line\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(s, 86400)\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction _mean0UT (jd /* float */) {\r\n  const [cen, f] = JDToCFrac(jd)\r\n  // (12.2) p. 87\r\n  return [_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(cen, ...iau82), f] // (sidereal, dayFrac /* float */)\r\n}\r\n\r\n/**\r\n * Apparent returns apparent sidereal time at Greenwich for the given JD.\r\n *\r\n * Apparent is mean plus the nutation in right ascension.\r\n *\r\n * The result is in seconds of time and is in the range [0,86400).\r\n *\r\n * @param {number} jd - Julian Days\r\n * @return {number}\r\n */\r\nfunction apparent (jd) {\r\n  const s = _mean(jd) // seconds of time\r\n  const n = _nutation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].nutationInRA(jd) // angle (radians) of RA\r\n  const ns = n * 3600 * 180 / Math.PI / 15 // convert RA to time in seconds\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(s + ns, 86400)\r\n}\r\n\r\n/**\r\n * Apparent0UT returns apparent sidereal time at Greenwich at 0h UT\r\n * on the given JD.\r\n *\r\n * The result is in seconds of time and is in the range [0,86400).\r\n *\r\n * @param {number} jd - Julian Days\r\n * @return {number}\r\n */\r\nfunction apparent0UT (jd) {\r\n  const [j0, f] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].modf(jd + 0.5)\r\n  const cen = (j0 - 0.5 - _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000) / 36525\r\n  const s = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(cen, ...iau82) + f * 1.00273790935 * 86400\r\n  const n = _nutation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].nutationInRA(j0) // angle (radians) of RA\r\n  const ns = n * 3600 * 180 / Math.PI / 15 // convert RA to time in seconds\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(s + ns, 86400)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  JDToCFrac,\r\n  iau82,\r\n  mean,\r\n  mean0UT,\r\n  apparent,\r\n  apparent0UT\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/sidereal.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/solar.js":
/*!**********************************************!*\
  !*** ./node_modules/astronomia/src/solar.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aberration: () => (/* binding */ aberration),\n/* harmony export */   apparentEquatorial: () => (/* binding */ apparentEquatorial),\n/* harmony export */   apparentEquatorialVSOP87: () => (/* binding */ apparentEquatorialVSOP87),\n/* harmony export */   apparentLongitude: () => (/* binding */ apparentLongitude),\n/* harmony export */   apparentVSOP87: () => (/* binding */ apparentVSOP87),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   eccentricity: () => (/* binding */ eccentricity),\n/* harmony export */   meanAnomaly: () => (/* binding */ meanAnomaly),\n/* harmony export */   radius: () => (/* binding */ radius),\n/* harmony export */   true2000: () => (/* binding */ true2000),\n/* harmony export */   trueEquatorial: () => (/* binding */ trueEquatorial),\n/* harmony export */   trueLongitude: () => (/* binding */ trueLongitude),\n/* harmony export */   trueVSOP87: () => (/* binding */ trueVSOP87)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _planetposition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./planetposition.js */ \"./node_modules/astronomia/src/planetposition.js\");\n/* harmony import */ var _coord_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./coord.js */ \"./node_modules/astronomia/src/coord.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module solar\r\n */\r\n/**\r\n * Solar: Chapter 25, Solar Coordinates.\r\n *\r\n * Partial implementation:\r\n *\r\n * 1. Higher accuracy positions are not computed with Appendix III but with\r\n * full VSOP87 as implemented in package planetposition.\r\n *\r\n * 2. Higher accuracy correction for aberration (using the formula for\r\n * variation Δλ on p. 168) is not implemented.  Results for example 25.b\r\n * already match the full VSOP87 values on p. 165 even with the low accuracy\r\n * correction for aberration, thus there are no more significant digits that\r\n * would check a more accurate result.  Also the size of the formula presents\r\n * significant chance of typographical error.\r\n */\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n\r\n\r\n/**\r\n * True returns true geometric longitude and anomaly of the sun referenced to the mean equinox of date.\r\n *\r\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\r\n * @returns {Object}\r\n *   {Number} lon = true geometric longitude, ☉, in radians\r\n *   {Number} ano = true anomaly in radians\r\n */\r\nfunction trueLongitude (T) {\r\n  // (25.2) p. 163\r\n  const L0 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 280.46646, 36000.76983, 0.0003032) *\r\n    Math.PI / 180\r\n  const m = meanAnomaly(T)\r\n  const C = (_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 1.914602, -0.004817, -0.000014) *\r\n    Math.sin(m) +\r\n    (0.019993 - 0.000101 * T) * Math.sin(2 * m) +\r\n    0.000289 * Math.sin(3 * m)) * Math.PI / 180\r\n  const lon = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(L0 + C, 2 * Math.PI)\r\n  const ano = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(m + C, 2 * Math.PI)\r\n  return { lon, ano }\r\n}\r\n\r\n/**\r\n * meanAnomaly returns the mean anomaly of Earth at the given T.\r\n *\r\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\r\n * @returns {Number} Result is in radians and is not normalized to the range 0..2π.\r\n */\r\nfunction meanAnomaly (T) {\r\n  // (25.3) p. 163\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 357.52911, 35999.05029, -0.0001537) * Math.PI / 180\r\n}\r\n\r\n/**\r\n * eccentricity returns eccentricity of the Earth's orbit around the sun.\r\n *\r\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\r\n * @returns {Number} eccentricity of the Earth's orbit around the sun.\r\n */\r\nfunction eccentricity (T) {\r\n  // (25.4) p. 163\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(T, 0.016708634, -0.000042037, -0.0000001267)\r\n}\r\n\r\n/**\r\n * Radius returns the Sun-Earth distance in AU.\r\n *\r\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\r\n * @returns {Number} Sun-Earth distance in AU\r\n */\r\nfunction radius (T) {\r\n  const {lon, ano} = trueLongitude(T) // eslint-disable-line\r\n  const e = eccentricity(T)\r\n  // (25.5) p. 164\r\n  return 1.000001018 * (1 - e * e) / (1 + e * Math.cos(ano))\r\n}\r\n\r\n/**\r\n * ApparentLongitude returns apparent longitude of the Sun referenced to the true equinox of date.\r\n * Result includes correction for nutation and aberration.  Unit is radians.\r\n *\r\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\r\n * @returns {Number} apparent longitude of the Sun referenced to the true equinox of date.\r\n */\r\nfunction apparentLongitude (T) {\r\n  const Ω = node(T)\r\n  const {lon, ano} = trueLongitude(T) // eslint-disable-line\r\n  return lon - 0.00569 * Math.PI / 180 - 0.00478 * Math.PI / 180 * Math.sin(Ω)\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction node (T) {\r\n  return 125.04 * Math.PI / 180 - 1934.136 * Math.PI / 180 * T\r\n}\r\n\r\n/**\r\n * true2000 returns true geometric longitude and anomaly of the sun referenced to equinox J2000.\r\n * Results are accurate to .01 degree for years 1900 to 2100.\r\n *\r\n * @param {Number} T - number of Julian centuries since J2000. See base.J2000Century.\r\n * @returns {Object}\r\n *   {Number} lon - true geometric longitude, ☉, in radians\r\n *   {Number} ano - true anomaly in radians\r\n */\r\nfunction true2000 (T) {\r\n  let { lon, ano } = trueLongitude(T)\r\n  lon -= 0.01397 * Math.PI / 180 * T * 100\r\n  return { lon, ano }\r\n}\r\n\r\n/**\r\n * trueEquatorial returns the true geometric position of the Sun as equatorial coordinates.\r\n *\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Coord}\r\n *   {Number} ra - right ascension in radians\r\n *   {Number} dec - declination in radians\r\n */\r\nfunction trueEquatorial (jde) {\r\n  const {lon, ano} = trueLongitude(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)) // eslint-disable-line\r\n  const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].meanObliquity(jde)\r\n  const [ss, cs] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(lon)\r\n  const [sε, cε] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε)\r\n  // (25.6, 25.7) p. 165\r\n  const ra = Math.atan2(cε * ss, cs)\r\n  const dec = sε * ss\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(ra, dec)\r\n}\r\n\r\n/**\r\n * apparentEquatorial returns the apparent position of the Sun as equatorial coordinates.\r\n *\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Coord}\r\n *   {Number} ra - right ascension in radians\r\n *   {Number} dec - declination in radians\r\n */\r\nfunction apparentEquatorial (jde) {\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde)\r\n  const λ = apparentLongitude(T)\r\n  const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].meanObliquity(jde)\r\n  const [sλ, cλ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(λ)\r\n  // (25.8) p. 165\r\n  const [sε, cε] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ε + 0.00256 * Math.PI / 180 * Math.cos(node(T)))\r\n  const ra = Math.atan2(cε * sλ, cλ)\r\n  const dec = Math.asin(sε * sλ)\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(ra, dec)\r\n}\r\n\r\n/**\r\n * trueVSOP87 returns the true geometric position of the sun as ecliptic coordinates.\r\n *\r\n * Result computed by full VSOP87 theory.  Result is at equator and equinox\r\n * of date in the FK5 frame.  It does not include nutation or aberration.\r\n *\r\n * @param {Planet} planet\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Object}\r\n *   {Number} lon - ecliptic longitude in radians\r\n *   {Number} lat - ecliptic latitude in radians\r\n *   {Number} range - range in AU\r\n */\r\nfunction trueVSOP87 (planet, jde) {\r\n  let { lon, lat, range } = planet.position(jde)\r\n  const s = lon + Math.PI\r\n  // FK5 correction.\r\n  const λp = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(_base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(jde),\r\n    s, -1.397 * Math.PI / 180, -0.00031 * Math.PI / 180)\r\n  const [sλp, cλp] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(λp)\r\n  const Δβ = 0.03916 / 3600 * Math.PI / 180 * (cλp - sλp)\r\n  // (25.9) p. 166\r\n  lon = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(s - 0.09033 / 3600 * Math.PI / 180, 2 * Math.PI)\r\n  lat = Δβ - lat\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(lon, lat, range)\r\n}\r\n\r\n/**\r\n * apparentVSOP87 returns the apparent position of the sun as ecliptic coordinates.\r\n *\r\n * Result computed by VSOP87, at equator and equinox of date in the FK5 frame,\r\n * and includes effects of nutation and aberration.\r\n *\r\n * @param {Planet} planet\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Coord}\r\n *   {Number} lon - ecliptic longitude in radians\r\n *   {Number} lat - ecliptic latitude in radians\r\n *   {Number} range - range in AU\r\n */\r\nfunction apparentVSOP87 (planet, jde) {\r\n  // note: see duplicated code in ApparentEquatorialVSOP87.\r\n  let { lon, lat, range } = trueVSOP87(planet, jde)\r\n  const Δψ = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].nutation(jde)[0]\r\n  const a = aberration(range)\r\n  lon = lon + Δψ + a\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Coord(lon, lat, range)\r\n}\r\n\r\n/**\r\n * apparentEquatorialVSOP87 returns the apparent position of the sun as equatorial coordinates.\r\n *\r\n * Result computed by VSOP87, at equator and equinox of date in the FK5 frame,\r\n * and includes effects of nutation and aberration.\r\n *\r\n * @param {Planet} planet\r\n * @param {Number} jde - Julian ephemeris day\r\n * @returns {Coord}\r\n *   {Number} ra - right ascension in radians\r\n *   {Number} dec - declination in radians\r\n *   {Number} range - range in AU\r\n */\r\nfunction apparentEquatorialVSOP87 (planet, jde) {\r\n  // note: duplicate code from ApparentVSOP87 so we can keep Δε.\r\n  // see also duplicate code in time.E().\r\n  const { lon, lat, range } = trueVSOP87(planet, jde)\r\n  const [Δψ, Δε] = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].nutation(jde)\r\n  const a = aberration(range)\r\n  const λ = lon + Δψ + a\r\n  const ε = _nutation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].meanObliquity(jde) + Δε\r\n  const { ra, dec } = new _coord_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Ecliptic(λ, lat).toEquatorial(ε)\r\n  return new _base_js__WEBPACK_IMPORTED_MODULE_0__.Coord(ra, dec, range)\r\n}\r\n\r\n/**\r\n * Low precision formula.  The high precision formula is not implemented\r\n * because the low precision formula already gives position results to the\r\n * accuracy given on p. 165.  The high precision formula represents lots\r\n * of typing with associated chance of typos, and no way to test the result.\r\n * @param {Number} range\r\n * @returns {Number} aberation\r\n */\r\nfunction aberration (range) {\r\n  // (25.10) p. 167\r\n  return -20.4898 / 3600 * Math.PI / 180 / range\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  trueLongitude,\r\n  true: trueLongitude, // BACKWARDS-COMPATIBILITY\r\n  meanAnomaly,\r\n  eccentricity,\r\n  radius,\r\n  apparentLongitude,\r\n  true2000,\r\n  trueEquatorial,\r\n  apparentEquatorial,\r\n  trueVSOP87,\r\n  apparentVSOP87,\r\n  apparentEquatorialVSOP87,\r\n  aberration\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/solar.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/solardisk.js":
/*!**************************************************!*\
  !*** ./node_modules/astronomia/src/solardisk.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cycle: () => (/* binding */ cycle),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   ephemeris: () => (/* binding */ ephemeris)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module solardisk\r\n */\r\n/**\r\n * Solardisk: Chapter 29, Ephemeris for Physical Observations of the Sun.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Ephemeris returns the apparent orientation of the sun at the given jd.\r\n *\r\n * Results:\r\n *  P:  Position angle of the solar north pole.\r\n *  B0: Heliographic latitude of the center of the solar disk.\r\n *  L0: Heliographic longitude of the center of the solar disk.\r\n *\r\n * All results in radians.\r\n */\r\nfunction ephemeris (jd, earth) { // (jd float64, e *pp.V87Planet)  (P, B0, L0 float64)\r\n  const θ = (jd - 2398220) * 2 * Math.PI / 25.38\r\n  const I = 7.25 * Math.PI / 180\r\n  const K = 73.6667 * Math.PI / 180 +\r\n    1.3958333 * Math.PI / 180 * (jd - 2396758) / _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JulianCentury\r\n\r\n  const solarPos = _solar_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].trueVSOP87(earth, jd)\r\n  const L = solarPos.lon\r\n  const R = solarPos.range\r\n  const [Δψ, Δε] = _nutation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].nutation(jd)\r\n  const ε0 = _nutation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].meanObliquity(jd)\r\n  const ε = ε0 + Δε\r\n  const λ = L - 20.4898 / 3600 * Math.PI / 180 / R\r\n  const λp = λ + Δψ\r\n\r\n  const [sλK, cλK] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(λ - K)\r\n  const [sI, cI] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(I)\r\n\r\n  const tx = -Math.cos(λp) * Math.tan(ε)\r\n  const ty = -cλK * Math.tan(I)\r\n  const P = Math.atan(tx) + Math.atan(ty)\r\n  const B0 = Math.asin(sλK * sI)\r\n  const η = Math.atan2(-sλK * cI, -cλK)\r\n  const L0 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(η - θ, 2 * Math.PI)\r\n  return [P, B0, L0]\r\n}\r\n\r\n/**\r\n * Cycle returns the jd of the start of the given synodic rotation.\r\n *\r\n * Argument c is the \"Carrington\" cycle number.\r\n *\r\n * Result is a dynamical time (not UT).\r\n */\r\nfunction cycle (c) { // (c int)  (jde float64)\r\n  const jde = 2398140.227 + 27.2752316 * c\r\n  const m = 281.96 * Math.PI / 180 + 26.882476 * Math.PI / 180 * c\r\n  const [s2m, c2m] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(2 * m)\r\n  return jde + 0.1454 * Math.sin(m) - 0.0085 * s2m - 0.0141 * c2m\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  ephemeris,\r\n  cycle\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/solardisk.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/solarxyz.js":
/*!*************************************************!*\
  !*** ./node_modules/astronomia/src/solarxyz.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   longitudeJ2000: () => (/* binding */ longitudeJ2000),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   positionB1950: () => (/* binding */ positionB1950),\n/* harmony export */   positionEquinox: () => (/* binding */ positionEquinox),\n/* harmony export */   positionJ2000: () => (/* binding */ positionJ2000),\n/* harmony export */   xyz: () => (/* binding */ xyz)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _nutation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nutation.js */ \"./node_modules/astronomia/src/nutation.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module solarxyz\r\n */\r\n/**\r\n * Solarxyz: Chapter 26, Rectangular Coordinates of the Sun.\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * Position returns rectangular coordinates referenced to the mean equinox of date.\r\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\r\n * @param {Number} jde - Julian ephemeris day\r\n * @return {object} rectangular coordinates\r\n *   {Number} x\r\n *   {Number} y\r\n *   {Number} z\r\n */\r\nfunction position (earth, jde) { // (e *pp.V87Planet, jde float64)  (x, y, z float64)\r\n  // (26.1) p. 171\r\n  const { lon, lat, range } = _solar_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].trueVSOP87(earth, jde)\r\n  const [sε, cε] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(_nutation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].meanObliquity(jde))\r\n  const [ss, cs] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(lon)\r\n  const sβ = Math.sin(lat)\r\n  const x = range * cs\r\n  const y = range * (ss * cε - sβ * sε)\r\n  const z = range * (ss * sε + sβ * cε)\r\n  return { x, y, z }\r\n}\r\n\r\n/**\r\n * LongitudeJ2000 returns geometric longitude referenced to equinox J2000.\r\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\r\n * @param {Number} jde - Julian ephemeris day\r\n * @return {Number} geometric longitude referenced to equinox J2000.\r\n */\r\nfunction longitudeJ2000 (earth, jde) {\r\n  const lon = earth.position2000(jde).lon\r\n  return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(lon + Math.PI - 0.09033 / 3600 * Math.PI / 180, 2 * Math.PI)\r\n}\r\n\r\n/**\r\n * PositionJ2000 returns rectangular coordinates referenced to equinox J2000.\r\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\r\n * @param {Number} jde - Julian ephemeris day\r\n * @return {object} rectangular coordinates\r\n *   {Number} x\r\n *   {Number} y\r\n *   {Number} z\r\n */\r\nfunction positionJ2000 (earth, jde) {\r\n  const { x, y, z } = xyz(earth, jde)\r\n  // (26.3) p. 174\r\n  return {\r\n    x: x + 0.00000044036 * y - 0.000000190919 * z,\r\n    y: -0.000000479966 * x + 0.917482137087 * y - 0.397776982902 * z,\r\n    z: 0.397776982902 * y + 0.917482137087 * z\r\n  }\r\n}\r\n\r\nfunction xyz (earth, jde) {\r\n  const { lon, lat, range } = earth.position2000(jde)\r\n  const s = lon + Math.PI\r\n  const β = -lat\r\n  const [ss, cs] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(s)\r\n  const [sβ, cβ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(β)\r\n  // (26.2) p. 172\r\n  const x = range * cβ * cs\r\n  const y = range * cβ * ss\r\n  const z = range * sβ\r\n  return { x, y, z }\r\n}\r\n\r\n/**\r\n * PositionB1950 returns rectangular coordinates referenced to B1950.\r\n *\r\n * Results are referenced to the mean equator and equinox of the epoch B1950\r\n * in the FK5 system, not FK4.\r\n *\r\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\r\n * @param {Number} jde - Julian ephemeris day\r\n * @return {object} rectangular coordinates\r\n *   {Number} x\r\n *   {Number} y\r\n *   {Number} z\r\n */\r\nfunction positionB1950 (earth, jde) { // (e *pp.V87Planet, jde float64)  (x, y, z float64)\r\n  const { x, y, z } = xyz(earth, jde)\r\n  return {\r\n    x: 0.999925702634 * x + 0.012189716217 * y + 0.000011134016 * z,\r\n    y: -0.011179418036 * x + 0.917413998946 * y - 0.397777041885 * z,\r\n    z: -0.004859003787 * x + 0.397747363646 * y + 0.917482111428 * z\r\n  }\r\n}\r\n\r\nconst ζt = [2306.2181, 0.30188, 0.017998]\r\nconst zt = [2306.2181, 1.09468, 0.018203]\r\nconst θt = [2004.3109, -0.42665, -0.041833]\r\n\r\n/**\r\n * PositionEquinox returns rectangular coordinates referenced to an arbitrary epoch.\r\n *\r\n * Position will be computed for given Julian day \"jde\" but referenced to mean\r\n * equinox \"epoch\" (year).\r\n *\r\n * @param {planetposition.Planet} earth - VSOP87Planet Earth\r\n * @param {Number} jde - Julian ephemeris day\r\n * @param {Number} epoch\r\n * @return {object} rectangular coordinates\r\n *   {Number} x\r\n *   {Number} y\r\n *   {Number} z\r\n */\r\nfunction positionEquinox (earth, jde, epoch) {\r\n  const xyz = positionJ2000(earth, jde)\r\n  const x0 = xyz.x\r\n  const y0 = xyz.y\r\n  const z0 = xyz.z\r\n  const t = (epoch - 2000) * 0.01\r\n  const ζ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, ζt) * t * Math.PI / 180 / 3600\r\n  const z = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, zt) * t * Math.PI / 180 / 3600\r\n  const θ = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(t, θt) * t * Math.PI / 180 / 3600\r\n  const [sζ, cζ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(ζ)\r\n  const [sz, cz] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(z)\r\n  const [sθ, cθ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(θ)\r\n  const xx = cζ * cz * cθ - sζ * sz\r\n  const xy = sζ * cz + cζ * sz * cθ\r\n  const xz = cζ * sθ\r\n  const yx = -cζ * sz - sζ * cz * cθ\r\n  const yy = cζ * cz - sζ * sz * cθ\r\n  const yz = -sζ * sθ\r\n  const zx = -cz * sθ\r\n  const zy = -sz * sθ\r\n  const zz = cθ\r\n  return {\r\n    x: xx * x0 + yx * y0 + zx * z0,\r\n    y: xy * x0 + yy * y0 + zy * z0,\r\n    z: xz * x0 + yz * y0 + zz * z0\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  position,\r\n  longitudeJ2000,\r\n  positionJ2000,\r\n  xyz,\r\n  positionB1950,\r\n  positionEquinox\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/solarxyz.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/solstice.js":
/*!*************************************************!*\
  !*** ./node_modules/astronomia/src/solstice.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   december: () => (/* binding */ december),\n/* harmony export */   december2: () => (/* binding */ december2),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   june: () => (/* binding */ june),\n/* harmony export */   june2: () => (/* binding */ june2),\n/* harmony export */   longitude: () => (/* binding */ longitude),\n/* harmony export */   march: () => (/* binding */ march),\n/* harmony export */   march2: () => (/* binding */ march2),\n/* harmony export */   september: () => (/* binding */ september),\n/* harmony export */   september2: () => (/* binding */ september2)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module solstice\r\n */\r\n/**\r\n * Solstice: Chapter 27: Equinoxes and Solstices.\r\n */\r\n\r\n\r\n\r\nconst { abs, cos, sin } = Math\r\nconst D2R = Math.PI / 180\r\n\r\n// table 27.a - for years from -1000 to +1000\r\nconst mc0 = [1721139.29189, 365242.13740, 0.06134, 0.00111, -0.00071]\r\nconst jc0 = [1721233.25401, 365241.72562, -0.05323, 0.00907, 0.00025]\r\nconst sc0 = [1721325.70455, 365242.49558, -0.11677, -0.00297, 0.00074]\r\nconst dc0 = [1721414.39987, 365242.88257, -0.00769, -0.00933, -0.00006]\r\n\r\n// table 27.b - for years from +1000 to +3000\r\nconst mc2 = [2451623.80984, 365242.37404, 0.05169, -0.00411, -0.00057]\r\nconst jc2 = [2451716.56767, 365241.62603, 0.00325, 0.00888, -0.00030]\r\nconst sc2 = [2451810.21715, 365242.01767, -0.11575, 0.00337, 0.00078]\r\nconst dc2 = [2451900.05952, 365242.74049, -0.06223, -0.00823, 0.00032]\r\n\r\n// table 27.c\r\nconst terms = (function () {\r\n  const term = [\r\n    [485, 324.96, 1934.136],\r\n    [203, 337.23, 32964.467],\r\n    [199, 342.08, 20.186],\r\n    [182, 27.85, 445267.112],\r\n    [156, 73.14, 45036.886],\r\n    [136, 171.52, 22518.443],\r\n    [77, 222.54, 65928.934],\r\n    [74, 296.72, 3034.906],\r\n    [70, 243.58, 9037.513],\r\n    [58, 119.81, 33718.147],\r\n    [52, 297.17, 150.678],\r\n    [50, 21.02, 2281.226],\r\n    [45, 247.54, 29929.562],\r\n    [44, 325.15, 31555.956],\r\n    [29, 60.93, 4443.417],\r\n    [18, 155.12, 67555.328],\r\n    [17, 288.79, 4562.452],\r\n    [16, 198.04, 62894.029],\r\n    [14, 199.76, 31436.921],\r\n    [12, 95.39, 14577.848],\r\n    [12, 287.11, 31931.756],\r\n    [12, 320.81, 34777.259],\r\n    [9, 227.73, 1222.114],\r\n    [8, 15.45, 16859.074]\r\n  ]\r\n  return term.map((t) => {\r\n    return {\r\n      a: t[0],\r\n      b: t[1],\r\n      c: t[2]\r\n    }\r\n  })\r\n})()\r\n\r\n/**\r\n * March returns the JDE of the March equinox for the given year.\r\n *\r\n * Results are valid for the years -1000 to +3000.\r\n *\r\n * Accuracy is within one minute of time for the years 1951-2050.\r\n * @param {Number} y - (int) year\r\n * @returns {Number} JDE\r\n */\r\nfunction march (y) {\r\n  if (y < 1000) {\r\n    return eq(y, mc0)\r\n  }\r\n  return eq(y - 2000, mc2)\r\n}\r\n\r\n/**\r\n * June returns the JDE of the June solstice for the given year.\r\n *\r\n * Results are valid for the years -1000 to +3000.\r\n *\r\n * Accuracy is within one minute of time for the years 1951-2050.\r\n * @param {Number} y - (int) year\r\n * @returns {Number} JDE\r\n */\r\nfunction june (y) {\r\n  if (y < 1000) {\r\n    return eq(y, jc0)\r\n  }\r\n  return eq(y - 2000, jc2)\r\n}\r\n\r\n/**\r\n * September returns the JDE of the September equinox for the given year.\r\n *\r\n * Results are valid for the years -1000 to +3000.\r\n *\r\n * Accuracy is within one minute of time for the years 1951-2050.\r\n * @param {Number} y - (int) year\r\n * @returns {Number} JDE\r\n */\r\nfunction september (y) {\r\n  if (y < 1000) {\r\n    return eq(y, sc0)\r\n  }\r\n  return eq(y - 2000, sc2)\r\n}\r\n\r\n/**\r\n * December returns the JDE of the December solstice for a given year.\r\n *\r\n * Results are valid for the years -1000 to +3000.\r\n *\r\n * Accuracy is within one minute of time for the years 1951-2050.\r\n * @param {Number} y - (int) year\r\n * @returns {Number} JDE\r\n */\r\nfunction december (y) {\r\n  if (y < 1000) {\r\n    return eq(y, dc0)\r\n  }\r\n  return eq(y - 2000, dc2)\r\n}\r\n\r\n/**\r\n * Fast calculation of solstices/ equinoxes\r\n * Accuracy is within one minute of time for the years 1951-2050.\r\n *\r\n * @param {Number} y - (int) year\r\n * @param {Array} c - term from table 27.a / 27.b\r\n * @returns {Number} JDE\r\n */\r\nfunction eq (y, c) {\r\n  const J0 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(y * 0.001, c)\r\n  const T = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].J2000Century(J0)\r\n  const W = 35999.373 * D2R * T - 2.47 * D2R\r\n  const Δλ = 1 + 0.0334 * cos(W) + 0.0007 * cos(2 * W)\r\n  let S = 0\r\n  for (let i = terms.length - 1; i >= 0; i--) {\r\n    const t = terms[i]\r\n    S += t.a * cos((t.b + t.c * T) * D2R)\r\n  }\r\n  return J0 + 0.00001 * S / Δλ\r\n}\r\n\r\n/**\r\n * March2 returns a more accurate JDE of the March equinox.\r\n *\r\n * Result is accurate to one second of time.\r\n *\r\n * @param {Number} year - (int) year\r\n * @param {planetposition.Planet} planet - must be a V87Planet object representing Earth, obtained with\r\n * the package planetposition\r\n * @returns {Number} JDE\r\n */\r\nfunction march2 (year, planet) {\r\n  return longitude(year, planet, 0)\r\n}\r\n\r\n/**\r\n * June2 returns a more accurate JDE of the June solstice.\r\n *\r\n * Result is accurate to one second of time.\r\n *\r\n * @param {Number} year - (int) year\r\n * @param {planetposition.Planet} planet - must be a V87Planet object representing Earth, obtained with\r\n * the package planetposition\r\n * @returns {Number} JDE\r\n */\r\nfunction june2 (year, planet) {\r\n  return longitude(year, planet, Math.PI / 2)\r\n}\r\n\r\n/**\r\n * September2 returns a more accurate JDE of the September equinox.\r\n *\r\n * Result is accurate to one second of time.\r\n *\r\n * @param {Number} year - (int) year\r\n * @param {planetposition.Planet} planet - must be a V87Planet object representing Earth, obtained with\r\n * the package planetposition\r\n * @returns {Number} JDE\r\n */\r\nfunction september2 (year, planet) {\r\n  return longitude(year, planet, Math.PI)\r\n}\r\n\r\n/**\r\n * December2 returns a more accurate JDE of the December solstice.\r\n *\r\n * Result is accurate to one second of time.\r\n *\r\n * @param {Number} year - (int) year\r\n * @param {planetposition.Planet} planet - must be a V87Planet object representing Earth, obtained with\r\n * the package planetposition\r\n * @returns {Number} JDE\r\n */\r\nfunction december2 (year, planet) {\r\n  return longitude(year, planet, Math.PI * 3 / 2)\r\n}\r\n\r\n/**\r\n * Longitude returns the JDE for a given `year`, VSOP87 Planet `planet` at a\r\n * given geocentric solar longitude `lon`\r\n * @param {Number} year - (int)\r\n * @param {planetposition.Planet} planet\r\n * @param {Number} lon - geocentric solar longitude in radians\r\n * @returns {Number} JDE\r\n */\r\nfunction longitude (year, planet, lon) {\r\n  let c\r\n  let ct\r\n\r\n  if (year < 1000) {\r\n    ct = [mc0, jc0, sc0, dc0]\r\n  } else {\r\n    ct = [mc2, jc2, sc2, dc2]\r\n    year -= 2000\r\n  }\r\n\r\n  lon = lon % (Math.PI * 2)\r\n\r\n  if (lon < Math.PI / 2) {\r\n    c = ct[0]\r\n  } else if (lon < Math.PI) {\r\n    c = ct[1]\r\n  } else if (lon < Math.PI * 3 / 2) {\r\n    c = ct[2]\r\n  } else {\r\n    c = ct[3]\r\n  }\r\n\r\n  return eq2(year, planet, lon, c)\r\n}\r\n\r\n/**\r\n  * Accurate calculation of solstices/ equinoxes\r\n  * Result is accurate to one second of time.\r\n  *\r\n  * @param {Number} year - (int) year\r\n  * @param {planetposition.Planet} planet - vsop87 planet\r\n  * @param {Number} lon - longitude in radians\r\n  * @param {Array} c - term from table 27.a / 27.b\r\n  * @returns {Number} JDE\r\n  */\r\nfunction eq2 (year, planet, lon, c) {\r\n  let J0 = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].horner(year * 0.001, c)\r\n\r\n  for (;;) {\r\n    const a = _solar_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].apparentVSOP87(planet, J0)\r\n    const c = 58 * sin(lon - a.lon) // (27.1) p. 180\r\n    J0 += c\r\n    if (abs(c) < 0.000005) {\r\n      break\r\n    }\r\n  }\r\n\r\n  return J0\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  march,\r\n  june,\r\n  september,\r\n  december,\r\n  march2,\r\n  june2,\r\n  september2,\r\n  december2,\r\n  longitude\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/solstice.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/stellar.js":
/*!************************************************!*\
  !*** ./node_modules/astronomia/src/stellar.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   absoluteByDistance: () => (/* binding */ absoluteByDistance),\n/* harmony export */   absoluteByParallax: () => (/* binding */ absoluteByParallax),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   ratio: () => (/* binding */ ratio),\n/* harmony export */   sum: () => (/* binding */ sum),\n/* harmony export */   sumN: () => (/* binding */ sumN)\n/* harmony export */ });\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module stellar\r\n */\r\n/**\r\n * Stellar: Chapter 56, Stellar Magnitudes.\r\n */\r\n\r\n/**\r\n * Sum returns the combined apparent magnitude of two stars.\r\n */\r\nfunction sum (m1, m2) { // (m1, m2 float64)  float64\r\n  const x = 0.4 * (m2 - m1)\r\n  return m2 - 2.5 * Math.log10(Math.pow(10, x) + 1)\r\n}\r\n\r\n/**\r\n * SumN returns the combined apparent magnitude of a number of stars.\r\n */\r\nfunction sumN (m) { // (m ...float64)  float64\r\n  let s = 0\r\n  for (const mi of m) {\r\n    s += Math.pow(10, -0.4 * mi)\r\n  }\r\n  return -2.5 * Math.log10(s)\r\n}\r\n\r\n/**\r\n * Ratio returns the brightness ratio of two stars.\r\n *\r\n * Arguments m1, m2 are apparent magnitudes.\r\n */\r\nfunction ratio (m1, m2) { // (m1, m2 float64)  float64\r\n  const x = 0.4 * (m2 - m1)\r\n  return Math.pow(10, x)\r\n}\r\n\r\n/**\r\n * Difference returns the difference in apparent magnitude of two stars\r\n * given their brightness ratio.\r\n */\r\nfunction difference (ratio) { // (ratio float64)  float64\r\n  return 2.5 * Math.log10(ratio)\r\n}\r\n\r\n/**\r\n * AbsoluteByParallax returns absolute magnitude given annual parallax.\r\n *\r\n * Argument m is apparent magnitude, π is annual parallax in arc seconds.\r\n */\r\nfunction absoluteByParallax (m, π) { // (m, π float64)  float64\r\n  return m + 5 + 5 * Math.log10(π)\r\n}\r\n\r\n/**\r\n * AbsoluteByDistance returns absolute magnitude given distance.\r\n *\r\n * Argument m is apparent magnitude, d is distance in parsecs.\r\n */\r\nfunction absoluteByDistance (m, d) { // (m, d float64)  float64\r\n  return m + 5 - 5 * Math.log10(d)\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  sum,\r\n  sumN,\r\n  ratio,\r\n  difference,\r\n  absoluteByParallax,\r\n  absoluteByDistance\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/stellar.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/sundial.js":
/*!************************************************!*\
  !*** ./node_modules/astronomia/src/sundial.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   equatorial: () => (/* binding */ equatorial),\n/* harmony export */   general: () => (/* binding */ general),\n/* harmony export */   horizontal: () => (/* binding */ horizontal),\n/* harmony export */   vertical: () => (/* binding */ vertical)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/**\r\n * @copyright 2013 Sonia Keys\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module sundial\r\n */\r\n/**\r\n * Sundial: Chapter 58, Calculation of a Planar Sundial.\r\n */\r\n\r\n\r\n\r\n/**\r\n * Point return type represents a point to be used in constructing the sundial.\r\n */\r\nfunction Point (x, y) {\r\n  this.x = x || 0\r\n  this.y = y || 0\r\n}\r\n\r\n/**\r\n * Line holds data to draw an hour line on the sundial.\r\n */\r\nfunction Line (hour, points) {\r\n  this.hour = hour // 0 to 24\r\n  this.points = points || [] // One or more points corresponding to the hour.\r\n}\r\n\r\nconst m = [-23.44, -20.15, -11.47, 0, 11.47, 20.15, 23.44]\r\n\r\n/**\r\n * General computes data for the general case of a planar sundial.\r\n *\r\n * Argument φ is geographic latitude at which the sundial will be located.\r\n * D is gnomonic declination, the azimuth of the perpendicular to the plane\r\n * of the sundial, measured from the southern meridian towards the west.\r\n * Argument a is the length of a straight stylus perpendicular to the plane\r\n * of the sundial, z is zenithal distance of the direction defined by the\r\n * stylus.  Angles φ, D, and z are in radians.  Units of stylus length a\r\n * are arbitrary.\r\n *\r\n * Results consist of a set of lines, a center point, u, the length of a\r\n * polar stylus, and ψ, the angle which the polar stylus makes with the plane\r\n * of the sundial.  The center point, the points defining the hour lines, and\r\n * u are in units of a, the stylus length.  ψ is in radians.\r\n */\r\nfunction general (φ, D, a, z) { // (φ, D, a, z float64)  (lines []Line, center Point, u, ψ float64)\r\n  const [sφ, cφ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(φ)\r\n  const tφ = sφ / cφ\r\n  const [sD, cD] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(D)\r\n  const [sz, cz] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(z)\r\n  const P = sφ * cz - cφ * sz * cD\r\n  const lines = []\r\n  for (let i = 0; i < 24; i++) {\r\n    const l = new Line(i)\r\n    const H = (i - 12) * 15 * Math.PI / 180\r\n    const aH = Math.abs(H)\r\n    const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n    for (const d of m) {\r\n      const tδ = Math.tan(d * Math.PI / 180)\r\n      const H0 = Math.acos(-tφ * tδ)\r\n      if (aH > H0) {\r\n        continue // sun below horizon\r\n      }\r\n      const Q = sD * sz * sH + (cφ * cz + sφ * sz * cD) * cH + P * tδ\r\n      if (Q < 0) {\r\n        continue // sun below plane of sundial\r\n      }\r\n      const Nx = cD * sH - sD * (sφ * cH - cφ * tδ)\r\n      const Ny = cz * sD * sH - (cφ * sz - sφ * cz * cD) * cH - (sφ * sz + cφ * cz * cD) * tδ\r\n      l.points.push(new Point(a * Nx / Q, a * Ny / Q))\r\n    }\r\n    if (l.points.length > 0) {\r\n      lines.push(l)\r\n    }\r\n  }\r\n  const center = new Point()\r\n  center.x = a / P * cφ * sD\r\n  center.y = -a / P * (sφ * sz + cφ * cz * cD)\r\n  const aP = Math.abs(P)\r\n  const u = a / aP\r\n  const ψ = Math.asin(aP)\r\n  return {\r\n    lines,\r\n    center,\r\n    length: u,\r\n    angle: ψ\r\n  }\r\n}\r\n\r\n/**\r\n * Equatorial computes data for a sundial level with the equator.\r\n *\r\n * Argument φ is geographic latitude at which the sundial will be located;\r\n * a is the length of a straight stylus perpendicular to the plane of the\r\n * sundial.\r\n *\r\n * The sundial will have two sides, north and south.  Results n and s define\r\n * lines on the north and south sides of the sundial.  Result coordinates\r\n * are in units of a, the stylus length.\r\n */\r\nfunction equatorial (φ, a) { // (φ, a float64)  (n, s []Line)\r\n  const tφ = Math.tan(φ)\r\n  const n = []\r\n  const s = []\r\n  for (let i = 0; i < 24; i++) {\r\n    const nl = new Line(i)\r\n    const sl = new Line(i)\r\n    const H = (i - 12) * 15 * Math.PI / 180\r\n    const aH = Math.abs(H)\r\n    const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n    for (const d of m) {\r\n      const tδ = Math.tan(d * Math.PI / 180)\r\n      const H0 = Math.acos(-tφ * tδ)\r\n      if (aH > H0) {\r\n        continue\r\n      }\r\n      const x = -a * sH / tδ\r\n      const yy = a * cH / tδ\r\n      if (tδ < 0) {\r\n        sl.points.push(new Point(x, yy))\r\n      } else {\r\n        nl.points.push(new Point(x, -yy))\r\n      }\r\n    }\r\n    if (nl.points.length > 0) {\r\n      n.push(nl)\r\n    }\r\n    if (sl.points.length > 0) {\r\n      s.push(sl)\r\n    }\r\n  }\r\n  return {\r\n    north: n,\r\n    south: s\r\n  }\r\n}\r\n\r\n/**\r\n * Horizontal computes data for a horizontal sundial.\r\n *\r\n * Argument φ is geographic latitude at which the sundial will be located,\r\n * a is the length of a straight stylus perpendicular to the plane of the\r\n * sundial.\r\n *\r\n * Results consist of a set of lines, a center point, and u, the length of a\r\n * polar stylus.  They are in units of a, the stylus length.\r\n */\r\nfunction horizontal (φ, a) { // (φ, a float64)  (lines []Line, center Point, u float64)\r\n  const [sφ, cφ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(φ)\r\n  const tφ = sφ / cφ\r\n  const lines = []\r\n  for (let i = 0; i < 24; i++) {\r\n    const l = new Line(i)\r\n    const H = (i - 12) * 15 * Math.PI / 180\r\n    const aH = Math.abs(H)\r\n    const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n    for (const d of m) {\r\n      const tδ = Math.tan(d * Math.PI / 180)\r\n      const H0 = Math.acos(-tφ * tδ)\r\n      if (aH > H0) {\r\n        continue // sun below horizon\r\n      }\r\n      const Q = cφ * cH + sφ * tδ\r\n      const x = a * sH / Q\r\n      const y = a * (sφ * cH - cφ * tδ) / Q\r\n      l.points.push(new Point(x, y))\r\n    }\r\n    if (l.points.length > 0) {\r\n      lines.push(l)\r\n    }\r\n  }\r\n  const center = new Point(0, -a / tφ)\r\n  const u = a / Math.abs(sφ)\r\n  return {\r\n    lines,\r\n    center,\r\n    length: u\r\n  }\r\n}\r\n\r\n/**\r\n * Vertical computes data for a vertical sundial.\r\n *\r\n * Argument φ is geographic latitude at which the sundial will be located.\r\n * D is gnomonic declination, the azimuth of the perpendicular to the plane\r\n * of the sundial, measured from the southern meridian towards the west.\r\n * Argument a is the length of a straight stylus perpendicular to the plane\r\n * of the sundial.\r\n *\r\n * Results consist of a set of lines, a center point, and u, the length of a\r\n * polar stylus.  They are in units of a, the stylus length.\r\n */\r\nfunction vertical (φ, D, a) { // (φ, D, a float64)  (lines []Line, center Point, u float64)\r\n  const [sφ, cφ] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(φ)\r\n  const tφ = sφ / cφ\r\n  const [sD, cD] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(D)\r\n  const lines = []\r\n  for (let i = 0; i < 24; i++) {\r\n    const l = new Line(i)\r\n    const H = (i - 12) * 15 * Math.PI / 180\r\n    const aH = Math.abs(H)\r\n    const [sH, cH] = _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sincos(H)\r\n    for (const d of m) {\r\n      const tδ = Math.tan(d * Math.PI / 180)\r\n      const H0 = Math.acos(-tφ * tδ)\r\n      if (aH > H0) {\r\n        continue // sun below horizon\r\n      }\r\n      const Q = sD * sH + sφ * cD * cH - cφ * cD * tδ\r\n      if (Q < 0) {\r\n        continue // sun below plane of sundial\r\n      }\r\n      const x = a * (cD * sH - sφ * sD * cH + cφ * sD * tδ) / Q\r\n      const y = -a * (cφ * cH + sφ * tδ) / Q\r\n      l.points.push(new Point(x, y))\r\n    }\r\n    if (l.points.length > 0) {\r\n      lines.push(l)\r\n    }\r\n  }\r\n  const center = new Point()\r\n  center.x = -a * sD / cD\r\n  center.y = a * tφ / cD\r\n  const u = a / Math.abs(cφ * cD)\r\n  return {\r\n    lines,\r\n    center,\r\n    length: u\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  general,\r\n  equatorial,\r\n  horizontal,\r\n  vertical\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/sundial.js?");

/***/ }),

/***/ "./node_modules/astronomia/src/sunrise.js":
/*!************************************************!*\
  !*** ./node_modules/astronomia/src/sunrise.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sunrise: () => (/* binding */ Sunrise),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/astronomia/src/base.js\");\n/* harmony import */ var _eqtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eqtime.js */ \"./node_modules/astronomia/src/eqtime.js\");\n/* harmony import */ var _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sexagesimal.js */ \"./node_modules/astronomia/src/sexagesimal.js\");\n/* harmony import */ var _solar_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./solar.js */ \"./node_modules/astronomia/src/solar.js\");\n/* harmony import */ var _julian_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./julian.js */ \"./node_modules/astronomia/src/julian.js\");\n/* harmony import */ var _rise_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rise.js */ \"./node_modules/astronomia/src/rise.js\");\n/**\r\n * @copyright 2016 commenthol\r\n * @license MIT\r\n * @module sunrise\r\n */\r\n/**\r\n * Sunrise: Compute rise, noon, set of the Sun for an earth observer\r\n */\r\n\r\n/* eslint key-spacing: 0 */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst stdh0 = {\r\n  sunrise:          new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Angle(true, 0, 50, 0).rad(),\r\n  sunriseEnd:       new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Angle(true, 0, 18, 0).rad(),\r\n  twilight:         new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Angle(true, 6, 0, 0).rad(),\r\n  nauticalTwilight: new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Angle(true, 12, 0, 0).rad(),\r\n  night:            new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Angle(true, 18, 0, 0).rad(),\r\n  goldenHour:       new _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Angle(false, 6, 0, 0).rad()\r\n}\r\n\r\nconst stdh0Sunrise = (refraction) => _rise_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].refraction(stdh0.sunrise, refraction)\r\nconst stdh0SunriseEnd = (refraction) => _rise_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].refraction(stdh0.sunriseEnd, refraction)\r\nconst stdh0Twilight = (refraction) => _rise_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].refraction(stdh0.twilight, refraction)\r\nconst stdh0NauticalTwilight = (refraction) => _rise_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].refraction(stdh0.nauticalTwilight, refraction)\r\nconst stdh0Night = (refraction) => _rise_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].refraction(stdh0.night, refraction)\r\nconst stdh0GoldenHour = (refraction) => _rise_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].refraction(stdh0.goldenHour, refraction)\r\n\r\nclass Sunrise {\r\n  /**\r\n   * Computes time of sunrise, sunset for a given day `date` of an observer on earth given by latitude and longitude.\r\n   * Methods may return `undefined` instead of `julian.Calendar` for latitudes very near the poles.\r\n   * @param {julian.Calendar} date - calendar date\r\n   * @param {number} lat - latitude of observer in the range of (-89.6, 89.6)\r\n   * @param {number} lon - longitude of observer (measured positively westwards, New York = 40.7° lat, 74° lon)\r\n   * @param {number} [refraction] - optional refraction\r\n   */\r\n  constructor (date, lat, lon, refraction) {\r\n    this.date = date\r\n    this.jde = date.midnight().toJDE()\r\n    this.lat = _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].angleFromDeg(lat)\r\n    this.lon = _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].angleFromDeg(lon)\r\n    this.refraction = refraction\r\n  }\r\n\r\n  _calcNoon (jde) {\r\n    const etime = _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].secFromHourAngle(_eqtime_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].eSmart(jde))\r\n    const delta = _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].secFromHourAngle(this.lon)\r\n    const time = 43200 /* noon */ + delta - etime // in seconds\r\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pmod(time / 86400, 86400)\r\n  }\r\n\r\n  _calcRiseOrSet (jde, h0, isSet) {\r\n    const etime = _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].secFromHourAngle(_eqtime_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].eSmart(jde))\r\n    const solarDec = _solar_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].apparentEquatorial(jde).dec\r\n    let ha = _rise_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].hourAngle(this.lat, h0, solarDec)\r\n    if (isSet) ha = -ha\r\n    const delta = _sexagesimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].secFromHourAngle(ha - this.lon)\r\n    const time = 43200 /* noon */ - delta - etime // in seconds\r\n    return time / 86400\r\n  }\r\n\r\n  _calcPolarDayNight (h0, isSet, step) {\r\n    let jde = this.jde\r\n    let t\r\n    let failCnt = 0\r\n    while (failCnt < 190) { // a bit more than days of half a year\r\n      jde += step\r\n      try {\r\n        t = this._calcRiseOrSet(jde, h0, isSet)\r\n        t = this._calcRiseOrSet(jde + t, h0, isSet)\r\n        break\r\n      } catch (e) {\r\n        t = undefined\r\n        failCnt++\r\n      }\r\n    }\r\n    if (t === undefined) {\r\n      return\r\n    }\r\n    return new _julian_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Calendar().fromJDE(jde + t)\r\n  }\r\n\r\n  _calc (h0, isSet) {\r\n    let t\r\n    const jde = this.jde\r\n    // calc 2times for higher accuracy\r\n    try {\r\n      t = this._calcRiseOrSet(jde, h0, isSet)\r\n      t = this._calcRiseOrSet(jde + t, h0, isSet)\r\n      return new _julian_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Calendar().fromJDE(jde + t)\r\n    } catch (e) {\r\n      let step = (isSet ? -1 : 1)\r\n      const doy = this.date.dayOfYear()\r\n      if ( // overlap with march, september equinoxes\r\n        (this.lat > 0 && (doy > 76 && doy < 267)) || // northern hemisphere\r\n        (this.lat < 0 && (doy < 83 || doy > 262)) // southern hemisphere\r\n      ) {\r\n        step = -step\r\n      }\r\n      return this._calcPolarDayNight(h0, isSet, step)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * time of solar transit\r\n   * @return {julian.Calendar} time of noon\r\n   */\r\n  noon () {\r\n    const jde = this.jde\r\n    // calc 2times for higher accuracy\r\n    let t = this._calcNoon(jde + this.lon / (2 * Math.PI))\r\n    t = this._calcNoon(jde + t)\r\n    return new _julian_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Calendar().fromJDE(jde + t)\r\n  }\r\n\r\n  /**\r\n   * Solar limb appears over the easter horizon in the morning\r\n   * @return {julian.Calendar} time of sunrise\r\n   */\r\n  rise () {\r\n    return this._calc(stdh0Sunrise(this.refraction), false)\r\n  }\r\n\r\n  /**\r\n   * @return {julian.Calendar} time of sunset\r\n   * Solar limb disappears on the western horizon in the evening\r\n   */\r\n  set () {\r\n    return this._calc(stdh0Sunrise(this.refraction), true)\r\n  }\r\n\r\n  /**\r\n   * Solar limb is fully visible at the easter horizon\r\n   * @return {julian.Calendar} time of sunrise end\r\n   */\r\n  riseEnd () {\r\n    return this._calc(stdh0SunriseEnd(this.refraction), false)\r\n  }\r\n\r\n  /**\r\n   * Solar limb starts disappearing on the western horizon in the evening\r\n   * @return {julian.Calendar} time of sunset start\r\n   */\r\n  setStart () {\r\n    return this._calc(stdh0SunriseEnd(this.refraction), true)\r\n  }\r\n\r\n  /**\r\n   * Dawn, there is still enough light for objects to be distinguishable,\r\n   * @return {julian.Calendar} time of dawn\r\n   */\r\n  dawn () {\r\n    return this._calc(stdh0Twilight(this.refraction), false)\r\n  }\r\n\r\n  /**\r\n   * Dusk, there is still enough light for objects to be distinguishable\r\n   * Bright stars and planets are visible by naked eye\r\n   * @return {julian.Calendar} time of dusk\r\n   */\r\n  dusk () {\r\n    return this._calc(stdh0Twilight(this.refraction), true)\r\n  }\r\n\r\n  /**\r\n   * nautical dawn - Horizon gets visible by naked eye\r\n   * @return {julian.Calendar} time of nautical dawn\r\n   */\r\n  nauticalDawn () {\r\n    return this._calc(stdh0NauticalTwilight(this.refraction), false)\r\n  }\r\n\r\n  /**\r\n   * nautical dusk - Horizon is no longer visible by naked eye\r\n   * @return {julian.Calendar} time of nautical dusk\r\n   */\r\n  nauticalDusk () {\r\n    return this._calc(stdh0NauticalTwilight(this.refraction), true)\r\n  }\r\n\r\n  /**\r\n   * night starts - No sunlight illumination of the sky, such no intereferance\r\n   * with astronomical observations.\r\n   * @return {julian.Calendar} time of start of night\r\n   */\r\n  nightStart () {\r\n    return this._calc(stdh0Night(this.refraction), true)\r\n  }\r\n\r\n  /**\r\n   * night end - Sunlight starts illumination of the sky and interferes\r\n   * with astronomical observations.\r\n   * @return {julian.Calendar} time of end of night\r\n   */\r\n  nightEnd () {\r\n    return this._calc(stdh0Night(this.refraction), false)\r\n  }\r\n\r\n  /**\r\n   * Start of \"golden hour\" before sunset\r\n   * @return {julian.Calendar} time of start of golden hour\r\n   */\r\n  goldenHourStart () {\r\n    return this._calc(stdh0GoldenHour(this.refraction), true)\r\n  }\r\n\r\n  /**\r\n   * End of \"golden hour\" after sunrise\r\n   * @return {julian.Calendar} time of end of golden hour\r\n   */\r\n  goldenHourEnd () {\r\n    return this._calc(stdh0GoldenHour(this.refraction), false)\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  Sunrise\r\n});\r\n\n\n//# sourceURL=webpack://astro-web/./node_modules/astronomia/src/sunrise.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app.js");
/******/ 	
/******/ })()
;